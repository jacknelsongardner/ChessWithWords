/**
 * `ClassicAppConfig` is the old config being phased out for "Webbit".
 * "v1" / `AppConfig` is the new config backed by config-file.v1.json.
 * `DevvitConfig` is either of these.
 *
 * to-do: delete this comment when ClassicAppConfig is deleted.
 */
import type { ProjectRootDir } from '@devvit/build-pack/lib/BuildPack.js';
import type { JsonValue } from '@devvit/shared-types/json.js';
import { type AppConfig, type AppPermissionConfig, type AppPostConfig, type AppServerConfig } from '@devvit/shared-types/schemas/config-file.v1.js';
import { type DevvitPackageConfig } from './package-managers/package-util.js';
/**
 * Whether the user may be building code while evaluating the project config.
 * Used as a hueristic on when to print which errors.
 * - Dynamic: User is building code (playtest).
 * - Static: User is not building code.
 * - Uninitialized: The app isn't initialized yet. Allows for project name '<% name %>', which is overwritten during initialization.
 */
export type BuildMode = 'Dynamic' | 'Static' | 'Uninitialized';
/** @deprecated Use AppConfig. */
export type ClassicAppConfig = {
    /** Lowercase app name and Community app slug. */
    name: string;
};
export type DevvitConfig = ClassicAppConfig | AppConfig;
/** Basename of default classic config. */
export declare const devvitClassicConfigFilename: string;
/** Basename of default schema v1 config. */
export declare const devvitV1ConfigFilename: string;
/** A logical project file. See config-file.v1.json. */
export declare class Project {
    #private;
    /**
     * @arg root Project root directory.
     * @arg filename Project config filename.
     */
    static new(root: string, filename: string, mode: BuildMode): Promise<Project>;
    readonly flag: {
        watchDebounceMillis?: number | undefined;
        subreddit?: string | undefined;
    };
    readonly app: {
        defaultPlaytestSubredditId?: string | undefined;
    };
    readonly root: ProjectRootDir;
    readonly filename: string;
    constructor(root: ProjectRootDir, filename: string, config: DevvitConfig, packageConfig: Readonly<DevvitPackageConfig> | undefined);
    get appConfig(): Readonly<AppConfig> | undefined;
    get clientDir(): string | undefined;
    get mediaDir(): string | undefined;
    get name(): string;
    set name(name: string);
    get permissions(): Readonly<AppPermissionConfig> | undefined;
    get post(): Readonly<AppPostConfig | undefined>;
    get server(): Readonly<AppServerConfig | undefined>;
    get watchDebounceMillis(): number;
    getSubreddit(mode: 'Dev' | 'Prod'): string | undefined;
    setSubreddit(subreddit: string, mode: 'Dev' | 'Prod'): void;
}
/**
 * Searches for dir containing the config filename. If found, returns a cached
 * config.
 *
 * @arg filename Optional config filename override (usually CLI flag).
 */
export declare function newProject(filename: string | undefined, mode: BuildMode): Promise<Project | undefined>;
/** @internal */
export declare function isAppConfig(config: Readonly<DevvitConfig>): config is AppConfig;
/** @internal */
export declare function parseClassicConfig(json: JsonValue): DevvitConfig;
/** @internal; */
export declare function validateConfig(config: Readonly<AppConfig>, fileExists: (filename: string) => boolean, mode: BuildMode): string[];
export declare function isRunningInAppDirectory(): boolean;
//# sourceMappingURL=project.d.ts.map