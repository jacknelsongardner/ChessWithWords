var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _AppVersionUploader_instances, _AppVersionUploader_cmd, _AppVersionUploader_verbose, _AppVersionUploader_appVersionClient, _AppVersionUploader_getReadmeContent, _AppVersionUploader_verifyThatDevvitPackagesVersionsMatch;
import fsp from 'node:fs/promises';
import path from 'node:path';
import { InstallationType, } from '@devvit/protos/community.js';
import { PRODUCTS_JSON_FILE } from '@devvit/shared-types/constants.js';
import { StringUtil } from '@devvit/shared-types/StringUtil.js';
import { ux } from '@oclif/core';
import { default as glob } from 'tiny-glob';
import { AssetUploader } from './AssetUploader.js';
import { createAppVersionClient } from './clientGenerators.js';
import { decodeAsUtf8, decodeAsUtf16 } from './encodings.js';
import { getPaymentsConfig, readProducts } from './payments/paymentsConfig.js';
import { handleTwirpError } from './twirp-error-handler.js';
export class AppVersionUploader {
    constructor(cmd, { verbose }) {
        _AppVersionUploader_instances.add(this);
        _AppVersionUploader_cmd.set(this, void 0);
        _AppVersionUploader_verbose.set(this, void 0);
        _AppVersionUploader_appVersionClient.set(this, createAppVersionClient());
        __classPrivateFieldSet(this, _AppVersionUploader_cmd, cmd, "f");
        __classPrivateFieldSet(this, _AppVersionUploader_verbose, verbose, "f");
    }
    async createVersion(appInfo, bundles, preventSubredditCreation = false) {
        const about = await __classPrivateFieldGet(this, _AppVersionUploader_instances, "m", _AppVersionUploader_getReadmeContent).call(this);
        // Sync and upload assets
        const assetUploader = new AssetUploader(__classPrivateFieldGet(this, _AppVersionUploader_cmd, "f"), appInfo.appSlug, { verbose: __classPrivateFieldGet(this, _AppVersionUploader_verbose, "f") });
        const { assetMap, webViewAssetMap, iconAsset } = await assetUploader.syncAssets();
        let products;
        try {
            products = await readProducts(__classPrivateFieldGet(this, _AppVersionUploader_cmd, "f").project.root);
        }
        catch (err) {
            throw new Error(`An error occurred when reading and validating ${PRODUCTS_JSON_FILE}: 

  ${StringUtil.caughtToString(err, 'message')}
  
Please refer to https://developers.reddit.com/docs/capabilities/payments for more details.`);
        }
        await Promise.all(
        // Dump these in the assets fields of the bundles
        bundles.map(async (bundle) => {
            bundle.assetIds = assetMap ?? {};
            bundle.webviewAssetIds = webViewAssetMap ?? {};
            if (products) {
                __classPrivateFieldGet(this, _AppVersionUploader_instances, "m", _AppVersionUploader_verifyThatDevvitPackagesVersionsMatch).call(this, bundle, [
                    '@devvit/payments',
                    '@devvit/public-api',
                ]);
                bundle.paymentsConfig = getPaymentsConfig(__classPrivateFieldGet(this, _AppVersionUploader_cmd, "f").project.mediaDir, bundle, products);
            }
        }));
        // Send the devvit.json file with the creation request, if it exists.
        const appConfig = __classPrivateFieldGet(this, _AppVersionUploader_cmd, "f").project.appConfig;
        let devvitJson;
        if (appConfig) {
            devvitJson = JSON.stringify(appConfig);
        }
        ux.action.start(`Uploading new version "${appInfo.appSemver.toString()}" to Reddit`);
        try {
            // Actually create the app version
            const appVersionInfo = await __classPrivateFieldGet(this, _AppVersionUploader_appVersionClient, "f").Create({
                appId: appInfo.appId,
                visibility: appInfo.visibility,
                about,
                validInstallTypes: [InstallationType.SUBREDDIT], // TODO: Once we have user/global installs, we'll need to ask about this.
                majorVersion: appInfo.appSemver.major,
                minorVersion: appInfo.appSemver.minor,
                patchVersion: appInfo.appSemver.patch,
                prereleaseVersion: appInfo.appSemver.prerelease,
                actorBundles: bundles,
                preventPlaytestSubredditCreation: preventSubredditCreation,
                marketingInfo: {
                    icon: iconAsset,
                },
                devvitJson,
            });
            ux.action.stop();
            return appVersionInfo;
        }
        catch (error) {
            ux.action.stop('Error');
            return handleTwirpError(error, (message) => __classPrivateFieldGet(this, _AppVersionUploader_cmd, "f").error(message));
        }
    }
}
_AppVersionUploader_cmd = new WeakMap(), _AppVersionUploader_verbose = new WeakMap(), _AppVersionUploader_appVersionClient = new WeakMap(), _AppVersionUploader_instances = new WeakSet(), _AppVersionUploader_getReadmeContent = 
/**
 * Get the 'about' text from a README.md file
 */
async function _AppVersionUploader_getReadmeContent() {
    const readmeFileName = 'README.md';
    const readmePath = (await glob('*.md', { cwd: __classPrivateFieldGet(this, _AppVersionUploader_cmd, "f").project.root })).filter((file) => file.toLowerCase() === readmeFileName.toLowerCase());
    if (readmePath.length > 1) {
        __classPrivateFieldGet(this, _AppVersionUploader_cmd, "f").log(`Found multiple '${readmeFileName}'-looking files - going with '${readmePath[0]}'`);
    }
    if (readmePath.length >= 1) {
        const aboutBuffer = await fsp.readFile(path.join(__classPrivateFieldGet(this, _AppVersionUploader_cmd, "f").project.root, readmePath[0]));
        const utf8String = decodeAsUtf8(aboutBuffer);
        if (utf8String) {
            // we're UTF-8, no worries
            return utf8String;
        }
        // Check if we're UTF-16
        const utf16String = decodeAsUtf16(aboutBuffer);
        if (utf16String) {
            return utf16String;
        }
        __classPrivateFieldGet(this, _AppVersionUploader_cmd, "f").error(`${readmePath[0]} is not UTF-8 or UTF-16 encoded. Please convert it to UTF-8 or UTF-16.`);
    }
    else {
        __classPrivateFieldGet(this, _AppVersionUploader_cmd, "f").log(`Couldn't find ${readmeFileName}, so not setting an 'about' for this app version (you can update this later)`);
        return '';
    }
}, _AppVersionUploader_verifyThatDevvitPackagesVersionsMatch = function _AppVersionUploader_verifyThatDevvitPackagesVersionsMatch(bundle, packageNames) {
    const uniqueVersions = new Set(packageNames.map((pkgName) => bundle.buildInfo?.dependencies?.[pkgName]));
    if (uniqueVersions.size !== 1) {
        throw new Error(`The versions of the required packages do not match. Please ensure that all packages have the same version: ${packageNames.join(', ')}`);
    }
};
