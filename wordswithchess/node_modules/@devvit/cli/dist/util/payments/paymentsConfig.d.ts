import type { Bundle, PaymentsConfig } from '@devvit/protos/types/devvit/plugin/buildpack/buildpack_common.js';
import type { Product } from '@devvit/shared-types/payments/Product.js';
export type JSONProduct = Omit<Product, 'metadata'> & Partial<Pick<Product, 'metadata'>>;
/**
 * Reads Products from src/products.json
 * @throws if products.json is malformed
 */
export declare function readProducts(projectRoot: string): Promise<JSONProduct[] | undefined>;
/**
 * Validates product config and returns a PaymentsConfig
 *
 * @throws if payment handlers are not registered if a products.json is detected
 * note: this method is intentionally called outside of `this.createVersion` because it includes
 * validation steps that should exit early should errors be thrown
 */
export declare function getPaymentsConfig(mediaDir: string | undefined, bundle: Readonly<Bundle>, products: JSONProduct[], verifyProductImgAssets?: boolean): PaymentsConfig;
export declare function makePaymentsConfig(products: Readonly<JSONProduct[]>): PaymentsConfig;
export declare function validateProductIcon(assetPath: string): void;
//# sourceMappingURL=paymentsConfig.d.ts.map