import { Observable } from 'rxjs';
/**
 * Internal helper function, same as rxjs distinct, but adding an LRU flavor to keep memory bounded.
 */
export function lruDistinct(keySelector, maxKeys = 1000) {
    return (source) => new Observable((subscriber) => {
        const distinctKeys = new Map();
        return source.subscribe({
            next(value) {
                const key = keySelector ? keySelector(value) : value;
                if (!distinctKeys.has(key)) {
                    // If at max capacity, remove oldest entry
                    if (distinctKeys.size >= maxKeys) {
                        const firstKey = distinctKeys.keys().next().value;
                        distinctKeys.delete(firstKey);
                    }
                    distinctKeys.set(key, true);
                    subscriber.next(value);
                }
                else {
                    // Move key to "most recently used" position
                    distinctKeys.delete(key);
                    distinctKeys.set(key, true);
                }
            },
            error(err) {
                subscriber.error(err);
            },
            complete() {
                subscriber.complete();
            },
        });
    });
}
