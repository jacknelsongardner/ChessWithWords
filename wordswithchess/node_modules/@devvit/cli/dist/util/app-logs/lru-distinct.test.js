import { Observable } from 'rxjs';
import { lruDistinct } from './lru-distinct.js';
describe('lruDistinct', () => {
    test('basic distinct behavior', () => {
        const result = [];
        const source = new Observable((subscriber) => {
            [1, 2, 2, 3].forEach((v) => subscriber.next(v));
            subscriber.complete();
        });
        source.pipe(lruDistinct()).subscribe((value) => result.push(value));
        expect(result).toStrictEqual([1, 2, 3]);
    });
    test('LRU eviction with maxKeys', () => {
        const result = [];
        const source = new Observable((subscriber) => {
            [1, 2, 3, 4].forEach((v) => subscriber.next(v));
            subscriber.complete();
        });
        source
            .pipe(lruDistinct(undefined, 2))
            .subscribe((value) => result.push(value));
        expect(result).toStrictEqual([1, 2, 3, 4]);
    });
    test('keeps most recent values', () => {
        const result = [];
        const source = new Observable((subscriber) => {
            [1, 2, 1, 3].forEach((v) => subscriber.next(v));
            subscriber.complete();
        });
        source
            .pipe(lruDistinct(undefined, 2))
            .subscribe((value) => result.push(value));
        expect(result).toStrictEqual([1, 2, 3]);
    });
    test('uses keySelector', () => {
        const result = [];
        const input = [
            { id: 1, value: 'a' },
            { id: 1, value: 'b' },
            { id: 2, value: 'c' },
        ];
        const source = new Observable((subscriber) => {
            input.forEach((v) => subscriber.next(v));
            subscriber.complete();
        });
        source
            .pipe(lruDistinct((item) => item.id))
            .subscribe((value) => result.push(value));
        expect(result).toStrictEqual([
            { id: 1, value: 'a' },
            { id: 2, value: 'c' },
        ]);
    });
});
