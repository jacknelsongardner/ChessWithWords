import type { Empty } from '@devvit/protos/types/google/protobuf/empty.js';
import type { Observable } from 'rxjs';
import type { R2OAuthConfig } from '../http/oauth.js';
import type { TokenInfo } from './AuthTokenStore.js';
import { AuthTokenStore } from './AuthTokenStore.js';
import { StoredToken } from './StoredToken.js';
export type NodeFSAuthenticationPluginConfig = {
    /** Directory of devvit's default config directory */
    dotDevvitDir: string;
    auth: R2OAuthConfig;
};
/**
 * @description server side Node FS implementation of an authentication plugin
 */
export declare class NodeFSAuthenticationPlugin {
    #private;
    readonly authTokenStore: AuthTokenStore;
    autoRefreshTokenTimeout: ReturnType<typeof setTimeout> | undefined;
    constructor(cfg: NodeFSAuthenticationPluginConfig);
    /** Remember to call .dispose() if you subscribed to auth changes through
     * NotifyAuthenticationUpdates to clear the timeouts!
     */
    dispose(): Promise<void>;
    refreshStoredToken(refreshToken: string, copyPaste: boolean): Promise<TokenInfo>;
    Authenticate(): Promise<StoredToken>;
    Validate(): Promise<StoredToken | undefined>;
    /**
     * @description this implementation pushed updates in 2 cases:
     * 1. When this.#authTokenStore file watcher notifies that changes have been
     *    made to the auth store. (e.g. devvit login in a different session)
     * 2. Before the current auth token is about to expire, the auth store will be
     *    requested to refresh.
     */
    NotifyAuthenticationUpdates(_request: Empty): Observable<TokenInfo | undefined>;
    Logout(_request: Empty): Promise<Empty>;
    loginViaCopyPaste(): Promise<StoredToken>;
    fetchAccessToken(authCode: string, copyPaste: boolean): Promise<StoredToken>;
}
//# sourceMappingURL=NodeFSAuthenticationPlugin.d.ts.map