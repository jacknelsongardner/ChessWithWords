var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _Icons_instances, _Icons_getSvgAssets, _Icons_createIconsMap;
import fsp from 'node:fs/promises';
import path from 'node:path';
import { Args, ux } from '@oclif/core';
import tinyglob from 'tiny-glob';
import { DevvitCommand } from '../../util/commands/DevvitCommand.js';
import { dirExists } from '../../util/files.js';
// TODO: When Blocks support is fully removed, this command can be removed as well, since icons will
//  be loaded directly in the webview once we're fully in a Devvit Web world.
class Icons extends DevvitCommand {
    constructor() {
        super(...arguments);
        _Icons_instances.add(this);
    }
    async run() {
        const { args: { outputFile }, } = await this.parse(Icons);
        const svgAssets = await __classPrivateFieldGet(this, _Icons_instances, "m", _Icons_getSvgAssets).call(this);
        if (svgAssets.length === 0) {
            this.log('No SVG assets found - add some to your assets directory!');
            return;
        }
        ux.action.start('Creating icons map');
        const iconsMap = __classPrivateFieldGet(this, _Icons_instances, "m", _Icons_createIconsMap).call(this, svgAssets);
        await fsp.writeFile(outputFile, iconsMap);
        ux.action.stop(`Created icons map at ${outputFile}!`);
    }
}
_Icons_instances = new WeakSet(), _Icons_getSvgAssets = async function _Icons_getSvgAssets() {
    const assetsPath = this.project.mediaDir;
    if (!assetsPath || !(await dirExists(assetsPath))) {
        // Return early if there isn't an assets directory
        return [];
    }
    const assetsGlob = path
        .join(assetsPath, '**', '*.svg')
        // Note: tiny-glob *always* uses `/` as its path separator, even on Windows, so we need to
        // replace whatever the system path separator is with `/`
        .replaceAll(path.sep, '/');
    const assets = await tinyglob(assetsGlob, {
        filesOnly: true,
        absolute: true,
    });
    return await Promise.all(assets.map(async (asset) => {
        const name = path.relative(assetsPath, asset);
        const contents = await fsp.readFile(asset, 'utf-8');
        return { name, contents };
    }));
}, _Icons_createIconsMap = function _Icons_createIconsMap(svgAssets) {
    const HEADER = `// This file is auto-generated by \`devvit create icons\`. Do not edit it directly.
import {svg} from "@devvit/public-api";

export const Icons = {`;
    const FOOTER = `} as const;`;
    const iconLines = svgAssets.map((asset) => `  "${asset.name}": svg\`${asset.contents.replaceAll(/\n/g, '')}\`,`);
    return [HEADER, ...iconLines, FOOTER].join('\n');
};
Icons.description = `Create a new icon set for your project`;
Icons.args = {
    outputFile: Args.string({
        description: 'Path to the output file',
        default: 'src/icons.ts',
    }),
};
export default Icons;
