var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _CreateApp_appClient;
import { StringUtil } from '@devvit/shared-types/StringUtil.js';
import { Args, Flags } from '@oclif/core';
import { MY_PORTAL_ENABLED } from '../../lib/config.js';
import { getCaptcha } from '../../util/captcha.js';
import { createAppClient } from '../../util/clientGenerators.js';
import { DevvitCommand, toLowerCaseArgParser } from '../../util/commands/DevvitCommand.js';
class CreateApp extends DevvitCommand {
    constructor() {
        super(...arguments);
        _CreateApp_appClient.set(this, createAppClient());
    }
    async run() {
        const { args, flags } = await this.parse(CreateApp);
        try {
            const response = await __classPrivateFieldGet(this, _CreateApp_appClient, "f").CreateAppAccount({
                slug: args.appName,
                accountName: args.appAccountName,
                // Only prompt for captcha if we're talking to prod
                captcha: MY_PORTAL_ENABLED ? '' : await getCaptcha({ copyPaste: flags['copy-paste'] }),
            });
            if (!response.created) {
                this.error(response.errors ?? 'For some reason, the account was not created.');
            }
            this.log('Your account was created successfully!');
            if (response.errors) {
                this.warn(response.errors);
            }
        }
        catch (err) {
            this.error(`Something went wrong: ${StringUtil.caughtToString(err, 'message')}`);
        }
    }
}
_CreateApp_appClient = new WeakMap();
CreateApp.hidden = true;
CreateApp.description = 'Create a new app account for an existing app without one';
CreateApp.flags = {
    'copy-paste': Flags.boolean({
        aliases: ['copyPaste'],
        description: 'Copy-paste the auth code instead of opening a browser',
        default: false,
    }),
};
CreateApp.args = {
    appName: Args.string({
        description: 'Name of the app',
        required: true,
        parse: toLowerCaseArgParser,
    }),
    appAccountName: Args.string({
        description: 'Name of the app account you want to claim',
        required: true,
        parse: toLowerCaseArgParser,
    }),
};
export default CreateApp;
