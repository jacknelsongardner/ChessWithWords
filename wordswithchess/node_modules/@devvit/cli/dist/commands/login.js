var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _Login_event;
import { Flags } from '@oclif/core';
import { getAccessTokenAndLoginIfNeeded, getOAuthSvc } from '../util/auth.js';
import { DevvitCommand } from '../util/commands/DevvitCommand.js';
import { sendEvent } from '../util/metrics.js';
class Login extends DevvitCommand {
    constructor() {
        super(...arguments);
        _Login_event.set(this, {
            source: 'devplatform_cli',
            action: 'ran',
            noun: 'login',
            devplatform: {
                cli_raw_command_line: 'devvit ' + process.argv.slice(2).join(' '),
                cli_is_valid_command: true,
                cli_command: 'login',
            },
        });
    }
    init(_mode) {
        // We don't need to initialize the project for the login command.
        return super.init('None');
    }
    async run() {
        const { flags: { 'copy-paste': copyPaste }, } = await this.parse(Login);
        // Clearing a local token before attempting to login (in case the token has expired, for example)
        await getOAuthSvc().Logout({});
        const token = await getAccessTokenAndLoginIfNeeded(copyPaste ? 'CopyPaste' : 'LocalSocket');
        const username = await this.getUserDisplayName(token);
        await sendEvent(__classPrivateFieldGet(this, _Login_event, "f"));
        this.log(`Logged in as ${username}\n\n\`devvit new\` to create a new project\n\`devvit --help\` for more commands\n`);
    }
}
_Login_event = new WeakMap();
Login.description = 'Log in to Devvit via reddit.com';
Login.flags = {
    'copy-paste': Flags.boolean({
        aliases: ['copyPaste'],
        required: false,
        default: false,
        description: 'If present, the user will copy-paste their code from the browser, rather than use localhost.',
    }),
};
export default Login;
