import { InitAppResponse } from '@devvit/protos/types/devvit/cli/init.js';
import { DevvitCommand } from '../util/commands/DevvitCommand.js';
export default class Init extends DevvitCommand {
    #private;
    static aliases: string[];
    static description: string;
    static examples: string[];
    static args: {
        readonly code: import("@oclif/core/lib/interfaces/parser.js").Arg<string | undefined, Record<string, unknown>>;
    };
    static flags: {
        readonly template: import("@oclif/core/lib/interfaces/parser.js").OptionFlag<string | undefined, import("@oclif/core/lib/interfaces/parser.js").CustomOptions>;
        readonly force: import("@oclif/core/lib/interfaces/parser.js").BooleanFlag<boolean>;
    };
    init(): Promise<void>;
    run(): Promise<void>;
}
/**
 * Launches the app creation wizard and retrieves an initialization code from the user.
 *
 * @param appName - The name of the app to prefill in the wizard, or `undefined` if no name is available.
 *   - `undefined` indicates that the app name cannot be prefilled. This can occur if:
 *     - The command is not being run inside an app directory.
 *     - The command is being run inside an app directory, but the name in `devvit.json` is already taken by an app owned by a different user.
 * @param templateName - The name of the pre-selected template to clone, or `undefined` if unknown.
 *   - `undefined` indicates that the template cannot be determined. In this case, the wizard will prompt the user for a template
 *     if the command isn't running inside an app directory. A template cannot be determined if:
 *     - The command is running outside an app directory.
 *     - The command is running inside an app directory, but the template in use cannot be identified.
 * @returns A promise that resolves to the initialization code provided by the user.
 */
export declare function getCodeFromWizard(appName: string | undefined, templateName: string | undefined, logger: {
    log(msg?: string): void;
    error(msg: string): void;
}): Promise<string>;
export declare function unpackCode(base64code: string): InitAppResponse | undefined;
export declare function gitInitIfNeeded(projectPath: string): Promise<void>;
export declare function updatePackageJSON(projectPath: string, appName: string): Promise<void>;
export declare function installAppDependencies(projectPath: string, logger: {
    log(msg?: string): void;
}): Promise<{
    success: boolean;
}>;
//# sourceMappingURL=init.d.ts.map