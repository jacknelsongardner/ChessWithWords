import type { BridgeContext, DevvitPostData } from '@devvit/protos/json/devvit/ui/effects/web_view/v1alpha/context.js';
import type { BaseContext } from '@devvit/shared';
import { T3 } from '@devvit/shared-types/tid.js';
/** App deep link data. */
type Share = {
    userData: string | undefined;
};
/**
 * Devvit web client context for the lifetime of the web view.
 */
export type Context = BaseContext & {
    /**
     * The ID of the current post.
     */
    postId: T3;
};
declare global {
    namespace globalThis {
        var devvit: {
            context: Context;
            share: Share | undefined;
        };
    }
}
/** @internal */
export declare const _initContext: ({ search, hash }: Location) => void;
/**
 * Extracts the BridgeContext from the hash.
 * @internal
 */
export declare function getBridgeContextFromHash(hash: string | undefined): BridgeContext | undefined;
/**
 * Extracts the 'devvit-post-data' header from the Webbit token and returns the DevvitPostData object.
 * @param webbitToken The Webbit token to extract devvit-post-data
 * @returns The DevvitPostData object if it can be parsed, otherwise undefined.
 */
export declare function getPostDataFromWebbitToken(webbitToken: string): DevvitPostData | undefined;
export {};
//# sourceMappingURL=init-context.d.ts.map