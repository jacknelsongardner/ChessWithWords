import { T2, T3, T5 } from '@devvit/shared-types/tid.js';
import { noWebbitToken } from '@devvit/shared-types/webbit.js';
import { jwtDecode } from 'jwt-decode';
/** @internal */
export const _initContext = ({ search, hash }) => {
    const contextParam = new URLSearchParams(search).get('context');
    // TODO: throw an error here after clients have been updated to start sending the context param
    if (contextParam) {
        const jsonString = decodeURIComponent(contextParam);
        const contextProto = JSON.parse(jsonString);
        // Try to get PostData from the BridgeContext.webbit_token first. Else check for webbit_token in query params.
        const bridgeContext = getBridgeContextFromHash(hash);
        const webbitToken = bridgeContext?.webbitToken ?? new URLSearchParams(search).get('webbit_token');
        const postData = webbitToken ? getPostDataFromWebbitToken(webbitToken) : undefined;
        const context = {
            subredditId: T5(contextProto.subredditId),
            userId: contextProto.userId ? T2(contextProto.userId) : undefined,
            subredditName: contextProto.subredditName,
            appName: contextProto.appName,
            appVersion: contextProto.appVersion,
            postId: T3(contextProto.postId),
            postData: postData?.developerData,
        };
        globalThis.devvit = {
            context,
            share: bridgeContext?.shareParam
                ? { userData: bridgeContext?.shareParam.userData }
                : undefined,
        };
    }
};
if (globalThis.location) {
    _initContext(globalThis.location);
}
/**
 * Extracts the BridgeContext from the hash.
 * @internal
 */
export function getBridgeContextFromHash(hash) {
    const bridgeContext = hash?.slice(1); // Strip the leading '#' from the hash
    if (!bridgeContext)
        return;
    try {
        return JSON.parse(decodeURIComponent(bridgeContext));
    }
    catch (error) {
        console.error('Error parsing bridge context from hash', error);
        return undefined;
    }
}
/**
 * Extracts the 'devvit-post-data' header from the Webbit token and returns the DevvitPostData object.
 * @param webbitToken The Webbit token to extract devvit-post-data
 * @returns The DevvitPostData object if it can be parsed, otherwise undefined.
 */
export function getPostDataFromWebbitToken(webbitToken) {
    if (webbitToken === noWebbitToken) {
        return undefined;
    }
    let payload;
    try {
        payload = jwtDecode(webbitToken);
    }
    catch (error) {
        console.error('Failed to parse jwt:', error);
        return undefined;
    }
    const devvitPostData = payload['devvit-post-data'];
    if (!devvitPostData || Object.keys(devvitPostData).length === 0) {
        return undefined;
    }
    return devvitPostData;
}
