{
  "version": 3,
  "sources": ["../../src/analytics.ts", "../../src/auth-token.ts", "../../../shared-types/dist/web-view-scripts-constants.js", "../../src/client.ts", "../../src/fetch.ts", "../../src/devvit.v1.ts"],
  "sourcesContent": ["import type { WebViewInternalMessage } from '@devvit/protos/types/devvit/ui/effects/web_view/v1alpha/post_message.js';\n\n/**\n * initAnalytics is added to all Devvit apps which use web views.\n *\n * This sends interaction events to the parent window via postMessage.\n * These metrics are used to inform app performance and feed ranking.\n */\nexport const initAnalytics = (): void => {\n  if (document.readyState === 'loading') {\n    document.addEventListener('DOMContentLoaded', setupTracking, { once: true });\n  } else {\n    setupTracking();\n  }\n};\n\nconst setupTracking = (): void =>\n  document.addEventListener(\n    'pointerdown',\n    () =>\n      postWebViewInternalMessage({\n        scope: 0,\n        type: 'devvit-internal',\n        analytics: { event: 'click' },\n      }),\n    {\n      passive: true,\n    }\n  );\n\nconst postWebViewInternalMessage = (internalMessage: WebViewInternalMessage): void =>\n  parent.postMessage(internalMessage, '*');\n\ninitAnalytics();\n\nglobalThis.addEventListener('load', () => {\n  const timeStart = performance.timeOrigin;\n  const duration = performance.now();\n  const timeEnd = performance.timeOrigin + duration;\n\n  postWebViewInternalMessage({\n    scope: 0,\n    type: 'devvit-internal',\n    analytics: { event: 'web-view-loaded', timeStart, timeEnd, duration },\n  });\n});\n", "/** Query the authorization bearer token from the iframe URL. */\nexport function queryAuthToken(location: Readonly<Location>): string {\n  const token = new URL(location.href).searchParams.get('webbit_token');\n  if (!token) throw Error('no auth token');\n  return token;\n}\n", "/**\n * The `@devvit/client` version query parameter name the web view's document\n * script tag:\n *\n *   <script src=\"https://webview.devvit.net/scripts/devvit.v1.min.js?clientVersion=1.2.3\"></script>\n *\n * The value is the version of `@devvit/client` bundled with the app.\n * `@devvit/client` may have runtime dependencies on\n * `@devvit/web-view-scripts` (`devvit.v1.min.js`) which is not bundled. The\n * client version can be used to specialize behavior to match the static\n * expectations of the `@devvit/client` version.\n */\nexport const clientVersionQueryParam = 'clientVersion';\n", "import { clientVersionQueryParam } from '@devvit/shared-types/web-view-scripts-constants.js';\n\n/**\n * Queries the client version (eg, `'1.2.3'`) from the iframe document's script\n * tag:\n *\n *   <script src=\"https://webview.devvit.net/scripts/devvit.v1.min.js?clientVersion=1.2.3\"></script>\n *\n * See `clientVersionQueryParam`.\n */\nexport function queryClientVersion(document: Readonly<Document>): string | undefined {\n  if (document.currentScript && 'src' in document.currentScript)\n    return (\n      new URL(document.currentScript.src).searchParams.get(clientVersionQueryParam) ?? undefined\n    );\n}\n", "/** Injects an auth token into /api/ requests. */\nexport async function fetch(\n  authToken: string,\n  globalFetch: typeof globalThis.fetch,\n  location: Readonly<Location>,\n  input: RequestInfo | URL,\n  init?: RequestInit\n): Promise<Response> {\n  const req = new Request(input, init);\n  if (isSameSite(location, new URL(req.url)))\n    req.headers.set('Authorization', `Bearer ${authToken}`);\n  // to-do: pass devvit-debug from BridgeContext.\n  return await globalFetch(req);\n}\n\n/** @internal */\nexport function isSameSite(location: Readonly<Location>, url: URL): boolean {\n  return url.origin === location.origin;\n}\n", "import './analytics.js';\n\nimport { queryAuthToken } from './auth-token.js';\nimport { queryClientVersion } from './client.js';\nimport { fetch } from './fetch.js';\n\nconst clientVersion = queryClientVersion(document);\nconsole.debug(`@devvit/client v${clientVersion ?? '?'}`);\n\n// to-do: use bridge context\nglobalThis.fetch = fetch.bind(undefined, queryAuthToken(location), globalThis.fetch, location);\n"],
  "mappings": "AAQO,IAAMA,EAAgB,IAAY,CACnC,SAAS,aAAe,UAC1B,SAAS,iBAAiB,mBAAoBC,EAAe,CAAE,KAAM,EAAK,CAAC,EAE3EA,EAAc,CAElB,EAEMA,EAAgB,IACpB,SAAS,iBACP,cACA,IACEC,EAA2B,CACzB,MAAO,EACP,KAAM,kBACN,UAAW,CAAE,MAAO,OAAQ,CAC9B,CAAC,EACH,CACE,QAAS,EACX,CACF,EAEIA,EAA8BC,GAClC,OAAO,YAAYA,EAAiB,GAAG,EAEzCH,EAAc,EAEd,WAAW,iBAAiB,OAAQ,IAAM,CACxC,IAAMI,EAAY,YAAY,WACxBC,EAAW,YAAY,IAAI,EAC3BC,EAAU,YAAY,WAAaD,EAEzCH,EAA2B,CACzB,MAAO,EACP,KAAM,kBACN,UAAW,CAAE,MAAO,kBAAmB,UAAAE,EAAW,QAAAE,EAAS,SAAAD,CAAS,CACtE,CAAC,CACH,CAAC,EC5CM,SAASE,EAAeC,EAAsC,CACnE,IAAMC,EAAQ,IAAI,IAAID,EAAS,IAAI,EAAE,aAAa,IAAI,cAAc,EACpE,GAAI,CAACC,EAAO,MAAM,MAAM,eAAe,EACvC,OAAOA,CACT,CCOO,IAAMC,EAA0B,gBCFhC,SAASC,EAAmBC,EAAkD,CACnF,GAAIA,EAAS,eAAiB,QAASA,EAAS,cAC9C,OACE,IAAI,IAAIA,EAAS,cAAc,GAAG,EAAE,aAAa,IAAIC,CAAuB,GAAK,MAEvF,CCdA,eAAsBC,EACpBC,EACAC,EACAC,EACAC,EACAC,EACmB,CACnB,IAAMC,EAAM,IAAI,QAAQF,EAAOC,CAAI,EACnC,OAAIE,EAAWJ,EAAU,IAAI,IAAIG,EAAI,GAAG,CAAC,GACvCA,EAAI,QAAQ,IAAI,gBAAiB,UAAUL,CAAS,EAAE,EAEjD,MAAMC,EAAYI,CAAG,CAC9B,CAGO,SAASC,EAAWJ,EAA8BK,EAAmB,CAC1E,OAAOA,EAAI,SAAWL,EAAS,MACjC,CCZA,IAAMM,EAAgBC,EAAmB,QAAQ,EACjD,QAAQ,MAAM,mBAAmBD,GAAiB,GAAG,EAAE,EAGvD,WAAW,MAAQE,EAAM,KAAK,OAAWC,EAAe,QAAQ,EAAG,WAAW,MAAO,QAAQ",
  "names": ["initAnalytics", "setupTracking", "postWebViewInternalMessage", "internalMessage", "timeStart", "duration", "timeEnd", "queryAuthToken", "location", "token", "clientVersionQueryParam", "queryClientVersion", "document", "clientVersionQueryParam", "fetch", "authToken", "globalFetch", "location", "input", "init", "req", "isSameSite", "url", "clientVersion", "queryClientVersion", "fetch", "queryAuthToken"]
}
