syntax = "proto3";

package evaluator;

import "devvit/data/api/v1alpha/filter.proto";
import "devvit/events/v1alpha/events.proto";
import "devvit/options/options.proto";
import "devvit/reddit/v2alpha/subredditv2.proto";
import "devvit/reddit/v2alpha/userv2.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";
import "reddit/coreplatform/common/v1/media.proto";
import "snooron_sources/text_classification/text_classification.proto";
import "snooron_sources/v2_event/v2_event.proto";

option go_package = "github.snooguts.net/reddit/data-api-firehose/generated/protos/types/evaluator";

enum DistinguishType {
  NULL_VALUE = 0;
  ADMIN = 1;
  GOLD = 2;
  GOLD_AUTO = 3;
  YES = 4;
  SPECIAL = 5;
}

message PredicateQueueItem {
  string thing_id = 1;
}

message IntermediateModel {
  //The t#_id of the post/comment
  string id = 1;
  google.protobuf.Timestamp timestamp = 2;

  //Info related to safety evaluation
  SafetyInfo safety_info = 3;

  oneof model {
    Post post = 4;
    Comment comment = 5;
  }
  int64 version = 6;

  Subreddit subreddit = 7;
  FirehoseFilterData filter_data = 8;
  User author = 9;
  DeletedInfo delete_info = 10;
  //NEXT: 11
}

message Subreddit {
  string id = 1;
  string name = 2;
  google.protobuf.Timestamp last_hydrated = 4;
  devvit.reddit.v2alpha.SubredditType type = 5;
  devvit.reddit.v2alpha.SubredditRating rating = 6;
  bool spam = 7;
  bool quarantined = 8;
  bool hydrated = 9;
}

message SafetyInfo {
  map<string, ContentClassification> content_classifications = 1;
  map<string, text_classification.Class> text_classifications = 2;
  map<string, P0MediaCheck> p0_media_checks = 3;
}

//TODO: Can't import this proto until go package name is fixed
message P0MediaCheck {
  // indicates if a match was discovered
  bool match = 1;

  // the ID of the scanned content (i.e. post ID, comment ID, etc.)
  string content_id = 2;

  enum MatchType {
    MATCH_TYPE_UNSPECIFIED = 0; // default value - no match found
    MATCH_TYPE_NCIM = 1;
    MATCH_TYPE_CSAM = 2;
  }

  // specifies which type of match was discovered
  MatchType match_type = 3;

  // UUID for the P0MediaCheck message
  // can be used by consumers to exclude corrupted events, if sent
  string id = 4;

  // when the P0 request was received (in UTC)
  google.protobuf.Timestamp ccs_received_at = 5;
}

message ContentClassification {
  string media_id = 1;
  string type = 2;
  string url = 3;
  //For image classification
  v2_event.MLModel ml_model = 4;
}

message Comment {
  //Fields needed to generate a CommentFirehose
  string id = 1;
  string body = 2;
  google.protobuf.Timestamp created_at = 3;
  google.protobuf.Timestamp last_modified_at = 4;
  repeated string element_types = 5;
  bool gilded = 6;
  string language_code = 7;
  string parent_id = 8;
  string permalink = 9;
  int32 score = 10;
  bool spam = 12;
  bool deleted = 13;
  //Used for safety
  repeated string media_ids = 11;

  //TODO: Add fields for filtering
}
message DeletedInfo {
  google.protobuf.Timestamp deleted_at = 1;
  devvit.events.v1alpha.EventSource source = 2;
  devvit.events.v1alpha.DeletionReason reason = 3;
}
message FirehoseFilterData {
  devvit.options.FirehoseEvent event = 1;
  string subreddit_id = 2;
  devvit.reddit.v2alpha.SubredditRating subreddit_rating = 3;

  map<string, double> perspective_scores = 4;
  map<string, double> perspective_scores_title = 5;
  map<string, double> perspective_scores_body = 6;

  devvit.reddit.v2alpha.SubredditType subreddit_type = 7;
  bool admin_takedown = 8;
  double abuse_score = 9;
  devvit.data.api.v1alpha.FirehoseFilterData.ApprovalStatus approval_status = 10;
  SafetyTag safety_x_tag = 11;
  SafetyTag safety_v_tag = 12;
  // custom value set by our own services
  bool sexually_explicit = 13;
}

message User {
  string id = 1;
  string name = 2;
  bool spam = 3;
  bool banned = 4;
  bool hydrated = 5;
  google.protobuf.Timestamp last_hydrated = 6;
}

message SafetyTag {
  map<string, double> versions = 1;
  double score = 2;
}

message UserFlair {
  string text = 1;
}

message LinkFlair {
  string text = 1;
}

message Post {
  //Fields needed to generate a PostFirehose
  string id = 1;
  string body = 2;
  google.protobuf.Timestamp created_at = 3;
  google.protobuf.Timestamp last_modified_at = 4;
  string crosspost_parent_id = 5;
  LinkFlair flair = 6;
  DistinguishType distinguish_type = 7;
  int32 gildings = 8;
  string language_code = 9;
  bool locked = 10;
  reddit.coreplatform.common.v1.MediaObject media = 11;
  bool nsfw = 12;
  int32 num_comments = 13;
  string permalink = 14;
  int32 score = 15;
  bool self = 16;
  bool spam = 17;
  bool spoiler = 18;
  bool sticky = 19;
  string thumbnail = 20;
  string title = 21;
  string type = 22;
  string url = 23;
  bool video = 24;
  repeated string media_ids = 25;
  bool is_poll = 26;
  bool image_upload = 27;
  string author_id = 28;
  FirehoseFilterData filter_data = 29;
  bool unlisted = 30;
  bool deleted = 31;

  //TODO: Add relevant fields to create a FirehoseComment
  //TODO: Add fields for filtering
}
