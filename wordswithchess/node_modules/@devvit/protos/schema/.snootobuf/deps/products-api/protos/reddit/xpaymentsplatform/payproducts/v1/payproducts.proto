syntax = "proto3";

package reddit.xpaymentsplatform.payproducts.v1;

import "reddit/xpaymentsplatform/payproducts/v1/currencies.proto";

option go_package = "github.snooguts.net/reddit/reddit-service-pay-products/products-api/api/xpaymentsplatform/payproductspb/v1;payproductspb";

// DemoRequest should be replaced by the request message for your first RPC.
message DemoRequest {
  // Add (and document) your request parameters here.
  string parameter = 1;
}

// DemoResponse should be replaced by the response message for your first RPC.
message DemoResponse {
  // Add (and document) your output fields here.
  string output = 1;
}

// AuthDemoRequest should be replaced by the request message for your first RPC.
message AuthDemoRequest {
  // Add (and document) your request parameters here.
  string what = 1;
}

// AuthDemoResponse should be replaced by the response message for your first RPC.
message AuthDemoResponse {
  // Add (and document) your output fields here.
  string output = 1;
}

enum ProductType {
  PRODUCT_TYPE_UNSPECIFIED = 0;
  REDDIT_GOLD = 1;
  AWARD = 2;
}

enum PaymentProvider {
  PAYMENT_PROVIDER_UNSPECIFIED = 0;
  STRIPE = 1;
  PAYPAL = 2;
  GOOGLE_INAPP = 3;
  APPLE_INAPP = 4;
  REDDIT_GOLD_PROVIDER = 5;
}

message Image {
  string url = 1;
  int32 width = 2;
  int32 height = 3;
}

message Product {
  string id = 1;
  ProductType product_type = 2;
  string name = 3; // internal name
  PaymentProvider payment_provider = 4;
  ProductPrice price = 5;
  ProductPrice base_price = 6;
  string external_id = 7;
  map<string, Image> images = 8;
  oneof metadata {
    RedditGoldMetadata reddit_gold = 9;
  }
}

message ProductPrice {
  int32 amount = 1;
  Currency currency = 2;
}

message RedditGoldMetadata {
  int32 amount = 1;
}

message ClientInfo {
  string app_name = 1;
  string app_version = 2;
  string request_ip = 3;
  string country_code = 4;
  string subdivision_code = 5;
  string city_code = 6;
}

message GetProductsRequest {
  ProductType product_type = 1;
  repeated PaymentProvider payment_providers = 2;
  Currency currency = 3;
  ClientInfo client_info = 4;
}

message GetProductsResponse {
  repeated Product products = 1;
}

message GetSpecificProductRequest {
  string product_id = 1;
  Currency currency = 2;
}

message GetSpecificProductResponse {
  Product product = 1;
}

// Rename this RPC service and add your RPCs.
service PayProductsService {
  // Replace this RPC and its request and response messages.
  rpc Demo(DemoRequest) returns (DemoResponse) {}

  // This is like the endpoint above but it enforces authentication.
  // Again, this should be replaced or removed based on your service requirements.
  rpc AuthDemo(AuthDemoRequest) returns (AuthDemoResponse) {}

  rpc GetProducts(GetProductsRequest) returns (GetProductsResponse) {}

  rpc GetSpecificProduct(GetSpecificProductRequest) returns (GetSpecificProductResponse) {}
}
