syntax = "proto3";

package reddit.coreplatform.cloudroutines.callback.v1;

import "google/protobuf/any.proto";
import "google/protobuf/duration.proto";
import "reddit/coreplatform/cloudroutines/event/v1/event.proto";
import "reddit/coreplatform/events/cloudevent/v1/cloudevent.proto";

option go_package = "github.snooguts.net/reddit/cloudroutines/go/callbackpb/v1;callbackpb";

// RPC Service for working with Cloudroutines callbacks
service CallbackService {
  // Invoke makes an RPC call to the user's registered callback in their application
  rpc Invoke(InvokeRequest) returns (InvokeResponse) {
    option idempotency_level = IDEMPOTENT;
  }

  // TODO(marco.ferrer):12/11/23 we may want to add an RPC that the cloudroutines server can
  // call when a consumer is in trouble or didnt like the result returned by the callback server
  // then the sdk can record metrics or change application health, or deregister the callback.
}

// Request message containing the event to be processed by the user's registered callback
message InvokeRequest {
  // CloudEvent compliant event payload
  reddit.coreplatform.events.cloudevent.v1.CloudEvent event = 1;
  // Name of the callback function to be invoked
  string callback_name = 2;
}

// Response message containing the user's registered callback response after processing an event
message InvokeResponse {
  OperationResult result = 1;
}

// OperationResult represents the result of a Cloudroutines operation, currently only a publication result
message OperationResult {
  oneof result {
    Publication publication = 1;
  }

  // Publication represents a result of a Cloudroutines operation, consisting of a protobuf message
  // and message route of the protobuf message
  message Publication {
    google.protobuf.Any message = 1;
    reddit.coreplatform.cloudroutines.event.v1.MessageRoute message_route = 2;
  }
}

// A finite set of policies which inform the Cloudroutines server on how to react to an error returned by the SDK server.
message FailurePolicy {
  // Undefined is the default error policy attached to all status errors when no policy was explicitly set
  // by the user. This policy message enables the Cloudroutines server to detect when errors are surfaced
  // from the client vs the network infrastructure.
  message Undefined {}

  // RetryAfter is the failure policy that indicates a message should be retried after the specified duration.
  // This is the default failure policy applied if no failure policy is found on the callback error.
  message RetryAfter {
    google.protobuf.Duration duration = 1;
  }

  // BlockExecutionis the failure policy that does a best effort attempt at blocking further execution
  // from the current message. Manual intervention is required.
  message BlockExecution {
    string reason = 1;
  }

  // Skip is the failure policy that indicates the current message can be dropped.
  message Skip {
    string reason = 1;
  }

  // DeadLetterQueue is the failure policy that adds the current message to a DLQ. The message routing
  // can be set, otherwise defaults will be used based on the message.
  message DeadLetterQueue {
    string reason = 1;

    // Message route allows a user to configure the destination for the DLQ message. If no route is defined,
    // the SDK will infer the default route based on the message's protobuf fullname, eg. `dlq_{proto_full_name}`.
    reddit.coreplatform.cloudroutines.event.v1.MessageRoute message_route = 2;
  }

  oneof policy {
    Undefined undefined = 1;
    RetryAfter retry_after = 2;
    BlockExecution block_execution = 3;
    Skip skip = 4;
    DeadLetterQueue dead_letter_queue = 5;
  }
}
