syntax = "proto3";

package reddit.coreplatform.cloudroutines.event.v1;

import "google/protobuf/descriptor.proto";
import "reddit/coreplatform/cloudroutines/workerpool/v1/workerpool.proto";
import "validate/validate.proto";

option go_package = "github.snooguts.net/reddit/cloudroutines/go/eventpb/v1;eventpb";

extend google.protobuf.MessageOptions {
  EventMessageMetadata message = 78110999;
}

extend google.protobuf.FieldOptions {
  EventFieldMetadata field = 78110999;
}

message EventMessageMetadata {
  string default_topic = 1;
  repeated reddit.coreplatform.cloudroutines.workerpool.v1.WorkerPool.Source publication_source_whitelist = 2;
}

message EventFieldMetadata {
  bool sharding_identifier = 1;
  string sharding_field_path = 2;
}

message MessageRoute {
  // Cluster URI is optional. Defaults to the same cluster as the original protobuf message.
  // This will be mapped internally to the correct publisher.
  optional string cluster_uri = 1 [(validate.rules).string = {
    // TODO: figure out the regex on :/?.&=[]
    // pattern: "^[-_a-zA-Z0-9]+$",
    min_len: 1
    max_len: 64
  }];

  // Topic is optional. Defaults to `dlq_{proto_full_name}`.
  optional string topic = 2 [(validate.rules).string = {
    pattern: "^[-_a-zA-Z0-9]+$"
    min_len: 1
    max_len: 255
  }];

  // Partitioning value is optional. Defaults to the annotated field on the original protobuf message.
  optional string partitioning_value = 3 [(validate.rules).string = {
    pattern: "^[-_.a-zA-Z0-9]+$"
    min_len: 1
    max_len: 255
  }];
}
