syntax = "proto3";

package reddit.coreplatform.links.v1;

import "validate/validate.proto";

option go_package = "github.snooguts.net/reddit/thing-api/go/grpc/links/v1;links";
option java_multiple_files = true;
option java_outer_classname = "LinksServiceProto";
option java_package = "com.reddit.coreplatform.api.links.v1";

// RPC Service for working with core Links/Post model.
service LinksService {
  // Get all links (link ids) posted by an account. This includes all links including deleted ones.
  rpc GetLinkIdsByAuthor(GetLinkIdsByAuthorRequest) returns (GetLinkIdsByAuthorResponse) {
    option idempotency_level = NO_SIDE_EFFECTS;
  }

  // Checks whether or not an account has access to view a link/post
  rpc CanAccountViewLink(CanAccountViewLinkRequest) returns (CanAccountViewLinkResponse) {
    option idempotency_level = NO_SIDE_EFFECTS;
  }

  // Get all link ids of links voted or down voted by user.
  rpc GetUserVotedLinkIds(GetUserVotedLinkIdsRequest) returns (GetUserVotedLinkIdsResponse) {
    option idempotency_level = NO_SIDE_EFFECTS;
  }

  // Return all crossposts except current
  rpc GetCrosspost(GetCrosspostRequest) returns (GetCrosspostResponse) {
    option idempotency_level = NO_SIDE_EFFECTS;
  }

  //Add a crosspost to the Crosspost table
  rpc AddCrosspost(AddCrosspostRequest) returns (AddCrosspostResponse) {
    option idempotency_level = IDEMPOTENT;
  }
}

// Request to get all links by author.
// This endpoint was added for Reddar to fetch all LinkIds by a given author.
// The sort order for the LinkIs by author is sorted in DESC by default.
// When this endpoint is invoked with direction as DIRECTION_PREV and a cursor, then sort order is ASC.
message GetLinkIdsByAuthorRequest {
  // Direction enum represents whether to move forward or backward while fetching records
  enum Direction {
    // This is default value of direction.
    DIRECTION_UNSPECIFIED = 0;
    // Next fetches records specified by the limit after the current cursor ID.
    // Calling Next at the end of records will return empty.
    DIRECTION_NEXT = 1;
    // Prev fetches records specified by the limit before the current cursor ID.
    // Calling Prev at the start of records will return empty.
    DIRECTION_PREV = 2;
  }

  // Account identifier to request links for. Specified account id should be a valid thing
  // identifier with t2 prefix.
  string account_id = 1 [(validate.rules).string = {pattern: "^t2_[a-zA-Z0-9]+$"}];

  // Optional cursor for pagination. When absent returns the first page.
  optional string cursor = 2;

  // Optional maximum page size limit (defaulted to and capped at 1000).
  optional int32 limit = 3 [(validate.rules).int32.lte = 1000];

  // Direction to indicate whether to fetch records forwards or backwards from the cursor.
  Direction direction = 4 [(validate.rules).enum = {
    not_in: [0]
  }];
}

// Response with all the links posted by an author.
message GetLinkIdsByAuthorResponse {
  // Link ids authored by the user.
  repeated string link_id = 1;

  // Cursor for the next page (empty if exhausted).
  optional string cursor = 2;
}

// Request arguments for Link/Post visibility check.
message CanAccountViewLinkRequest {
  // The account id of the user we are checking visibility permissions against.
  // The id must be in a valid `t2_{}` thing id format.
  string account_id = 1 [(validate.rules).string = {
    pattern: "^t2_[a-zA-Z0-9]+$"
    ignore_empty: true
  }];

  // A list of link ids to check if the supplied account id has permission to view
  // Each link id must be in a valid `t3_{}` thing id format.
  repeated string link_ids = 2 [(validate.rules).repeated = {
    min_items: 1
    max_items: 100
    items: {
      string: {pattern: "^t3_[a-zA-Z0-9]+$"}
    }
  }];
}

// Response payload for a Link visibility check.
message CanAccountViewLinkResponse {
  // A list which is a subset of links the requested account has permission to view.
  repeated string visible_link_ids = 1;
}

// query type informs which type of link ids to fetch
enum UserVotedLinkType {
  // default value of link type. This value is not allowed in the request.
  USER_VOTED_LINK_TYPE_UNSPECIFIED = 0;
  // indicated to fetch up voted links by user.
  USER_VOTED_LINK_TYPE_UP_VOTED = 1;
  // indicated to fetch down voted links by user.
  USER_VOTED_LINK_TYPE_DOWN_VOTED = 2;
}

// Request to get all up voted or down voted link ids by user.
// This endpoint was added for Investigation to fetch all LinkIds up voted or down voted by user.
// The sort order for the LinkIs by user is sorted in DESC by default.
// When this endpoint is invoked with direction as DIRECTION_PREV and a cursor, then sort order is ASC.
message GetUserVotedLinkIdsRequest {
  // Direction enum represents whether to move forward or backward while fetching records
  enum Direction {
    // This is default value of direction.
    DIRECTION_UNSPECIFIED = 0;
    // Next fetches records specified by the limit after the current cursor ID.
    // Calling Next at the end of records will return empty.
    DIRECTION_NEXT = 1;
    // Prev fetches records specified by the limit before the current cursor ID.
    // Calling Prev at the start of records will return empty.
    DIRECTION_PREV = 2;
  }

  // Account identifier to request link ids for. Specified account id should be a valid thing
  // identifier with t2 prefix.
  string account_id = 1 [(validate.rules).string.pattern = "^t2_[a-zA-Z0-9]+$"];

  // query type distinguishes fetching up voted or down voted link ids
  UserVotedLinkType user_voted_link_type = 2 [(validate.rules).enum = {
    not_in: [0]
  }];

  // Optional cursor for pagination. When absent returns the first page.
  optional string cursor = 3;

  // Optional maximum page size limit (defaulted to and capped at 1000).
  optional int32 limit = 4 [(validate.rules).int32.lte = 1000];

  // Direction to indicate whether to fetch records forwards or backwards from the cursor.
  Direction direction = 5 [(validate.rules).enum = {
    not_in: [0]
  }];
}

// Response with all the link ids up voted or down voted by an user.
message GetUserVotedLinkIdsResponse {
  // link ids up voted or down voted by user
  repeated string link_ids = 1;

  // Cursor for the next page (empty if exhausted).
  optional string cursor = 2;
}

// Request to get all the children links of the current crosspost
message GetCrosspostRequest {
  // link_id to get children crossposts on
  string link_id = 1 [(validate.rules).string.pattern = "^t3_[a-zA-Z0-9]+$"];
}

// Response with link ids of all the given post's crosspost children
message GetCrosspostResponse {
  // a list of link_ids of the crosspost's children
  repeated string crosspost_children = 1;
}

//  Link and crosspost to add to Crosspost table
message AddCrosspostRequest {
  // link id of the root
  string link_id = 1 [(validate.rules).string.pattern = "^t3_[a-zA-Z0-9]+$"];
  // link id of the crosspost
  string crosspost_id = 2 [(validate.rules).string.pattern = "^t3_[a-zA-Z0-9]+$"];
}

// return nothing
message AddCrosspostResponse {}
