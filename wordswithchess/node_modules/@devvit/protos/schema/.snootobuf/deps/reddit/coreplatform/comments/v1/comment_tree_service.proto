syntax = "proto3";

package reddit.coreplatform.comments.v1;

import "reddit/coreplatform/comments/v1/comment_tree.proto";
import "reddit/coreplatform/comments/v1/comment_tree_structure.proto";
import "reddit/coreplatform/comments/v1/comments.proto";
import "reddit/coreplatform/common/v1/auth.proto";
import "validate/validate.proto";

option go_package = "github.snooguts.net/reddit/thing-api/go/grpc/comments/v1;comments";
option java_multiple_files = true;
option java_outer_classname = "CommentTreeServiceProto";
option java_package = "com.reddit.coreplatform.api.comments.v1";

//  RPC Service for working with Comment Trees
service CommentTreeService {
  // Load a segment of a comment tree represented as a list of nodes. This rpc does not return a traditional tree or graph
  // structure. The nodes on the result can be used as arguments to further iterate the entirety of the tree.
  rpc GetCommentTree(GetCommentTreeRequest) returns (GetCommentTreeResponse) {
    option idempotency_level = NO_SIDE_EFFECTS;
  }

  // GetBatchCommentTree returns a map of CommentTree by LinkID for a given list of Link IDs.
  //
  // Given its batch nature, this endpoint sets some restrictions to reduce the amount of processing needed
  // to generate the response.
  // Unlike the single version GetCommentTree, GetBatchCommentTree does not hydrate the comments (return ids) and only allows
  // requesting PrecomputedTreeView sizes and cached sorts (BEST/TOP).
  // This ensures we always retrieve the cached comment trees in order to keep the endpoint's latency as low as
  // possible.
  rpc GetBatchCommentTree(GetBatchCommentTreeRequest) returns (GetBatchCommentTreeResponse) {
    option idempotency_level = NO_SIDE_EFFECTS;
  }

  // GetCommentTreeStructure returns the comment tree structures (parent-child relations) from a post.
  rpc GetCommentTreeStructure(GetCommentTreeStructureRequest) returns (GetCommentTreeStructureResponse) {
    option idempotency_level = NO_SIDE_EFFECTS;
  }
}

// The request message for loading a single comment tree segment from a post (link_id).
message GetCommentTreeRequest {
  // The t3 Link Thing id for the link the CommentTree belongs to.
  // This is required in all cases of fetching a CommentTree.
  // Passing only link_id and no source.comment_id or source.cursor, will fetch a CommentTree for a post e.g. https://reddit.com/r/aww/comments/12nmp5o/
  string link_id = 1 [(validate.rules).string = {pattern: "^t3_[a-zA-Z0-9]+$"}];

  // Optional source of the comment tree to fetch if the client was to load a permalink using comment_id or comments from a cursor
  oneof source {
    // Permalink case - the t1 Comment Thing id that will be used as the root of the subset of the comment tree returned.
    // Used to load post pages where a specific comment is the root e.g. https://www.reddit.com/r/aww/comments/12nmp5o/comment/jgfcg4i/
    string comment_id = 2 [(validate.rules).string = {pattern: "^t1_[a-zA-Z0-9]+$"}];

    // Cursor case - a cursor to a subset of a comment tree that will be used as the root of the subset of the comment tree returned.
    // Its primary purpose is to allow clients to perform depth-first and breadth-first traversal
    // of comment trees.
    string cursor = 3;
  }

  // Comment sort to be used to generate the CommentTree
  Comment.Sort sort = 4 [(validate.rules).enum = {
    defined_only: true
    // Only allow supported comment sorts
    in: [
      1, // CONFIDENCE,
      2, // TOP,
      3, // NEW,
      4, // CONTROVERSIAL
      5, // OLD,
      6, // RANDOM,
      7 // QA,
    ]
  }];

  // Whether or not the CommentTree.nodes are fully hydrated Comment Thing models, or just Comment ids.
  bool hydrate_nodes = 5;

  // Important note: you can pass either a PrecomputedTreeView size to receive a cached and *faster* comment tree
  // or pass custom `max_comments` and `max_depth` arguments which may incur latency costs to compute the comment tree at request time.
  // Trees computed in real-time are not cached for later retrieval so this latency cost is paid on each request.
  optional CommentTree.PrecomputedTreeView precomputed_tree_view = 6 [(validate.rules).enum = {
    defined_only: true
    not_in: [0]
  }];

  // Max number of comments to return in the CommentTree (exclusive of LoadMoreComments nodes)
  optional int32 max_comments = 7 [(validate.rules).int32.lte = 1500];

  // Max depth that comments can have in the CommentTree
  optional int32 max_depth = 8 [(validate.rules).int32.lte = 10];

  // Enable returning CommentTrees in a r2-compatible way
  // r2-compatible means:
  // - cursor string format used is list of comment_ids e.g. "abc, def, hij"
  // - Permalink type responses have Node's depth to start at 0, regardless of the true comment's depth
  bool legacy_r2_mode = 9;

  // Optional int32 to load N parent comments before a comment_id.bool
  // Only used for the permalink case and it does not interfere on the GetCommentTreeRequest.max_depth
  optional int32 num_parents = 10 [(validate.rules).int32.lte = 8];

  // Truncate commentTree length by the given value.
  // Design Doc: https://docs.google.com/document/d/1jNRAuKbVGupDaM67pdvYpx55VGAB7LA8NPtymtJJCPs/edit?usp=sharing
  int32 truncate = 11 [(validate.rules).int32 = {
    gte: 0
    lte: 50
  }];

  // Filter comment trees by the given type
  // Design Doc: https://docs.google.com/document/d/1_-m6QECGx9JjPhoqIDq7eIDJbHXfAiIBHIuZgtzIR1o/edit?usp=sharing
  optional CommentTree.Filter filter = 12 [(validate.rules).enum = {
    defined_only: true
    in: [
      1, // ANSWERED
      2 // UNANSWERED
    ]
  }];

  // The authorization policy to use while executing this request. This policy dictates what permission set
  // the caller assumes while reading comment tree data.
  reddit.coreplatform.common.v1.AuthzPolicy authz_policy = 2000;
}

// The response message for loading a comment tree
message GetCommentTreeResponse {
  // The comment tree computed for the requested parameters. Comment tree segments can be further iterated by
  // re-invoking this RPC with a source identifier from one of resulting trees nodes.
  CommentTree comment_tree = 1;
  // Populated by a call to the UserBlockingService. This will contain the
  // list of comment ids where a user has blocked the comment author.
  // Comments where the author has blocked the viewer are filtered out (mock deleted).
  repeated string comment_ids_with_blocked_author = 2;
}

// The request message for batch loading non-hydrated comment trees by link id
message GetBatchCommentTreeRequest {
  // A list of link ids to fetch individual comment trees for. Must be a valid `t3_{}` link id
  repeated string link_ids = 1 [(validate.rules).repeated = {
    min_items: 1
    max_items: 100
    items: {
      string: {pattern: "^t3_[a-zA-Z0-9]+$"}
    }
  }];

  // The sort strategy of the entries in each of the comment trees returned.
  Comment.Sort sort = 2 [(validate.rules).enum = {
    defined_only: true
    // Only allow cached sorts for this batch call.
    in: [
      1, // CONFIDENCE,
      2 // TOP,
    ]
  }];

  // The limit of tree size and depth. These are precomputed well known limits of max comments + max tree depth.
  optional CommentTree.PrecomputedTreeView precomputed_tree_view = 3 [(validate.rules).enum = {
    defined_only: true
    not_in: [0]
  }];
}

// The batch response message for non-hydrated comment trees
message GetBatchCommentTreeResponse {
  // A map of the requested links and their associated non-hydrated comment tree.
  map<string, CommentTree> comment_trees_by_link_id = 1;
}

// The request message for loading a comment tree structure from a post (link_id).
message GetCommentTreeStructureRequest {
  // The t3 Link Thing id for the link the comment tree structure belongs to.
  string link_id = 1 [(validate.rules).string = {pattern: "^t3_[a-zA-Z0-9]+$"}];

  // Optional cursor for pagination. When absent returns the fist page.
  optional string cursor = 2;

  // Optional maximum limit for number of parent comments in the response (defaults to and capped at 2000).
  optional int32 limit = 3 [(validate.rules).int32.lte = 2000];
}

// The response message for loading a comment tree structure from a post (link_id).
message GetCommentTreeStructureResponse {
  // The comment tree structure which represents the parent-child relations of the comments.
  CommentTreeStructure comment_tree_structure = 1;

  // Cursor for the next page (empty if exhausted).
  optional string cursor = 2;
}
