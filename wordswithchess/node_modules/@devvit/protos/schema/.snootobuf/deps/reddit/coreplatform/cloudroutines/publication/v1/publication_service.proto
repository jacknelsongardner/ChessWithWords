syntax = "proto3";

package reddit.coreplatform.cloudroutines.publication.v1;

import "reddit/coreplatform/events/cloudevent/v1/cloudevent.proto";
import "validate/validate.proto";

option go_package = "github.snooguts.net/reddit/cloudroutines/go/publicationpb/v1;publicationpb";

service PublicationService {
  // PublishEvent makes an RPC call to the Cloudroutines server to publish the given event at the given topic
  rpc PublishEvent(PublishEventRequest) returns (PublishEventResponse) {
    option idempotency_level = IDEMPOTENT;
  }
}

// Request message containing the event to be published by the user's registered callback
// Server performs checks to ensure the request parameters are valid:
// event type and topic are compatible, key is provided if topic is ordered
message PublishEventRequest {
  // CloudEvent compliant event payload
  reddit.coreplatform.events.cloudevent.v1.CloudEvent event = 1 [(validate.rules).message.required = true];

  // Topic to publish the given event to. Typically, this is the fully qualified message name of the event.
  string topic = 2 [(validate.rules).string = {
    pattern: "^[-_.a-zA-Z0-9]+$"
    min_len: 1
    max_len: 255
  }];

  // Value to use as the partition key (used for ordering) when publishing the given event.
  // Must be set to guarantee ordering within a partition, if no ordering is necessary, then pass the event ID.
  string partition_key = 3 [(validate.rules).string = {
    pattern: "^[-_.a-zA-Z0-9]+$"
    min_len: 1
    max_len: 255
  }];
}

// Response message containing the published event details
message PublishEventResponse {
  // Event detail information
  EventDetails event_details = 1;
}

// Message containing the published event details
message EventDetails {
  // The event ID, a unique identifier of the event published
  string event_id = 1;

  // The topic the event was published to
  string topic = 2;

  // The partition key the event was published to
  string partition_key = 3;
}
