syntax = "proto3";

package reddit.xpaymentsplatform.paypayments.v1;

import "google/protobuf/timestamp.proto";

option go_package = "github.snooguts.net/reddit/reddit-service-pay-payments/payments-api/api/xpaymentsplatform/paypaymentspb/v1;paypaymentspb";

message PutGoldPurchaseRequest {
  // Idempotency key, unique identifier of the transaction (eg. order_id)
  string transaction_id = 1;
  // t2_ user ID of buyer
  string user_id = 2;
  // Fiat payment amount, in 1/100 units
  int64 local_currency_amount = 3;
  string local_currency = 4;
  // GOLD product listing USD price, in cents.
  // Required to calculate GOLD unit price in USD at the time of purchase, for accounting
  int64 listing_price_usd = 5;
  PaymentProvider payment_provider = 6;
  // Payment provider order ID
  string external_order_id = 7;
  // Amount of GOLD purchased
  int64 gold_amount = 8;
  Environment environment = 9;
}

message PutGoldPurchaseResponse {
  // Updated spendable balance
  int64 spendable_gold = 1;
}

message PutGoldSpendingRequest {
  // Idempotency key, unique identifier of the transaction (eg. order_id)
  string transaction_id = 1;
  // t2_ user ID of spender
  string user_id = 2;
  // t2_ user ID of GOLD receiver
  string receiver_id = 3;
  // Amount of GOLD awarded
  int64 gold_amount = 4;
  Environment environment = 5;
}

message PutGoldSpendingResponse {
  // Updated spendable balance of spender
  int64 spender_spendable_gold = 1;
  // Updated earned balance of receiver
  int64 receiver_earned_gold = 2;
}

message PutPayoutRequest {
  // Idempotency key, unique identifier of payout operation
  string transaction_id = 1;
  // t2_ user ID
  string user_id = 2;

  // Payout parameters
  int64 base_payout_amount_usd = 3;
  int64 gold_balance_delta = 4;
  int64 karma = 5;
  int64 payout_percent = 6;
  int64 fee = 7;
  int64 final_payout_amount_usd = 8;
  optional string local_payout_currency = 9;
  optional int64 local_payout_amount = 10;
  google.protobuf.Timestamp cutoff_time = 11;
  repeated string payout_transactions = 12;

  string stripe_bank_id = 14;
  string stripe_account_id = 15;
  string stripe_transfer_id = 16;
  string stripe_payout_id = 17;
  string stripe_error_reason = 18;

  Environment environment = 13;

  PayoutContext payout_context = 50;
  // For cases where the fiat payout goes to a separate account from
  // the gold payout, e.g. for Dev Platform
  // - Gold payout -> app account
  // - Fiat payout -> developer account
  string with_separate_fiat_user_id = 51;
}

message PutPayoutResponse {
  // Updated earned balance
  int64 earned_gold = 1;
}

message PutPayoutFiatRequest {
  // Idempotency key, unique identifier of payout operation
  string transaction_id = 1;
  // t2_ user ID
  string user_id = 2;

  // Payout parameters
  string local_payout_currency = 3;
  int64 local_payout_amount = 4;

  Environment environment = 5;

  // Stripe metadata
  string stripe_bank_id = 6;
  string stripe_account_id = 7;
  string stripe_transfer_id = 8;
  string stripe_payout_id = 9;
  string stripe_error_reason = 10;

  PayoutContext payout_context = 30;
}

message PutPayoutFiatResponse {}

message RevertTransactionRequest {
  // Idempotency key, unique identifier of refund operation
  string transaction_id = 1;
  // ID of original transaction which should be refunded
  string original_transaction_id = 2;
  // t2_ user ID of original transaction creator (for ownership verification)
  string user_id = 3;
  string reason = 4;
  Environment environment = 5;
  bool cover_payouts = 6;
}

message RevertTransactionResponse {
  // Transaction IDs of reverted spendings which were not covered
  // with the remaining user's balance, so the corresponding goods
  // should be reverted, including the original_transaction_id if
  // it was a spending
  repeated string reverted_transaction_ids = 1;
}

message GetGoldBalanceRequest {
  // t2_ user ID
  string user_id = 1;
  Environment environment = 2;
}

message GetGoldBalanceResponse {
  int64 earned_gold = 1;
  int64 earned_gold_devvit = 10;
  int64 spendable_gold = 2;
}

message MigrateEarnedGoldBalanceRequest {
  repeated MigrationRequest migration_requests = 1;
}

message MigrationRequest {
  // Idempotency key, unique identifier of the transaction
  string transaction_id = 1;
  // t2_ user ID of the balance owner
  string user_id = 2;
  // Amount of earned GOLD to migrate
  // = total amount of scaled (aka new) Gold
  int64 earned_gold_amount = 3;
  // USD cost of the migrated GOLD, in cents
  // = total USD cost of all purchases accumulated in gold_amount
  int64 usd_cost = 4;
  // Timestamp to store this historical balance at
  // Might be a fixed point in the past or a timestamp of the last
  // awarding transaction in the aggregate
  google.protobuf.Timestamp timestamp = 5;
  Environment environment = 6;
}

message MigrateEarnedGoldBalanceResponse {
  // Updated earned balance
  map<string, int64> earned_gold = 1;
}

enum PayoutContext {
  PAYOUT_CONTEXT_UNSPECIFIED = 0;
  AWARDS = 1;
  DEVVIT = 2;
}

message PayoutCandidatesRequest {
  int64 balance_cutoff = 1;
  google.protobuf.Timestamp time_cutoff = 2;
  Environment environment = 3;
  PayoutContext payout_context = 4;
}

message PayoutCandidatesResponse {
  repeated string user_ids = 1;
  map<string, int64> remaining_balances_by_user_ids = 2;
}

message NonPaidOutTransactionIdsRequest {
  repeated string user_ids = 1;
  google.protobuf.Timestamp time_cutoff = 2;
  Environment environment = 3;
}

message UserTransactions {
  string user_id = 1;
  repeated string transaction_ids = 2;
  int64 sum_gold = 3;
}

message NonPaidOutTransactionIdsResponse {
  repeated UserTransactions transaction_ids_by_user_id = 1;
}

enum PaymentProvider {
  PAYMENT_PROVIDER_UNSPECIFIED = 0;
  STRIPE = 1;
  PAYPAL = 2;
  GOOGLE_INAPP = 3;
  APPLE_INAPP = 4;
  REDDIT_GOLD = 5;
}

enum Environment {
  ENVIRONMENT_UNSPECIFIED = 0;
  PRODUCTION = 1;
  SANDBOX = 2;
}

service LedgerService {
  // PutGoldPurchase stores GOLD pack purchase in Ledger
  rpc PutGoldPurchase(PutGoldPurchaseRequest) returns (PutGoldPurchaseResponse) {}

  // PutGoldSpending stores GOLD spending in Ledger
  rpc PutGoldSpending(PutGoldSpendingRequest) returns (PutGoldSpendingResponse) {}

  // PutPayout stores Earned GOLD payout in Ledger
  rpc PutPayout(PutPayoutRequest) returns (PutPayoutResponse) {}

  // PutPayoutFiat stores fiat payout in Ledger
  rpc PutPayoutFiat(PutPayoutFiatRequest) returns (PutPayoutFiatResponse) {}

  // RevertTransaction stores purchase or spending refund in Ledger rolling
  // back all the consequentive spendings.
  // Tries to use user's remaining balance to cover rolled back spendings.
  // Transaction IDs for uncovered spendings are returned to roll back the
  // corresponding goods, except if were already paid out
  rpc RevertTransaction(RevertTransactionRequest) returns (RevertTransactionResponse) {}

  // GetGoldBalance returns user's spendable and earned Gold balances
  rpc GetGoldBalance(GetGoldBalanceRequest) returns (GetGoldBalanceResponse) {}

  // MigrateEarnedGoldBalance migrates historical gold balance
  rpc MigrateEarnedGoldBalance(MigrateEarnedGoldBalanceRequest) returns (MigrateEarnedGoldBalanceResponse) {}

  // PayoutCandidates returns user IDs eligible for payout
  rpc PayoutCandidates(PayoutCandidatesRequest) returns (PayoutCandidatesResponse) {}

  // NonPaidOutTransactionIds returns transaction IDs that have not been paid out by user ID
  rpc NonPaidOutTransactionIds(NonPaidOutTransactionIdsRequest) returns (NonPaidOutTransactionIdsResponse) {}
}
