syntax = "proto3";

package reddit.xpaymentsplatform.payorders.v1;

import "google/protobuf/timestamp.proto";
import "reddit/xpaymentsplatform/paycommon/v1/order_status_reason.proto";
import "reddit/xpaymentsplatform/payorders/v1/order.proto";
import "reddit/xpaymentsplatform/paypayments/v1/paypayments.proto";
import "reddit/xpaymentsplatform/payproducts/v1/payproducts.proto";

option go_package = "github.snooguts.net/reddit/reddit-service-pay-orders/orders-api/api/xpaymentsplatform/payorderspb/v1;payorderspb";

message GetOrderRequest {
  string order_id = 1;
}

message GetOrderResponse {
  Order order = 1;
}

message GetOrdersRequest {
  repeated string order_ids = 1; // the order ids filter
  string seller_id = 2; // t2_id of the app account
  string buyer_id = 3; // t2_id of the buyer
  google.protobuf.Timestamp created_at_start = 4; // the start of the time range
  google.protobuf.Timestamp created_at_end = 5; // the end of the time range
  OrderStatus status = 6; // the status filter of the order
  map<string, string> checkout_metadata = 7; // the metadata filter of the order
  reddit.xpaymentsplatform.payproducts.v1.Environment env = 8; // the environment filter of the order
  PageInfo page_info = 20;
}

message GetOrdersResponse {
  repeated Order orders = 1;
  PageInfo next_page = 2;
}

// Required to support pagination of GetOrders.
message PageInfo {
  string start_cursor = 1; // if empty, start from the most recent transaction
  int32 page_size = 2;
  bool has_next_page = 3;
}

message CreateOrderRequest {
  // Optional ID for a new order if client wants to use its own,
  // otherwise new UUID will be generated and lower-case string representation will
  // be used as an order ID.
  // If order with provided ID already exists, check if:
  // - buyerID is present, and it matches the one in the order
  // - products are present, and they match the ones in the order
  // return the stored order if all checks are positive. == Implementation of Order Idempotency
  string order_id = 1;

  string buyer_id = 2; // t2_Id

  // It can only be [NEW, PAID]
  // [NEW]: a new order is being created. It will require a payment
  // [PAID]: a new order is being created. It will not require a payment
  OrderStatus status = 3;

  repeated CartItem cart_items = 4;

  reddit.xpaymentsplatform.payproducts.v1.Environment env = 5;
  // [P3] The order will expire at the given time
  // required google.protobuf.Timestamp expiresAt = 4;

  // User-scoped (buyer_id) idempotency key to provide instead of order_id if
  // client wants to get server-generated order ID.
  string reference_id = 6;
}

message MigrateOrdersRequest {
  repeated MigrationOrder orders = 1;
}

message MigrationOrder {
  string order_id = 1;
  string buyer_id = 2;
  OrderStatus status = 3;
  repeated CartItem cart_items = 4;
  reddit.xpaymentsplatform.payproducts.v1.Environment env = 5;
  string reference_id = 6;
  google.protobuf.Timestamp created_at = 7;
}

message MigrateOrdersResponse {}

message CreateOrderResponse {
  Order order = 1;
}

message UpdateOrderRequest {
  string order_id = 1;

  // The new status of the order. Check the state machine for allowed transitions
  OrderStatus status = 2;

  // Type of the order determined during the checkout. Can be set only for NEW orders
  OrderType type = 6;

  CheckoutAction checkout_action = 3;
  optional StatusReason old_reason = 4;
  optional reddit.xpaymentsplatform.paycommon.v1.StatusReason reason = 7;
  repeated CartItem cart_items = 5;

  RecurringState recurring_state = 8;
}

message RecurringState {
  google.protobuf.Timestamp starts_at = 1;
  google.protobuf.Timestamp trial_ends_at = 2;
  google.protobuf.Timestamp next_renewal_at = 3;
  google.protobuf.Timestamp grace_ends_at = 4;
  google.protobuf.Timestamp ends_at = 5;
}

message UpdateOrderResponse {
  Order order = 1;
}

message AcknowledgeOrderDeliveryRequest {
  string order_id = 1;
}

message AcknowledgeOrderDeliveryResponse {}

message GetOrdersByUserRequest {
  string user_id = 1;
  optional int32 limit = 2;
  bool is_seller = 3;
}

message GetOrdersByUserResponse {
  repeated Order orders = 1;
}

message TransferOrderRequest {
  string order_id = 1;
  payproducts.v1.Environment environment = 2;
  string from_user_id = 3;
  string to_user_id = 4;
}

message TransferOrderResponse {
  Order order = 1;
}

service PayOrdersService {
  // Same as public APIs
  rpc GetOrder(GetOrderRequest) returns (GetOrderResponse) {}

  rpc GetOrders(GetOrdersRequest) returns (GetOrdersResponse) {}

  rpc CreateOrder(CreateOrderRequest) returns (CreateOrderResponse) {}

  rpc MigrateOrders(MigrateOrdersRequest) returns (MigrateOrdersResponse) {}

  // The update will be executed only if the update complies with the state machine
  rpc UpdateOrder(UpdateOrderRequest) returns (UpdateOrderResponse) {}

  rpc AcknowledgeOrderDelivery(AcknowledgeOrderDeliveryRequest) returns (AcknowledgeOrderDeliveryResponse) {}

  // should only be used by admin panel
  rpc GetOrdersByUser(GetOrdersByUserRequest) returns (GetOrdersByUserResponse) {}
  // TransferOrder transfers an order between users.
  rpc TransferOrder(TransferOrderRequest) returns (TransferOrderResponse) {}
}
