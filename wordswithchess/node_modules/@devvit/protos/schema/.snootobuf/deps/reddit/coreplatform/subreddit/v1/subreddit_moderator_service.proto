syntax = "proto3";

package reddit.coreplatform.subreddit.v1;

import "reddit/coreplatform/subreddit/v1/subreddit.proto";
import "validate/validate.proto";

option go_package = "github.snooguts.net/reddit/thing-api/go/grpc/subreddit/v1;subreddit";
option java_multiple_files = true;
option java_outer_classname = "SubredditModeratorServiceProto";
option java_package = "com.reddit.coreplatform.api.subreddit.v1";

// RPC Service for working with Subreddit moderators
service SubredditModeratorService {
  // Retrieve moderated subreddits for a given account
  rpc GetModeratedSubreddits(GetModeratedSubredditsRequest) returns (GetModeratedSubredditsResponse) {
    option idempotency_level = NO_SIDE_EFFECTS;
  }

  // Retrieve moderators for a given subreddit
  rpc GetModeratorsBySubreddit(GetModeratorsBySubredditRequest) returns (GetModeratorsBySubredditResponse) {
    option idempotency_level = NO_SIDE_EFFECTS;
  }

  // Retrieve visible moderators for a given subreddit that filters out any mods on the list of invisible mods
  // https://github.snooguts.net/reddit/reddit-private/blob/ee159f8e2a9d9235c48001c9dcd8fc32b0628339/production.ini#L1778-L1792
  rpc GetVisibleModeratorsBySubreddit(GetVisibleModeratorsBySubredditRequest) returns (GetVisibleModeratorsBySubredditResponse) {
    option idempotency_level = IDEMPOTENT;
  }

  // Apply a new order of moderators for a given subreddit
  rpc ReorderModerators(ReorderModeratorsRequest) returns (ReorderModeratorsResponse) {
    option idempotency_level = IDEMPOTENT;
  }

  // CreateModerator adds a new user as subreddit moderator.
  // The moderator has all permissions by default; to add specific permissions, use UpdateModeratorPermissions.
  // Returns an AlreadyExists error if the moderator relation already exists.
  //
  // This method is asynchronous, and ordering is guaranteed by subreddit ID. The status of this operation
  // can be checked by calling Cloudroutine's PollOperationStatus with the returned operation ID.
  //
  // Note: this only creates the relation record itself and does not perform any verification.
  rpc CreateModerator(CreateModeratorRequest) returns (CreateModeratorResponse) {
    option idempotency_level = IDEMPOTENT;
  }

  // DeleteModerator removes a user as subreddit moderator.
  // Returns a NotFound error if the moderator relation does not exist.
  //
  // This method is asynchronous, and ordering is guaranteed by subreddit ID. The status of this operation
  // can be checked by calling Cloudroutine's PollOperationStatus with the returned operation ID.
  //
  // Note: this only removes the relation record itself and does not perform any verification.
  rpc DeleteModerator(DeleteModeratorRequest) returns (DeleteModeratorResponse) {
    option idempotency_level = IDEMPOTENT;
  }

  // UpdateModeratorPermissions restricts a given moderator to the specified moderator permissions.
  // Returns a NotFound error if the moderator relation does not exist.
  //
  // This method is asynchronous, and ordering is guaranteed by subreddit ID. The status of this operation
  // can be checked by calling Cloudroutine's PollOperationStatus with the returned operation ID.
  //
  // Note: this only updates the permissions record itself and does not perform any verification.
  rpc UpdateModeratorPermissions(UpdateModeratorPermissionsRequest) returns (UpdateModeratorPermissionsResponse) {
    option idempotency_level = IDEMPOTENT;
  }

  // CreateModeratorInvite adds a new user as being invited to be a subreddit moderator.
  // If the invite is accepted, the invite record is deleted and a moderator relation is created in its place.
  // Returns an AlreadyExists error if the moderator invite relation already exists.
  //
  // This method is asynchronous and ordering is guaranteed by subreddit ID. The status of this operation
  // can be checked by calling Cloudroutine's PollOperationStatus with the returned operation ID.
  //
  // Note: this only creates the relation record itself and does not perform any verification or sending out of invites.
  rpc CreateModeratorInvite(CreateModeratorInviteRequest) returns (CreateModeratorInviteResponse) {
    option idempotency_level = IDEMPOTENT;
  }

  // DeleteModeratorInvite removes a user from being invited to be a subreddit moderator.
  // Returns a NotFound error if no moderator invite relation exists.
  //
  // This method is asynchronous, and ordering is guaranteed by subreddit ID. The status of this operation
  // can be checked by calling Cloudroutine's PollOperationStatus with the returned operator ID.
  //
  // Note: this only creates the relation record itself and does not perform any verification.
  rpc DeleteModeratorInvite(DeleteModeratorInviteRequest) returns (DeleteModeratorInviteResponse) {
    option idempotency_level = IDEMPOTENT;
  }
}

// Request to get moderated subreddits for a given account
// The request must be made with a service account edge context or a user edge context matching the provided account.
message GetModeratedSubredditsRequest {
  // Account identifier to request list of moderators for. Not necessary when requesting as a service.
  // Specified account id should be a valid thing identifier with t2 prefix.
  string account_id = 1 [(validate.rules).string = {pattern: "^t2_[a-zA-Z0-9]+$"}];

  // Optional flag to hydrate the response subreddits with permissions.
  bool include_permissions = 2;

  // Cursor for the start index of the result set. When empty, the results start from the first page.
  // The sort order is descending, so the first page will be the most recently added moderated subreddits.
  // This API may be updated to allow that sort order to be specified, but the default will remain as descending.
  string cursor = 3 [(validate.rules).string = {
    ignore_empty: true
    min_len: 1
  }];

  // Maximum page size limit (defaults to and capped at 1000).
  int32 limit = 4 [(validate.rules).int32 = {
    ignore_empty: true
    gte: 1
    lte: 1000
  }];
}

// Response of moderated subreddits for a given account
// If the provided account is not a moderator of any subreddits, including if it is not a valid account,
// an empty map will be returned in the response.
message GetModeratedSubredditsResponse {
  // A map of moderated subreddits to permissions for the given account. Permissions will not be hydrated unless requested.
  map<string, ModeratorPermissions> subreddit_id_to_permissions = 1;

  // The cursor for the next page of results. If empty, then the end of the result set has been reached.
  // Cursor format is subject to change.
  string cursor = 2;
}

// Request to get moderators for a given subreddit
// If the request is made on behalf of a user, only subreddits viewable by the user will be returned in the response.
message GetModeratorsBySubredditRequest {
  // Account identifier to request list of moderators from. Not necessary when requesting as a service.
  // Specified account id should be a valid thing identifier with t2 prefix.
  string account_id = 1 [(validate.rules).string = {pattern: "^t2_[a-zA-Z0-9]+$"}];

  // Subreddit identifier to request list of moderators from.
  // Specified subreddit id should be a valid thing identifier with t5 prefix.
  string subreddit_id = 2 [(validate.rules).string = {pattern: "^t5_[a-zA-Z0-9]+$"}];

  // Optional flag to hydrate the response moderators with permissions.
  bool include_permissions = 3;

  // Cursor for the start index of the result set. When empty, the results start from the first page.
  // The sort order is descending, so the first page will be the most recently added moderators.
  // This API may be updated to allow that sort order to be specified, but the default will remain as descending.
  string cursor = 4 [(validate.rules).string = {
    ignore_empty: true
    min_len: 1
  }];

  // Maximum page size limit (defaults to and capped at 1000).
  int32 limit = 5 [(validate.rules).int32 = {
    ignore_empty: true
    gte: 1
    lte: 1000
  }];
}

// Response of moderators for a given subreddit
// If the provided subreddit has no moderators, including if it is not a valid subreddit,
// an empty array and map will be returned in the response.
message GetModeratorsBySubredditResponse {
  // A list of moderators for the given subreddit.
  repeated Moderator moderators = 1;

  // A map of moderator id to permissions for the given subreddit. Every moderator in the original list
  // will have an entry in this map. Permissions will not be hydrated unless requested.
  map<string, ModeratorPermissions> moderator_id_to_permissions = 2;

  // The cursor for the next page of results. If empty, then the end of the result set has been reached.
  // Cursor format is subject to change.
  string cursor = 3;
}

// Request to get moderators for a given subreddit that filters out any mods on the list of invisible mods
// https://github.snooguts.net/reddit/reddit-private/blob/ee159f8e2a9d9235c48001c9dcd8fc32b0628339/production.ini#L1778-L1792
//
// If the request is made on behalf of a user, only subreddits viewable by the user will be returned in the response.
message GetVisibleModeratorsBySubredditRequest {
  // Account identifier to request list of moderators from. Not necessary when requesting as a service.
  // Specified account id should be a valid thing identifier with t2 prefix.
  string account_id = 1 [(validate.rules).string = {
    pattern: "^t2_[a-zA-Z0-9]+$"
    ignore_empty: true
  }];

  // Subreddit identifier to request list of moderators from.
  // Specified subreddit id should be a valid thing identifier with t5 prefix.
  string subreddit_id = 2 [(validate.rules).string = {pattern: "^t5_[a-zA-Z0-9]+$"}];

  // Cursor for the start index of the result set. When empty, the results start from the first page.
  // The sort order is descending, so the first page will be the most recently added moderators.
  // This API may be updated to allow that sort order to be specified, but the default will remain as descending.
  string cursor = 3 [(validate.rules).string = {
    ignore_empty: true
    min_len: 1
  }];

  // Maximum page size limit (defaults to and capped at 1000).
  int32 limit = 4 [(validate.rules).int32 = {
    ignore_empty: true
    gte: 1
    lte: 1000
  }];
}

// Response of moderators for a given subreddit that filters out any mods on the list invisible mods
// https://github.snooguts.net/reddit/reddit-private/blob/ee159f8e2a9d9235c48001c9dcd8fc32b0628339/production.ini#L1778-L1792
//
// If the provided subreddit has no moderators, including if it is not a valid subreddit,
// an empty array will be returned in the response.
message GetVisibleModeratorsBySubredditResponse {
  // A list of moderators for the given subreddit.
  repeated Moderator moderators = 1;

  // The cursor for the next page of results. If empty, then the end of the result set has been reached.
  // Cursor format is subject to change.
  string cursor = 2;
}

// Request to reorder moderators for a given subreddit with a limit of 100 moderators to reorder at a time.
// The requester must have sufficient permissions (be a moderator with ALL permissions of the given subreddit)
// and can only reorder starting from their position or below in the moderator ranking.
message ReorderModeratorsRequest {
  // Account identifier of the moderator reordering the list of moderators.
  // Specified account id should be a valid thing identifier with t2 prefix.
  string account_id = 1 [(validate.rules).string = {pattern: "^t2_[a-zA-Z0-9]+$"}];

  // Subreddit identifier of subreddit to reorder moderators for.
  // Specified subreddit id should be a valid thing identifier with t5 prefix.
  string subreddit_id = 2 [(validate.rules).string = {pattern: "^t5_[a-zA-Z0-9]+$"}];

  // Existing moderator ranking on the given subreddit and will be validated against.
  // This must be the full ranking of moderators.
  // All moderators in the provided list must appear exactly in sequence in the existing moderator list.
  repeated Moderator existing_mod_ranking = 3 [(validate.rules).repeated = {
    min_items: 2
    max_items: 100
  }];

  // New moderator ranking to apply for the given subreddit. This must be a permutation of the
  // existing full ranking of moderators on the request and at the time the request is processed.
  // The order of moderators is important as it determines which mods are able act on mods below them in the hierarchy.
  repeated Moderator new_mod_ranking = 4 [(validate.rules).repeated = {
    min_items: 2
    max_items: 100
  }];
}

// Response of reordering moderators for a given subreddit. An empty response with no error
// will be returned on a successful reorder.
message ReorderModeratorsResponse {}

// Request payload for creating a subreddit moderator
message CreateModeratorRequest {
  // The account id of the user we want to add as moderator.
  // The id should be a valid thing identifier with t2 prefix.
  string account_id = 1 [(validate.rules).string = {
    pattern: "^t2_[a-zA-Z0-9]+$"
    ignore_empty: true
  }];

  // Subreddit identifier requested user will be a moderator of.
  // Specified subreddit id should be a valid thing identifier with t5 prefix.
  string subreddit_id = 2 [(validate.rules).string = {pattern: "^t5_[a-zA-Z0-9]+$"}];
}

// The response message for creating a subreddit moderator
message CreateModeratorResponse {
  // The operation URI, a unique identifier of the create request that the client can use to track progress.
  // Calling Cloudroutine's PollOperationStatus endpoint with this URI will return the current status.
  string operation_uri = 1;
}

// Request payload for removing a subreddit moderator
message DeleteModeratorRequest {
  // The account id of the user we want to remove as moderator.
  // The id should be a valid thing identifier with t2 prefix.
  string account_id = 1 [(validate.rules).string = {
    pattern: "^t2_[a-zA-Z0-9]+$"
    ignore_empty: true
  }];

  // Subreddit requested user will be removed from.
  // Specified subreddit id should be a valid thing identifier with t5 prefix.
  string subreddit_id = 2 [(validate.rules).string = {pattern: "^t5_[a-zA-Z0-9]+$"}];
}

// The response message for removing a subreddit moderator
message DeleteModeratorResponse {
  // The operation URI, a unique identifier of the create request that the client can use to track progress.
  // Calling Cloudroutine's PollOperationStatus endpoint with this URI will return the current status.
  string operation_uri = 1;
}

// Request payload for updating moderator permissions
message UpdateModeratorPermissionsRequest {
  // The account id of the user we want to update moderator permissions for.
  // The id should be a valid thing identifier with t2 prefix.
  string account_id = 1 [(validate.rules).string = {
    pattern: "^t2_[a-zA-Z0-9]+$"
    ignore_empty: true
  }];

  // Subreddit requested user will have their moderator permissions updated for.
  // Specified subreddit id should be a valid thing identifier with t5 prefix.
  string subreddit_id = 2 [(validate.rules).string = {pattern: "^t5_[a-zA-Z0-9]+$"}];

  // Permissions that the user should be granted for the current subreddit.
  ModeratorPermissions permissions = 3;
}

// The response message for updating moderator permissions
message UpdateModeratorPermissionsResponse {
  // The operation URI, a unique identifier of the create request that the client can use to track progress.
  // Calling Cloudroutine's PollOperationStatus endpoint with this URI will return the current status.
  string operation_uri = 1;
}

// Request payload for creating a subreddit moderator invite
message CreateModeratorInviteRequest {
  // The account id of the user we want to invite as moderator.
  // The id should be a valid thing identifier with t2 prefix.
  string account_id = 1 [(validate.rules).string = {
    pattern: "^t2_[a-zA-Z0-9]+$"
    ignore_empty: true
  }];

  // Subreddit requested user will be invited to be moderator of.
  // Specified subreddit id should be a valid thing identifier with t5 prefix.
  string subreddit_id = 2 [(validate.rules).string = {pattern: "^t5_[a-zA-Z0-9]+$"}];
}

// The response message for creating a subreddit moderator invite
message CreateModeratorInviteResponse {
  // The operation URI, a unique identifier of the create request that the client can use to track progress.
  // Calling Cloudroutine's PollOperationStatus endpoint with this URI will return the current status.
  string operation_uri = 1;
}

// Request payload for removing a subreddit moderator invite
message DeleteModeratorInviteRequest {
  // The account id of the user we want to remove a moderator invite from.
  // The id should be a valid thing identifier with t2 prefix.
  string account_id = 1 [(validate.rules).string = {
    pattern: "^t2_[a-zA-Z0-9]+$"
    ignore_empty: true
  }];

  // Subreddit requested user will have their moderator invite removed from.
  // Specified subreddit id should be a valid thing identifier with t5 prefix.
  string subreddit_id = 2 [(validate.rules).string = {pattern: "^t5_[a-zA-Z0-9]+$"}];
}

// The response message for removing a subreddit moderator invite
message DeleteModeratorInviteResponse {
  // The operation URI, a unique identifier of the create request that the client can use to track progress.
  // Calling Cloudroutine's PollOperationStatus endpoint with this URI will return the current status.
  string operation_uri = 1;
}
