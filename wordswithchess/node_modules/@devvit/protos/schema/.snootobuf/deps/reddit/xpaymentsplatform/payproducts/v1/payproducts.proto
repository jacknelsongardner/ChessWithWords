syntax = "proto3";

package reddit.xpaymentsplatform.payproducts.v1;

import "reddit/xpaymentsplatform/payproducts/v1/currencies.proto";

option go_package = "github.snooguts.net/reddit/reddit-service-pay-products/products-api/api/xpaymentsplatform/payproductspb/v1;payproductspb";

enum ProductType {
  PRODUCT_TYPE_UNSPECIFIED = 0;
  REDDIT_GOLD = 1; // deprecated - please use GOLDPACK instead
  AWARD = 2;
  GOLDPACK = 3;
  DEV_PLATFORM = 4;
  PREMIUM_SUBSCRIPTION = 5;
  COMMUNITY_SUBSCRIPTION = 6;
  GOLD_DEPOSIT = 7;
}

enum ProductSubType {
  PRODUCT_SUBTYPE_UNSPECIFIED = 0;
  MOD_AWARD = 1;
  GIFT_SUBSCRIPTION = 2;
}

enum SubscriptionFeature {
  SUBSCRIPTION_FEATURE_UNSPECIFIED = 0;
  PREMIUM = 1;
  COMMUNITY = 2;
}

enum PaymentProvider {
  PAYMENT_PROVIDER_UNSPECIFIED = 0;
  STRIPE = 1;
  PAYPAL = 2;
  GOOGLE_INAPP = 3;
  APPLE_INAPP = 4;
  REDDIT_GOLD_PROVIDER = 5;
}

enum Environment {
  ENVIRONMENT_UNSPECIFIED = 0;
  PRODUCTION = 1;
  SANDBOX = 2;
}

enum AccountingType {
  ACCOUNT_TYPE_UNSPECIFIED = 0;
  INSTANT = 1; // Used immediately as it is purchased.
  DURABLE = 2; // It grants access indefinitely.
  CONSUMABLE = 3; // User can use the good at any time in the future but it is gone once it's used.
  VALID_FOR_1D = 4; // Consumed over a fixed period of time.
  VALID_FOR_7D = 5;
  VALID_FOR_30D = 6;
  VALID_FOR_1Y = 7;
}

enum DurationUnit {
  DURATION_UNIT_UNSPECIFIED = 0;
  DAY = 1;
  MONTH = 2;
  YEAR = 3;
  WEEK = 4;
  MINUTE = 5;
}

message Image {
  string url = 1;
  int32 width = 2;
  int32 height = 3;
}

message Product {
  string id = 1;
  ProductType product_type = 2;
  string name = 3;
  PaymentProvider payment_provider = 4;
  ProductPrice price = 5;
  ProductPrice base_price = 6;
  string external_id = 7;
  map<string, Image> images = 8;
  oneof metadata {
    string generic_metadata = 9;
    RedditGoldMetadata reddit_gold = 10; // deprecated - please use Goldpack instead
    GoldpackMetadata goldpack = 11;
    DevvitMetadata devvit_metadata = 12;
    SubscriptionPlanMetadata subscription_plan = 13;
  }
  Environment environment = 20;
  string description = 21;
  string owner_id = 22;
  AccountingType accounting_type = 23;
  string terms_of_service = 24;
  ProductSubType product_subtype = 25;
}

message ProductPrice {
  int32 amount = 1; // integer price in currency's smallest units, e.g. 199 for $1.99
  Currency currency = 2;
  string display_amount = 3; // exact decimal price without any multipliers, e.g. 1.99 for $1.99
}

message RedditGoldMetadata {
  int32 amount = 1;
}

message GoldpackMetadata {
  int32 gold_amount = 1;
}

message DevvitMetadata {
  map<string, string> metadata = 1;
}

message SubscriptionPlanMetadata {
  Duration billing_period = 1;
  bool renewable = 2;
  Duration trial_period = 3;
  Duration grace_period = 4;
  int32 tier = 5; // product specific but lower numbers mean lower tiers, so 0 -> 1 is upgrade and 1 -> 0 is downgrade
  repeated Subscription subscriptions = 6; // individual subscriptipns provided by the plan
  string scope_id = 7; // unique identifier for the subreddits where the subscription is valid (T5_XXXXX)
}

message Duration {
  uint32 amount = 1;
  DurationUnit unit = 2;
}

message Subscription {
  SubscriptionFeature feature = 1; // Reddit feature the subscription unlocks
  uint32 max_scopes = 2; // for scoped features, limits the number of individual scopes. 0 for global/unbounded
}

message ClientInfo {
  string app_name = 1;
  string app_version = 2;
  string request_ip = 3;
  string country_code = 4;
  string subdivision_code = 5;
  string city_code = 6;
}

message DeleteProductsRequest {
  repeated string product_ids = 1;
  Environment environment = 2; // It must match the environment of the products.
}

message DeleteProductsResponse {
  repeated string product_ids = 1; // These are the product IDs that were successfully deleted.
}

message GetProductsRequest {
  ProductType product_type = 1;
  repeated PaymentProvider payment_providers = 2; // Empty list will return no products
  Currency currency = 3;
  ClientInfo client_info = 4;
  string user_id = 5;
  repeated string product_ids = 6; // Empty list will skip filtering by product IDs
  optional Environment environment = 7;
  optional string owner_id = 8;
  map<string, string> metadata = 9; // Free-form metadata filter
  optional ProductSubType product_subtype = 10;
}

message GetProductsResponse {
  repeated Product products = 1;
}

message GetBatchProductsRequest {
  repeated GetProductsRequest products_requests = 1;
}

message GetBatchProductsResponse {
  repeated GetProductsResponse products = 1;
}

message GetSpecificProductRequest {
  string product_id = 1;
  Currency currency = 2;
  string user_id = 3;
}

message GetSpecificProductResponse {
  Product product = 1;
}

message GetProductsByIdsRequest {
  repeated string product_ids = 1;
}

message GetProductsByIdsResponse {
  map<string, Product> products = 1;
}

message UpsertProductsRequest {
  Environment environment = 1; // It must match the environment of the products.
  repeated Product products = 2;
}

message UpsertProductsResponse {
  repeated Product products = 1; // These are the products that were successfully upserted.
}

// Rename this RPC service and add your RPCs.
service PayProductsService {
  rpc DeleteProducts(DeleteProductsRequest) returns (DeleteProductsResponse) {}

  rpc GetProducts(GetProductsRequest) returns (GetProductsResponse) {}

  // Same as GetProducts but in a batch mode to support calls from e.g. GQL data-loaders
  rpc GetBatchProducts(GetBatchProductsRequest) returns (GetBatchProductsResponse) {}

  rpc GetSpecificProduct(GetSpecificProductRequest) returns (GetSpecificProductResponse) {}

  // Deprecated - Use GetProducts.ProductIds instead
  rpc GetProductsByIds(GetProductsByIdsRequest) returns (GetProductsByIdsResponse) {}

  rpc UpsertProducts(UpsertProductsRequest) returns (UpsertProductsResponse) {}
}
