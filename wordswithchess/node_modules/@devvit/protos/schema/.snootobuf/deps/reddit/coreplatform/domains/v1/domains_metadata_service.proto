syntax = "proto3";

package reddit.coreplatform.domains.v1;

import "validate/validate.proto";

option go_package = "github.snooguts.net/reddit/thing-api/go/grpc/domains/v1;domains";
option java_multiple_files = true;
option java_outer_classname = "DomainsMetadataServiceProto";
option java_package = "com.reddit.coreplatform.api.domains.v1";

// The domains metadata service exposes APIs for fetching metadata related to domains
service DomainsMetadataService {
  // Check if the requested url has been banned at the domain-level and if it's
  // publicly banned (shamed) or privately banned.
  rpc GetDomainBanInfo(GetDomainBanInfoRequest) returns (GetDomainBanInfoResponse) {
    option idempotency_level = NO_SIDE_EFFECTS;
  }
}

// The ban status of the domain
enum BanStatus {
  // Either not banned or just unspecified
  BAN_STATUS_UNSPECIFIED = 0;

  // The domain has not been banned
  BAN_STATUS_NOT_BANNED = 1;

  // The domain has been banned, but that fact shouldn't be exposed to users
  BAN_STATUS_PRIVATELY_BANNED = 2;

  // The domain has been banned and we should let users actively know it's banned
  BAN_STATUS_PUBLICLY_BANNED = 3;
}

// Ban status, message associated to a domain
message DomainBanInfo {
  // Ban status of this URL
  BanStatus ban_status = 1;

  // Ban message to be shown when trying to submit a url from that domain
  string public_ban_message = 2;

  // Internal ban info, for admins only
  InternalDomainBanInfo internal_info = 3;
}

// All status associated with a given domain, for internal use by admins
message InternalDomainBanInfo {
  // Ban status of this domain without overriding based on regex
  BanStatus original_ban_status = 1;

  // Internal note written by the banning admin
  string internal_ban_message = 2;

  // Is the domain also prohibited in markdown links (in self posts, comments, messages)?
  bool banned_in_markdown = 3;

  // Is the domain also prohibited as an email?
  bool banned_in_email = 4;

  // Username of the banning admin
  string banning_admin_username = 5;

  // UTC time zone, string format "YYYY-MM-DD hh:mm"
  string banned_at_timestamp = 6;

  // If present, the ban only applies to URLs matching this regex
  string url_regex = 7;

  // Is the domain also prohibited from being manually approved by moderators?
  bool prohibit_approval = 8;

  // Inspector exemptions regex (matches anywhere)
  string inspector_exemptions_regex = 9;
}

// Request argument for checking the url to see if the domain has been banned
message GetDomainBanInfoRequest {
  // The list of full urls to check for banned status
  repeated string urls = 1 [(validate.rules).repeated = {
    min_items: 1
    max_items: 100
    unique: true
    items: {
      string: {
        min_len: 3
        max_len: 2048
      }
    }
  }];

  // Whether internal info should be included
  bool include_internal_info = 2;
}

// Response payload for if the url is part of a banned domain
message GetDomainBanInfoResponse {
  // A map of url to the ban status of that url's domain.
  map<string, DomainBanInfo> ban_info_by_url = 1;
}
