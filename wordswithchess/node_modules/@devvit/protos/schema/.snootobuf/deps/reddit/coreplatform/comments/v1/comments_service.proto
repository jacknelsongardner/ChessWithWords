syntax = "proto3";

package reddit.coreplatform.comments.v1;

import "validate/validate.proto";

option go_package = "github.snooguts.net/reddit/thing-api/go/grpc/comments/v1;comments";
option java_multiple_files = true;
option java_outer_classname = "CommentsServiceProto";
option java_package = "com.reddit.coreplatform.api.comments.v1";

//  RPC Service for working with core Comments data
service CommentsService {
  // Get all comment ids created by an account. This includes all comments including deleted ones.
  rpc GetCommentIdsByAuthor(GetCommentIdsByAuthorRequest) returns (GetCommentIdsByAuthorResponse) {
    option idempotency_level = NO_SIDE_EFFECTS;
  }
}

// Request to get all comment ids by author.
// This endpoint was added for Reddar to fetch all LinkIds by a given author.
// The sort order for the LinkIs by author is sorted in DESC by default.
// When this endpoint is invoked with direction as DIRECTION_PREV and a cursor, then sort order is ASC.
message GetCommentIdsByAuthorRequest {
  // Direction enum represents whether to move forward or backward while fetching records
  enum Direction {
    // This is default value of direction.
    DIRECTION_UNSPECIFIED = 0;
    // Next fetches records specified by the limit after the current cursor ID.
    // Calling Next at the end of records will return empty.
    DIRECTION_NEXT = 1;
    // Prev fetches records specified by the limit before the current cursor ID.
    // Calling Prev at the start of records will return empty.
    DIRECTION_PREV = 2;
  }
  // Account identifier to request comments for. Specified account id should be a valid thing
  // identifier with t2 prefix.
  string account_id = 1 [(validate.rules).string = {pattern: "^t2_[a-zA-Z0-9]+$"}];

  // Optional cursor for pagination. When absent returns the fist page.
  optional string cursor = 2 [(validate.rules).string = {
    ignore_empty: true
    min_len: 1
  }];

  // Optional maximum page size limit (defaults to and capped at 1000).
  optional int32 limit = 3 [(validate.rules).int32 = {
    ignore_empty: true
    gte: 1
    lte: 1000
  }];

  // Direction to indicate whether to fetch records forwards or backwards from the cursor.
  Direction direction = 4 [(validate.rules).enum = {
    not_in: [0]
  }];
}

// Response with all the comments posted by an author.
message GetCommentIdsByAuthorResponse {
  // Comment ids authored by the user.
  repeated string comment_id = 1 [(validate.rules).repeated = {
    min_items: 1
    max_items: 1000
    items: {
      string: {pattern: "^t1_[a-zA-Z0-9]+$"}
    }
  }];

  // Cursor for the next page (empty if exhausted).
  optional string cursor = 2;
}
