syntax = "proto3";

package reddit.xpaymentsplatform.paygatewaypsps.v1;

import "google/protobuf/timestamp.proto";
import "reddit/xpaymentsplatform/payorders/v1/order.proto";
import "reddit/xpaymentsplatform/payproducts/v1/currencies.proto";

option go_package = "github.snooguts.net/reddit/reddit-service-pay-gateway-psps/gateway-api/api/xpaymentsplatform/paygatewaypspspb/v1;paygatewaypspspb";

message AcknowledgeDeliveryRequest {
  PaymentProvider provider = 1;
  Environment environment = 2;

  string package_name = 3;
  string product_id = 4;
  string purchase_token = 5;
}

message AcknowledgeDeliveryResponse {}

message CreateProfileRequest {
  PaymentProvider provider = 1;
  Environment environment = 2;

  string email = 3;
  string metadata = 4; // JSON to attach to the profile TODO: currently unused
}

message CreateProfileResponse {
  string profile_id = 1;
}

message CreateClientTokenRequest {
  PaymentProvider provider = 1;
  Environment environment = 2;

  string payment_unit_id = 3; // idempotency key
  int64 price = 4;
  string statement_descriptor = 5;
  PaymentProfile profile = 6;
  string metadata = 7; // JSON to attach to the receipt
  reddit.xpaymentsplatform.payproducts.v1.Currency currency = 8;
}

message PaymentProfile {
  string email = 1;
  string provider_id = 2;
}

message CreateClientTokenResponse {
  string payment_id = 1;
  string token = 2;
  PaymentStatus status = 3;
}

message GetPaymentStatusRequest {
  PaymentProvider provider = 1;
  Environment environment = 2;

  string payment_id = 3;
  string package_name = 4;
  string product_id = 5;
  string purchase_token = 6;
}

message GetPaymentStatusResponse {
  PaymentStatus status = 1;
}

message RefundRequest {
  PaymentProvider provider = 1;
  Environment environment = 2;

  string payment_id = 3;
}

message RefundResponse {
  string refund_id = 1;
  RefundStatus status = 2;
}

message GetProductPurchaseRequest {
  PaymentProvider provider = 1;
  // This field is deprecated as Google purchase environment is determined by the purchase type
  // This field will be ignored if set
  Environment environment = 2 [deprecated = true];

  string package_name = 3;
  string product_id = 4;
  string purchase_token = 5;
}

message GetProductPurchaseResponse {
  string order_id = 1; // external order_id
  PaymentStatus purchase_state = 2;
  google.protobuf.Timestamp purchase_time = 3;
  AcknowledgementState acknowledgement_state = 4;
  string purchase_token = 5;
  string product_id = 6;
  string region_code = 7; // ISO 3166-1 alpha-2 billing region code of the user at the time the product was granted
  string obfuscated_external_account_id = 8; // contains the internal order_id
  Environment environment = 9;
}

message GetProductRequest {
  PaymentProvider provider = 1;
  // Google doesn't support environment in the product request and doesn't return on either, so this field is obsolete
  // This field will be ignored if set
  Environment environment = 2 [deprecated = true];

  string package_name = 3;
  string product_id = 4;
}

message GetProductResponse {
  string product_id = 1;
  string price = 2; // Price in 1/million of the currency base unit, represented as a string
  reddit.xpaymentsplatform.payproducts.v1.Currency currency = 3;
}

message GetStripeChargeRequest {
  string charge_id = 1;
  Environment environment = 2;
}

message GetStripeChargeResponse {
  string risk_level = 1;
  int64 risk_score = 2;
  string rule_id = 3;
}

message CreateRecurringPaymentRequest {
  PaymentProvider provider = 1;
  Environment environment = 2;

  string payment_id = 3; // idempotency key
  string external_product_id = 4;
  string product_description = 5;
  PaymentProfile profile = 6;
  string metadata = 7; // JSON
}

message CreateRecurringPaymentResponse {
  string recurring_payment_id = 1;
  string initial_payment_id = 2;
  string client_token = 3;
  PaymentStatus status = 4;
}

message GetRecurringPaymentStatusRequest {
  PaymentProvider provider = 1;
  Environment environment = 2;

  string recurring_payment_id = 3;
  string package_name = 4;
}

message GetRecurringPaymentStatusResponse {
  string recurring_payment_id = 1;
  RecurringPaymentState state = 2;
  AcknowledgementState acknowledgement_state = 3;
  string purchase_token = 4; // Provider-specific data for managing the recurring payment
  string external_product_id = 5;
  string region_code = 6; // ISO 3166-1 alpha-2 billing region code of the user at the time the product was granted
  string order_id = 7;
  Environment environment = 8;
  google.protobuf.Timestamp starts_at = 9;
  google.protobuf.Timestamp trial_ends_at = 10;
  google.protobuf.Timestamp next_renewal_at = 11;
  google.protobuf.Timestamp grace_ends_at = 12;
  google.protobuf.Timestamp ends_at = 13;
  string latest_payment_id = 14;
  string latest_payment_price = 15; // Price in 1/million of the currency base unit, represented as a string
  reddit.xpaymentsplatform.payproducts.v1.Currency latest_payment_currency = 16;
  string metadata = 17; // JSON
}

message FinalizeDevvitOrderRequest {
  reddit.xpaymentsplatform.payorders.v1.Order order = 1;
}

message FinalizeDevvitOrderResponse {
  oneof result {
    // the product has been acknowledged and delivered
    bool acknowledged = 1;
    // the reason for rejecting product delivery
    string rejection_reason = 2;
  }
}

message ExchangeRate {
  string currency_name = 1;
  int64 currency_rate = 2;
}

message GetExchangeRatesRequest {
  string base_currency = 1;
  repeated string target_currencies = 2;
}

message GetExchangeRatesResponse {
  string base_currency = 1;
  repeated ExchangeRate rates = 2;
}

message CancelRecurringPaymentRequest {
  PaymentProvider provider = 1;
  Environment environment = 2;

  string payment_id = 3;
}

message CancelRecurringPaymentResponse {}

message ChangePaymentMethodRequest {
  string user_id = 1;
  string recurring_payment_id = 2;
  PaymentProvider payment_provider = 3;
  Environment environment = 4;
  optional string success_url = 5;
  optional string cancel_url = 6;
}

message ChangePaymentMethodResponse {
  string payment_token = 1;
}

message AcknowledgeRecurringPaymentRequest {
  PaymentProvider provider = 1;
  Environment environment = 2;

  string recurring_payment_id = 3;
  string purchase_token = 4; // Provider-specific data (from GetRecurringPaymentStatusResponse) for managing the recurring payment
}

message AcknowledgeRecurringPaymentResponse {}

enum PaymentProvider {
  PAYMENT_PROVIDER_UNSPECIFIED = 0;
  PAYMENT_PROVIDER_GOOGLE = 1;
  PAYMENT_PROVIDER_STRIPE = 2;
}

enum Environment {
  ENVIRONMENT_UNSPECIFIED = 0;
  ENVIRONMENT_SANDBOX = 1;
  ENVIRONMENT_PRODUCTION = 2;
}

enum PaymentStatus {
  PAYMENT_STATUS_UNSPECIFIED = 0;
  PAYMENT_STATUS_SUCCESS = 1;
  PAYMENT_STATUS_CANCELED = 2;
  PAYMENT_STATUS_PROCESSING = 3;
  PAYMENT_STATUS_REQUIRES_PAYMENT_METHOD = 4;
}

enum RefundStatus {
  REFUND_STATUS_UNSPECIFIED = 0;
  REFUND_STATUS_PENDING = 1;
  REFUND_STATUS_REQUIRES_ACTION = 2;
  REFUND_STATUS_SUCCEEDED = 3;
  REFUND_STATUS_FAILED = 4;
  REFUND_STATUS_CANCELED = 5;
}

enum AcknowledgementState {
  ACKNOWLEDGEMENT_STATE_UNSPECIFIED = 0;
  ACKNOWLEDGEMENT_STATE_ACKNOWLEDGED = 1;
  ACKNOWLEDGEMENT_STATE_UNACKNOWLEDGED = 2;
}

enum RecurringPaymentState {
  RECURRING_PAYMENT_STATE_UNSPECIFIED = 0;
  RECURRING_PAYMENT_STATE_PENDING = 1;
  RECURRING_PAYMENT_STATE_ACTIVE = 2;
  RECURRING_PAYMENT_STATE_CANCELED = 3;
  RECURRING_PAYMENT_STATE_TERMINATED = 4;
  RECURRING_PAYMENT_STATE_FAILED = 5;
}

service PayGatewayPSPsService {
  rpc AcknowledgeDelivery(AcknowledgeDeliveryRequest) returns (AcknowledgeDeliveryResponse) {}
  rpc CreateClientToken(CreateClientTokenRequest) returns (CreateClientTokenResponse) {}
  rpc CreateProfile(CreateProfileRequest) returns (CreateProfileResponse) {}
  rpc CreateRecurringPayment(CreateRecurringPaymentRequest) returns (CreateRecurringPaymentResponse) {}

  // Once the order is in status PAID Devvit will decide the next status "REVERTED" or "DELIVERED"
  rpc FinalizeDevvitOrder(FinalizeDevvitOrderRequest) returns (FinalizeDevvitOrderResponse) {}
  rpc GetPaymentStatus(GetPaymentStatusRequest) returns (GetPaymentStatusResponse) {}
  rpc GetRecurringPaymentStatus(GetRecurringPaymentStatusRequest) returns (GetRecurringPaymentStatusResponse) {}
  rpc GetProduct(GetProductRequest) returns (GetProductResponse) {}
  rpc GetProductPurchase(GetProductPurchaseRequest) returns (GetProductPurchaseResponse) {}
  rpc GetStripeCharge(GetStripeChargeRequest) returns (GetStripeChargeResponse) {}
  rpc Refund(RefundRequest) returns (RefundResponse) {}

  rpc GetExchangeRates(GetExchangeRatesRequest) returns (GetExchangeRatesResponse) {}
  // CancelRecurringPayment cancels a recurring payment.
  rpc CancelRecurringPayment(CancelRecurringPaymentRequest) returns (CancelRecurringPaymentResponse) {}
  // ChangePaymentMethod changes the payment method for a recurring payment.
  rpc ChangePaymentMethod(ChangePaymentMethodRequest) returns (ChangePaymentMethodResponse) {}
  rpc AcknowledgeRecurringPayment(AcknowledgeRecurringPaymentRequest) returns (AcknowledgeRecurringPaymentResponse) {}
}
