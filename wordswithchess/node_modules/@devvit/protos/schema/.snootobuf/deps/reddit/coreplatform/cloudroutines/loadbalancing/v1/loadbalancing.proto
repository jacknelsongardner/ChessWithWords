syntax = "proto3";

package reddit.coreplatform.cloudroutines.loadbalancing.v1;

import "google/protobuf/duration.proto";

option go_package = "github.snooguts.net/reddit/cloudroutines/go/loadbalancingpb/v1;loadbalancingpb";

// Configuration for slow start throttling performed by the server on new worker instances.
message SlowStartConfig {
  // The duration of the slow start window. This is the amount of time spent ramping traffic. At the start of the window
  // traffic is throttled to `min_allow_rate`. At the end of the window, traffic will no longer be throttled.
  // This value defaults to 15s.
  google.protobuf.Duration window = 1;

  // The factor used to increase the traffic allowed as the ramp window progresses. An aggression of `1` results in a
  // linearly increasing allow rate.
  float ramp_aggression = 2;

  // This value determines how much traffic is allowed to proceed when max throttling is applied. Usually at the start of
  // the window.
  float min_allow_rate = 3;
}

// This message is attached to an error status when the request failed due to reaching the concurrency limit.
message ConcurrencyLimitReached {
  // We're not adding any fields for now.
}

// This message is attached to an error status when the request failed due to slow start throttling being applied.
// When this error is encountered, the client should retry the request at some point in the future. The new request
// will either get routed to another address with less throttling or the current address's allow rate has increased.
message SlowStartThrottle {
  // The address that is being throttled.
  string address = 1;

  // How long it has been since the worker server was started and entered the ready state.
  google.protobuf.Duration worker_age = 2;

  // The percentage of requests that are allowed to proceed for this upstream address. This is a float64
  // between 0.0-1.0.
  double allow_rate = 3;
}
