syntax = "proto3";

package reddit.data.engagement.v1;

import "google/api/annotations.proto";
import "google/api/field_behavior.proto";
import "google/api/visibility.proto";
import "google/protobuf/timestamp.proto";
import "openapi/helper.proto";

option go_package = "github.snooguts.net/reddit/devplatform-api/go/grpc/reddit/data/engagement/v1;engagement";

// Window of time to fetch post engagement data for
enum SegmentWindow {
  WINDOW_UNSPECIFIED = 0 [(google.api.value_visibility).restriction = "INTERNAL"];
  // 24 hour window, aggregated hourly
  WINDOW_24H = 1 [(google.api.value_visibility).restriction = "PREVIEW"];
  // 90 day window, aggregated daily
  WINDOW_90D = 2;
  // 365 day window, aggregated daily
  WINDOW_365D = 3 [(google.api.value_visibility).restriction = "PREVIEW"];
}

// Interval of segments
enum SegmentSize {
  SIZE_UNSPECIFIED = 0;
  // Segments aggregated by day
  SIZE_DAY = 1;
  // Segments aggregated by hour
  SIZE_HOUR = 2;
}

// Reddit communities are data-rich forums where people go to discuss specific topics, events,
// brands, products, and services. The Reddit Engagement API gives you access to the data
// on how posts are engaged with by users.
service EngagementService {
  // Fetch engagement data for a list of post ids
  rpc GetBulkEngagementData(GetBulkEngagementDataRequest) returns (GetBulkEngagementDataResponse) {
    option (google.api.method_visibility).restriction = "PREVIEW";
    option (google.api.http) = {
      post: "/engagement/v1"
      body: "*"
    };
  }
}

// The GetBulkEngagementData request object
message GetBulkEngagementDataRequest {
  // Array of strings (List of post ids)
  repeated string post_ids = 1 [
    (google.api.field_behavior) = REQUIRED,
    (openapi.field_example) = "[\"t3_1ixevp3\", \"t3_1itlrtk\"]"
  ];

  // The window of time to deliver post engagement data for
  SegmentWindow window = 2 [
    (google.api.field_behavior) = REQUIRED,
    // TODO: Add 24h and 365D when they're ready
    (openapi.field_example) = "\"WINDOW_90D\""
  ];
}

message GetBulkEngagementDataResponse {
  // A list of engagement data for each post in the order of the requested post ids
  repeated BulkEngagementData data = 1;
}

message BulkEngagementData {
  // The post id
  string post_id = 1 [(openapi.field_example) = "\"t3_1ixevp3\""];
  // A list of data, aggregated based off of the requested window
  repeated EngagementSegment segments = 2;
  // Optional error message if a post's engagament data cannot be fetched
  optional EngagementError error = 3;
  // The window of time the engagement data is for
  SegmentWindow window = 4 [(openapi.field_example) = "\"WINDOW_90D\""];
  // The size of the segments
  SegmentSize segment_size = 5 [(openapi.field_example) = "\"SIZE_DAY\""];
}

// An aggregated segment of post engagement data
message EngagementSegment {
  // Start time of the engagement segment (ISO 8601 formatted)
  google.protobuf.Timestamp start = 1;
  // Data accumulated in this segment
  SegmentData segment = 9;
  // Data accumulated up to this point in time
  TotalData total = 10;

  // Deprecated fields, moved to SegmentData and TotalData
  reserved 2 to 8;
  reserved 'segment_size', 'views', 'clicks', 'saves', 'comments', 'score', 'upvote_ratio';
}

message SegmentData {
  // The number of times the post was clicked
  uint64 clicks = 1;
  // The number of times the post was saved
  uint64 saves = 2;
  // Number of times the post was viewed
  uint64 views = 3;
}

message TotalData {
  // The number of comments on the post
  uint64 comments = 1;
  // The displayed score of a post (upvotes - downvotes)
  uint64 score = 2;
  // The ratio of upvotes to downvotes. 1.0 means all upvotes
  float upvote_ratio = 3;
}

// Error message if a post's engagement data cannot be fetched
message EngagementError {
  string code = 1;
  string message = 2;
}
