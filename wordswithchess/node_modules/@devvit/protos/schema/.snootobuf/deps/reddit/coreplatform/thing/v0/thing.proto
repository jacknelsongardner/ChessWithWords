syntax = "proto3";

// buf:lint:ignore PACKAGE_VERSION_SUFFIX
package reddit.coreplatform.thing.v0;

import "google/protobuf/empty.proto";
import "reddit/coreplatform/grpc_thrift/v1/grpc_thrift_options.proto";

option go_package = "github.snooguts.net/reddit/thing-api/go/grpc/thing/v0";

service ThingGrpcThriftService {
  rpc AddCommentVisit(google.protobuf.Empty) returns (google.protobuf.Empty) {
    option (reddit.coreplatform.grpc_thrift.v1.thrift_aliases) = {
      request: {
        py: "core_platform_thing.ThingService;add_comment_visit_args"
        go: "github.snooguts.net/reddit/thing-api/go/thrift/core_platform/thing;ThingServiceAddCommentVisitArgs"
      }
      response: {
        py: "core_platform_thing.ttypes;AddCommentVisitResponse"
        go: "github.snooguts.net/reddit/thing-api/go/thrift/core_platform/thing;AddCommentVisitResponse"
      }
    };
  }

  rpc CreateComment(google.protobuf.Empty) returns (google.protobuf.Empty) {
    option (reddit.coreplatform.grpc_thrift.v1.thrift_aliases) = {
      request: {
        py: "core_platform_thing.ThingService;create_comment_args"
        go: "github.snooguts.net/reddit/thing-api/go/thrift/core_platform/thing;ThingServiceCreateCommentArgs"
      }
      response: {
        py: "core_platform_thing.ttypes;CreateCommentResponse"
        go: "github.snooguts.net/reddit/thing-api/go/thrift/core_platform/thing;CreateCommentResponse"
      }
    };
  }

  rpc CreateIdentity(google.protobuf.Empty) returns (google.protobuf.Empty) {
    option (reddit.coreplatform.grpc_thrift.v1.thrift_aliases) = {
      request: {
        py: "core_platform_thing.ThingService;create_identity_args"
        go: "github.snooguts.net/reddit/thing-api/go/thrift/core_platform/thing;ThingServiceCreateIdentityArgs"
      }
      response: {
        py: "core_platform_thing.ttypes;CreateIdentityResponse"
        go: "github.snooguts.net/reddit/thing-api/go/thrift/core_platform/thing;CreateIdentityResponse"
      }
    };
  }

  rpc CreateLink(google.protobuf.Empty) returns (google.protobuf.Empty) {
    option (reddit.coreplatform.grpc_thrift.v1.thrift_aliases) = {
      request: {
        py: "core_platform_thing.ThingService;create_link_args"
        go: "github.snooguts.net/reddit/thing-api/go/thrift/core_platform/thing;ThingServiceCreateLinkArgs"
      }
      response: {
        py: "core_platform_thing.ttypes;CreateLinkResponse"
        go: "github.snooguts.net/reddit/thing-api/go/thrift/core_platform/thing;CreateLinkResponse"
      }
    };
  }

  rpc CreateMessage(google.protobuf.Empty) returns (google.protobuf.Empty) {
    option (reddit.coreplatform.grpc_thrift.v1.thrift_aliases) = {
      request: {
        py: "core_platform_thing.ThingService;create_message_args"
        go: "github.snooguts.net/reddit/thing-api/go/thrift/core_platform/thing;ThingServiceCreateMessageArgs"
      }
      response: {
        py: "core_platform_thing.ttypes;CreateMessageResponse"
        go: "github.snooguts.net/reddit/thing-api/go/thrift/core_platform/thing;CreateMessageResponse"
      }
    };
  }

  rpc CreateSocialLinks(google.protobuf.Empty) returns (google.protobuf.Empty) {
    option (reddit.coreplatform.grpc_thrift.v1.thrift_aliases) = {
      request: {
        py: "core_platform_thing.ThingService;create_social_links_args"
        go: "github.snooguts.net/reddit/thing-api/go/thrift/core_platform/thing;ThingServiceCreateSocialLinksArgs"
      }
      response: {
        py: "core_platform_thing.ttypes;CreateProfileSocialLinksResponse"
        go: "github.snooguts.net/reddit/thing-api/go/thrift/core_platform/thing;CreateProfileSocialLinksResponse"
      }
    };
  }

  rpc CreateSubreddit(google.protobuf.Empty) returns (google.protobuf.Empty) {
    option (reddit.coreplatform.grpc_thrift.v1.thrift_aliases) = {
      request: {
        py: "core_platform_thing.ThingService;create_subreddit_args"
        go: "github.snooguts.net/reddit/thing-api/go/thrift/core_platform/thing;ThingServiceCreateSubredditArgs"
      }
      response: {
        py: "core_platform_thing.ttypes;CreateSubredditResponse"
        go: "github.snooguts.net/reddit/thing-api/go/thrift/core_platform/thing;CreateSubredditResponse"
      }
    };
  }

  //This function is used on account deletion, to delete all PII data attached to an account
  rpc DeletePiiData(google.protobuf.Empty) returns (google.protobuf.Empty) {
    option (reddit.coreplatform.grpc_thrift.v1.thrift_aliases) = {
      request: {
        py: "core_platform_thing.ThingService;delete_pii_data_args"
        go: "github.snooguts.net/reddit/thing-api/go/thrift/core_platform/thing;ThingServiceDeletePiiDataArgs"
      }
      response: {
        py: "core_platform_thing.ttypes;DeletePiiDataByAccountIdResponse"
        go: "github.snooguts.net/reddit/thing-api/go/thrift/core_platform/thing;DeletePiiDataByAccountIdResponse"
      }
    };
  }

  rpc DeleteSocialLinks(google.protobuf.Empty) returns (google.protobuf.Empty) {
    option (reddit.coreplatform.grpc_thrift.v1.thrift_aliases) = {
      request: {
        py: "core_platform_thing.ThingService;delete_social_links_args"
        go: "github.snooguts.net/reddit/thing-api/go/thrift/core_platform/thing;ThingServiceDeleteSocialLinksArgs"
      }
      response: {
        py: "core_platform_thing.ttypes;DeleteProfileSocialLinksResponse"
        go: "github.snooguts.net/reddit/thing-api/go/thrift/core_platform/thing;DeleteProfileSocialLinksResponse"
      }
    };
  }

  //Takes account id, returns map of account's   'Seen*' flags values keyed by flag name.
  rpc GetAccountHasSeenFlags(google.protobuf.Empty) returns (google.protobuf.Empty) {
    option (reddit.coreplatform.grpc_thrift.v1.thrift_aliases) = {
      request: {
        py: "core_platform_thing.ThingService;get_account_has_seen_flags_args"
        go: "github.snooguts.net/reddit/thing-api/go/thrift/core_platform/thing;ThingServiceGetAccountHasSeenFlagsArgs"
      }
      response: {
        py: "core_platform_thing.ttypes;GetAccountHasSeenResponse"
        go: "github.snooguts.net/reddit/thing-api/go/thrift/core_platform/thing;GetAccountHasSeenResponse"
      }
    };
  }

  rpc GetAccountIds(google.protobuf.Empty) returns (google.protobuf.Empty) {
    option (reddit.coreplatform.grpc_thrift.v1.thrift_aliases) = {
      request: {
        py: "core_platform_thing.ThingService;get_account_ids_args"
        go: "github.snooguts.net/reddit/thing-api/go/thrift/core_platform/thing;ThingServiceGetAccountIdsArgs"
      }
      response: {
        py: "core_platform_thing.ttypes;GetAccountIdsResponse"
        go: "github.snooguts.net/reddit/thing-api/go/thrift/core_platform/thing;GetAccountIdsResponse"
      }
    };
  }

  rpc GetAccountIdsBannedStatus(google.protobuf.Empty) returns (google.protobuf.Empty) {
    option (reddit.coreplatform.grpc_thrift.v1.thrift_aliases) = {
      request: {
        py: "core_platform_thing.ThingService;get_account_ids_banned_status_args"
        go: "github.snooguts.net/reddit/thing-api/go/thrift/core_platform/thing;ThingServiceGetAccountIdsBannedStatusArgs"
      }
      response: {
        py: "core_platform_thing.ttypes;GetAccountIdsBannedStatusResponse"
        go: "github.snooguts.net/reddit/thing-api/go/thrift/core_platform/thing;GetAccountIdsBannedStatusResponse"
      }
    };
  }

  rpc GetAccountIdsByEmail(google.protobuf.Empty) returns (google.protobuf.Empty) {
    option (reddit.coreplatform.grpc_thrift.v1.thrift_aliases) = {
      request: {
        py: "core_platform_thing.ThingService;get_account_ids_by_email_args"
        go: "github.snooguts.net/reddit/thing-api/go/thrift/core_platform/thing;ThingServiceGetAccountIdsByEmailArgs"
      }
      response: {
        py: "core_platform_thing.ttypes;GetAccountIdsByEmailResponse"
        go: "github.snooguts.net/reddit/thing-api/go/thrift/core_platform/thing;GetAccountIdsByEmailResponse"
      }
    };
  }

  rpc GetAccountIdsDepr(google.protobuf.Empty) returns (google.protobuf.Empty) {
    option (reddit.coreplatform.grpc_thrift.v1.thrift_aliases) = {
      request: {
        py: "core_platform_thing.ThingService;get_account_ids_depr_args"
        go: "github.snooguts.net/reddit/thing-api/go/thrift/core_platform/thing;ThingServiceGetAccountIdsDeprArgs"
      }
      response: {
        py: "core_platform_thing.ttypes;GetAccountIdsResponse"
        go: "github.snooguts.net/reddit/thing-api/go/thrift/core_platform/thing;GetAccountIdsResponse"
      }
    };
  }

  //Takes list of account ids & a subbreddit id,        returns map of accountflair objects by account id.
  rpc GetAccountflairs(google.protobuf.Empty) returns (google.protobuf.Empty) {
    option (reddit.coreplatform.grpc_thrift.v1.thrift_aliases) = {
      request: {
        py: "core_platform_thing.ThingService;get_accountflairs_args"
        go: "github.snooguts.net/reddit/thing-api/go/thrift/core_platform/thing;ThingServiceGetAccountflairsArgs"
      }
      response: {
        py: "core_platform_thing.ttypes;GetAccountFlairsResponse"
        go: "github.snooguts.net/reddit/thing-api/go/thrift/core_platform/thing;GetAccountFlairsResponse"
      }
    };
  }

  rpc GetAccountflairsBatch(google.protobuf.Empty) returns (google.protobuf.Empty) {
    option (reddit.coreplatform.grpc_thrift.v1.thrift_aliases) = {
      request: {
        py: "core_platform_thing.ThingService;get_accountflairs_batch_args"
        go: "github.snooguts.net/reddit/thing-api/go/thrift/core_platform/thing;ThingServiceGetAccountflairsBatchArgs"
      }
      response: {
        py: "core_platform_thing.ttypes;GetAccountFlairsBatchResponse"
        go: "github.snooguts.net/reddit/thing-api/go/thrift/core_platform/thing;GetAccountFlairsBatchResponse"
      }
    };
  }

  rpc GetAccounts(google.protobuf.Empty) returns (google.protobuf.Empty) {
    option (reddit.coreplatform.grpc_thrift.v1.thrift_aliases) = {
      request: {
        py: "core_platform_thing.ThingService;get_accounts_args"
        go: "github.snooguts.net/reddit/thing-api/go/thrift/core_platform/thing;ThingServiceGetAccountsArgs"
      }
      response: {
        py: "core_platform_thing.ttypes;GetAccountsResponse"
        go: "github.snooguts.net/reddit/thing-api/go/thrift/core_platform/thing;GetAccountsResponse"
      }
    };
  }

  rpc GetAccountsDepr(google.protobuf.Empty) returns (google.protobuf.Empty) {
    option (reddit.coreplatform.grpc_thrift.v1.thrift_aliases) = {
      request: {
        py: "core_platform_thing.ThingService;get_accounts_depr_args"
        go: "github.snooguts.net/reddit/thing-api/go/thrift/core_platform/thing;ThingServiceGetAccountsDeprArgs"
      }
      response: {
        py: "core_platform_thing.ttypes;GetAccountsResponse"
        go: "github.snooguts.net/reddit/thing-api/go/thrift/core_platform/thing;GetAccountsResponse"
      }
    };
  }

  //Return subreddits that have been posted to recently that the user        is subscribed to.
  rpc GetActiveSubscriptions(google.protobuf.Empty) returns (google.protobuf.Empty) {
    option (reddit.coreplatform.grpc_thrift.v1.thrift_aliases) = {
      request: {
        py: "core_platform_thing.ThingService;get_active_subscriptions_args"
        go: "github.snooguts.net/reddit/thing-api/go/thrift/core_platform/thing;ThingServiceGetActiveSubscriptionsArgs"
      }
      response: {
        py: "core_platform_thing.ttypes;GetActiveSubscriptionsResponse"
        go: "github.snooguts.net/reddit/thing-api/go/thrift/core_platform/thing;GetActiveSubscriptionsResponse"
      }
    };
  }

  //Takes an account id and returns a list of account ids for the accounts        that are permitted to chat/interact with them.
  rpc GetAllowlistedAccountIds(google.protobuf.Empty) returns (google.protobuf.Empty) {
    option (reddit.coreplatform.grpc_thrift.v1.thrift_aliases) = {
      request: {
        py: "core_platform_thing.ThingService;get_allowlisted_account_ids_args"
        go: "github.snooguts.net/reddit/thing-api/go/thrift/core_platform/thing;ThingServiceGetAllowlistedAccountIdsArgs"
      }
      response: {
        py: "core_platform_thing.ttypes;GetAllowlistedAccountIdsResponse"
        go: "github.snooguts.net/reddit/thing-api/go/thrift/core_platform/thing;GetAllowlistedAccountIdsResponse"
      }
    };
  }

  rpc GetBannedStatus(google.protobuf.Empty) returns (google.protobuf.Empty) {
    option (reddit.coreplatform.grpc_thrift.v1.thrift_aliases) = {
      request: {
        py: "core_platform_thing.ThingService;get_banned_status_args"
        go: "github.snooguts.net/reddit/thing-api/go/thrift/core_platform/thing;ThingServiceGetBannedStatusArgs"
      }
      response: {
        py: "core_platform_thing.ttypes;GetBannedStatusResponse"
        go: "github.snooguts.net/reddit/thing-api/go/thrift/core_platform/thing;GetBannedStatusResponse"
      }
    };
  }

  //Takes an account id and returns a list of account ids for the accounts        that are blocked by the given account
  rpc GetBlockedAccountIds(google.protobuf.Empty) returns (google.protobuf.Empty) {
    option (reddit.coreplatform.grpc_thrift.v1.thrift_aliases) = {
      request: {
        py: "core_platform_thing.ThingService;get_blocked_account_ids_args"
        go: "github.snooguts.net/reddit/thing-api/go/thrift/core_platform/thing;ThingServiceGetBlockedAccountIdsArgs"
      }
      response: {
        py: "core_platform_thing.ttypes;GetBlockedAccountIdsResponse"
        go: "github.snooguts.net/reddit/thing-api/go/thrift/core_platform/thing;GetBlockedAccountIdsResponse"
      }
    };
  }

  //Takes an account id and returns a list of account ids for the accounts        that are blocked by the given account
  rpc GetBlockedAccountIdsDepr(google.protobuf.Empty) returns (google.protobuf.Empty) {
    option (reddit.coreplatform.grpc_thrift.v1.thrift_aliases) = {
      request: {
        py: "core_platform_thing.ThingService;get_blocked_account_ids_depr_args"
        go: "github.snooguts.net/reddit/thing-api/go/thrift/core_platform/thing;ThingServiceGetBlockedAccountIdsDeprArgs"
      }
      response: {
        py: "core_platform_thing.ttypes;GetBlockedAccountIdsResponse"
        go: "github.snooguts.net/reddit/thing-api/go/thrift/core_platform/thing;GetBlockedAccountIdsResponse"
      }
    };
  }

  //This method is deprecated, no index support.        Consider using get_blocker_account_ids
  rpc GetBlockedByAccountIds(google.protobuf.Empty) returns (google.protobuf.Empty) {
    option (reddit.coreplatform.grpc_thrift.v1.thrift_aliases) = {
      request: {
        py: "core_platform_thing.ThingService;get_blocked_by_account_ids_args"
        go: "github.snooguts.net/reddit/thing-api/go/thrift/core_platform/thing;ThingServiceGetBlockedByAccountIdsArgs"
      }
      response: {
        py: "core_platform_thing.ttypes;GetBlockedByAccountIdsResponse"
        go: "github.snooguts.net/reddit/thing-api/go/thrift/core_platform/thing;GetBlockedByAccountIdsResponse"
      }
    };
  }

  //Takes a list of account ids and returns a map of account id to list of        account ids that the account blocks
  rpc GetBlockedIdsForAccountIds(google.protobuf.Empty) returns (google.protobuf.Empty) {
    option (reddit.coreplatform.grpc_thrift.v1.thrift_aliases) = {
      request: {
        py: "core_platform_thing.ThingService;get_blocked_ids_for_account_ids_args"
        go: "github.snooguts.net/reddit/thing-api/go/thrift/core_platform/thing;ThingServiceGetBlockedIdsForAccountIdsArgs"
      }
      response: {
        py: "core_platform_thing.ttypes;GetBlockedIdsForAccountIdsResponse"
        go: "github.snooguts.net/reddit/thing-api/go/thrift/core_platform/thing;GetBlockedIdsForAccountIdsResponse"
      }
    };
  }

  rpc GetBlockerAccountIds(google.protobuf.Empty) returns (google.protobuf.Empty) {
    option (reddit.coreplatform.grpc_thrift.v1.thrift_aliases) = {
      request: {
        py: "core_platform_thing.ThingService;get_blocker_account_ids_args"
        go: "github.snooguts.net/reddit/thing-api/go/thrift/core_platform/thing;ThingServiceGetBlockerAccountIdsArgs"
      }
      response: {
        py: "core_platform_thing.ttypes;GetBlockerAccountIdsResponse"
        go: "github.snooguts.net/reddit/thing-api/go/thrift/core_platform/thing;GetBlockerAccountIdsResponse"
      }
    };
  }

  rpc GetCommentIdsByAuthorAndParentAuthor(google.protobuf.Empty) returns (google.protobuf.Empty) {
    option (reddit.coreplatform.grpc_thrift.v1.thrift_aliases) = {
      request: {
        py: "core_platform_thing.ThingService;get_comment_ids_by_author_and_parent_author_args"
        go: "github.snooguts.net/reddit/thing-api/go/thrift/core_platform/thing;ThingServiceGetCommentIdsByAuthorAndParentAuthorArgs"
      }
      response: {
        py: "core_platform_thing.ttypes;GetCommentIdsByAuthorAndParentAuthorResponse"
        go: "github.snooguts.net/reddit/thing-api/go/thrift/core_platform/thing;GetCommentIdsByAuthorAndParentAuthorResponse"
      }
    };
  }

  //Intended for use by Comment Service only. Endpoint will be very slow        and is not fit for user requests. Takes a link id, returns map of a        list of comment_ids by link_id.
  rpc GetCommentIdsForLink(google.protobuf.Empty) returns (google.protobuf.Empty) {
    option (reddit.coreplatform.grpc_thrift.v1.thrift_aliases) = {
      request: {
        py: "core_platform_thing.ThingService;get_comment_ids_for_link_args"
        go: "github.snooguts.net/reddit/thing-api/go/thrift/core_platform/thing;ThingServiceGetCommentIdsForLinkArgs"
      }
      response: {
        py: "core_platform_thing.ttypes;GetCommentIdsForLinksResponse"
        go: "github.snooguts.net/reddit/thing-api/go/thrift/core_platform/thing;GetCommentIdsForLinksResponse"
      }
    };
  }

  rpc GetCommentModInfo(google.protobuf.Empty) returns (google.protobuf.Empty) {
    option (reddit.coreplatform.grpc_thrift.v1.thrift_aliases) = {
      request: {
        py: "core_platform_thing.ThingService;get_comment_mod_info_args"
        go: "github.snooguts.net/reddit/thing-api/go/thrift/core_platform/thing;ThingServiceGetCommentModInfoArgs"
      }
      response: {
        py: "core_platform_thing.ttypes;GetCommentModerationInfoResponse"
        go: "github.snooguts.net/reddit/thing-api/go/thrift/core_platform/thing;GetCommentModerationInfoResponse"
      }
    };
  }

  rpc GetCommentReports(google.protobuf.Empty) returns (google.protobuf.Empty) {
    option (reddit.coreplatform.grpc_thrift.v1.thrift_aliases) = {
      request: {
        py: "core_platform_thing.ThingService;get_comment_reports_args"
        go: "github.snooguts.net/reddit/thing-api/go/thrift/core_platform/thing;ThingServiceGetCommentReportsArgs"
      }
      response: {
        py: "core_platform_thing.ttypes;GetCommentReportsResponse"
        go: "github.snooguts.net/reddit/thing-api/go/thrift/core_platform/thing;GetCommentReportsResponse"
      }
    };
  }

  rpc GetCommentSaves(google.protobuf.Empty) returns (google.protobuf.Empty) {
    option (reddit.coreplatform.grpc_thrift.v1.thrift_aliases) = {
      request: {
        py: "core_platform_thing.ThingService;get_comment_saves_args"
        go: "github.snooguts.net/reddit/thing-api/go/thrift/core_platform/thing;ThingServiceGetCommentSavesArgs"
      }
      response: {
        py: "core_platform_thing.ttypes;GetCommentSavesResponse"
        go: "github.snooguts.net/reddit/thing-api/go/thrift/core_platform/thing;GetCommentSavesResponse"
      }
    };
  }

  rpc GetCommentVisits(google.protobuf.Empty) returns (google.protobuf.Empty) {
    option (reddit.coreplatform.grpc_thrift.v1.thrift_aliases) = {
      request: {
        py: "core_platform_thing.ThingService;get_comment_visits_args"
        go: "github.snooguts.net/reddit/thing-api/go/thrift/core_platform/thing;ThingServiceGetCommentVisitsArgs"
      }
      response: {
        py: "core_platform_thing.ttypes;GetCommentVisitsResponse"
        go: "github.snooguts.net/reddit/thing-api/go/thrift/core_platform/thing;GetCommentVisitsResponse"
      }
    };
  }

  rpc GetCommentVotes(google.protobuf.Empty) returns (google.protobuf.Empty) {
    option (reddit.coreplatform.grpc_thrift.v1.thrift_aliases) = {
      request: {
        py: "core_platform_thing.ThingService;get_comment_votes_args"
        go: "github.snooguts.net/reddit/thing-api/go/thrift/core_platform/thing;ThingServiceGetCommentVotesArgs"
      }
      response: {
        py: "core_platform_thing.ttypes;GetCommentVotesResponse"
        go: "github.snooguts.net/reddit/thing-api/go/thrift/core_platform/thing;GetCommentVotesResponse"
      }
    };
  }

  rpc GetComments(google.protobuf.Empty) returns (google.protobuf.Empty) {
    option (reddit.coreplatform.grpc_thrift.v1.thrift_aliases) = {
      request: {
        py: "core_platform_thing.ThingService;get_comments_args"
        go: "github.snooguts.net/reddit/thing-api/go/thrift/core_platform/thing;ThingServiceGetCommentsArgs"
      }
      response: {
        py: "core_platform_thing.ttypes;GetCommentsResponse"
        go: "github.snooguts.net/reddit/thing-api/go/thrift/core_platform/thing;GetCommentsResponse"
      }
    };
  }

  rpc GetCommentsDepr(google.protobuf.Empty) returns (google.protobuf.Empty) {
    option (reddit.coreplatform.grpc_thrift.v1.thrift_aliases) = {
      request: {
        py: "core_platform_thing.ThingService;get_comments_depr_args"
        go: "github.snooguts.net/reddit/thing-api/go/thrift/core_platform/thing;ThingServiceGetCommentsDeprArgs"
      }
      response: {
        py: "core_platform_thing.ttypes;GetCommentsResponse"
        go: "github.snooguts.net/reddit/thing-api/go/thrift/core_platform/thing;GetCommentsResponse"
      }
    };
  }

  rpc GetContributorStatus(google.protobuf.Empty) returns (google.protobuf.Empty) {
    option (reddit.coreplatform.grpc_thrift.v1.thrift_aliases) = {
      request: {
        py: "core_platform_thing.ThingService;get_contributor_status_args"
        go: "github.snooguts.net/reddit/thing-api/go/thrift/core_platform/thing;ThingServiceGetContributorStatusArgs"
      }
      response: {
        py: "core_platform_thing.ttypes;GetContributorStatusResponse"
        go: "github.snooguts.net/reddit/thing-api/go/thrift/core_platform/thing;GetContributorStatusResponse"
      }
    };
  }

  rpc GetContributorStatusByAccountId(google.protobuf.Empty) returns (google.protobuf.Empty) {
    option (reddit.coreplatform.grpc_thrift.v1.thrift_aliases) = {
      request: {
        py: "core_platform_thing.ThingService;get_contributor_status_by_account_id_args"
        go: "github.snooguts.net/reddit/thing-api/go/thrift/core_platform/thing;ThingServiceGetContributorStatusByAccountIDArgs"
      }
      response: {
        py: "core_platform_thing.ttypes;GetContributorStatusResponse"
        go: "github.snooguts.net/reddit/thing-api/go/thrift/core_platform/thing;GetContributorStatusResponse"
      }
    };
  }

  rpc GetCreatedSubredditIds(google.protobuf.Empty) returns (google.protobuf.Empty) {
    option (reddit.coreplatform.grpc_thrift.v1.thrift_aliases) = {
      request: {
        py: "core_platform_thing.ThingService;get_created_subreddit_ids_args"
        go: "github.snooguts.net/reddit/thing-api/go/thrift/core_platform/thing;ThingServiceGetCreatedSubredditIdsArgs"
      }
      response: {
        py: "core_platform_thing.ttypes;GetCreatedSubredditIdsResponse"
        go: "github.snooguts.net/reddit/thing-api/go/thrift/core_platform/thing;GetCreatedSubredditIdsResponse"
      }
    };
  }

  rpc GetFavoriteSubreddits(google.protobuf.Empty) returns (google.protobuf.Empty) {
    option (reddit.coreplatform.grpc_thrift.v1.thrift_aliases) = {
      request: {
        py: "core_platform_thing.ThingService;get_favorite_subreddits_args"
        go: "github.snooguts.net/reddit/thing-api/go/thrift/core_platform/thing;ThingServiceGetFavoriteSubredditsArgs"
      }
      response: {
        py: "core_platform_thing.ttypes;GetFavoriteSubredditsResponse"
        go: "github.snooguts.net/reddit/thing-api/go/thrift/core_platform/thing;GetFavoriteSubredditsResponse"
      }
    };
  }

  //Return multi names (e.g. "/user/reddit/m/test") favorited by the account
  rpc GetFavoritedMultireddits(google.protobuf.Empty) returns (google.protobuf.Empty) {
    option (reddit.coreplatform.grpc_thrift.v1.thrift_aliases) = {
      response: {
        py: "core_platform_thing.ttypes;GetFavoritedMultisResponse"
        go: "github.snooguts.net/reddit/thing-api/go/thrift/core_platform/thing;GetFavoritedMultisResponse"
      }
    };
  }

  rpc GetFeaturedAnnouncements(google.protobuf.Empty) returns (google.protobuf.Empty) {
    option (reddit.coreplatform.grpc_thrift.v1.thrift_aliases) = {
      response: {
        py: "core_platform_thing.ttypes;GetFeaturedAnnouncementsResponse"
        go: "github.snooguts.net/reddit/thing-api/go/thrift/core_platform/thing;GetFeaturedAnnouncementsResponse"
      }
    };
  }

  rpc GetFeaturedLiveEvents(google.protobuf.Empty) returns (google.protobuf.Empty) {
    option (reddit.coreplatform.grpc_thrift.v1.thrift_aliases) = {
      response: {
        py: "core_platform_thing.ttypes;GetFeaturedLiveEventsResponse"
        go: "github.snooguts.net/reddit/thing-api/go/thrift/core_platform/thing;GetFeaturedLiveEventsResponse"
      }
    };
  }

  //Takes list of template ids, returns map of        template objects by template id.
  rpc GetFlairTemplates(google.protobuf.Empty) returns (google.protobuf.Empty) {
    option (reddit.coreplatform.grpc_thrift.v1.thrift_aliases) = {
      request: {
        py: "core_platform_thing.ThingService;get_flair_templates_args"
        go: "github.snooguts.net/reddit/thing-api/go/thrift/core_platform/thing;ThingServiceGetFlairTemplatesArgs"
      }
      response: {
        py: "core_platform_thing.ttypes;GetFlairTemplatesResponse"
        go: "github.snooguts.net/reddit/thing-api/go/thrift/core_platform/thing;GetFlairTemplatesResponse"
      }
    };
  }

  //Takes an account id and returns a list of account ids for the accounts        that are friended by the given account
  rpc GetFriendAccountIds(google.protobuf.Empty) returns (google.protobuf.Empty) {
    option (reddit.coreplatform.grpc_thrift.v1.thrift_aliases) = {
      request: {
        py: "core_platform_thing.ThingService;get_friend_account_ids_args"
        go: "github.snooguts.net/reddit/thing-api/go/thrift/core_platform/thing;ThingServiceGetFriendAccountIdsArgs"
      }
      response: {
        py: "core_platform_thing.ttypes;GetFriendAccountIdsResponse"
        go: "github.snooguts.net/reddit/thing-api/go/thrift/core_platform/thing;GetFriendAccountIdsResponse"
      }
    };
  }

  rpc GetGenderByAccountId(google.protobuf.Empty) returns (google.protobuf.Empty) {
    option (reddit.coreplatform.grpc_thrift.v1.thrift_aliases) = {
      request: {
        py: "core_platform_thing.ThingService;get_gender_by_account_id_args"
        go: "github.snooguts.net/reddit/thing-api/go/thrift/core_platform/thing;ThingServiceGetGenderByAccountIDArgs"
      }
      response: {
        py: "core_platform_thing.ttypes;GetAccountGenderByAccountIdResponse"
        go: "github.snooguts.net/reddit/thing-api/go/thrift/core_platform/thing;GetAccountGenderByAccountIdResponse"
      }
    };
  }

  rpc GetGildedLinks(google.protobuf.Empty) returns (google.protobuf.Empty) {
    option (reddit.coreplatform.grpc_thrift.v1.thrift_aliases) = {
      request: {
        py: "core_platform_thing.ThingService;get_gilded_links_args"
        go: "github.snooguts.net/reddit/thing-api/go/thrift/core_platform/thing;ThingServiceGetGildedLinksArgs"
      }
      response: {
        py: "core_platform_thing.ttypes;GetGildedLinksResponse"
        go: "github.snooguts.net/reddit/thing-api/go/thrift/core_platform/thing;GetGildedLinksResponse"
      }
    };
  }

  rpc GetIdentities(google.protobuf.Empty) returns (google.protobuf.Empty) {
    option (reddit.coreplatform.grpc_thrift.v1.thrift_aliases) = {
      request: {
        py: "core_platform_thing.ThingService;get_identities_args"
        go: "github.snooguts.net/reddit/thing-api/go/thrift/core_platform/thing;ThingServiceGetIdentitiesArgs"
      }
      response: {
        py: "core_platform_thing.ttypes;GetIdentitiesResponse"
        go: "github.snooguts.net/reddit/thing-api/go/thrift/core_platform/thing;GetIdentitiesResponse"
      }
    };
  }

  rpc GetIdentitiesDepr(google.protobuf.Empty) returns (google.protobuf.Empty) {
    option (reddit.coreplatform.grpc_thrift.v1.thrift_aliases) = {
      request: {
        py: "core_platform_thing.ThingService;get_identities_depr_args"
        go: "github.snooguts.net/reddit/thing-api/go/thrift/core_platform/thing;ThingServiceGetIdentitiesDeprArgs"
      }
      response: {
        py: "core_platform_thing.ttypes;GetIdentitiesResponse"
        go: "github.snooguts.net/reddit/thing-api/go/thrift/core_platform/thing;GetIdentitiesResponse"
      }
    };
  }

  rpc GetIdentity(google.protobuf.Empty) returns (google.protobuf.Empty) {
    option (reddit.coreplatform.grpc_thrift.v1.thrift_aliases) = {
      request: {
        py: "core_platform_thing.ThingService;get_identity_args"
        go: "github.snooguts.net/reddit/thing-api/go/thrift/core_platform/thing;ThingServiceGetIdentityArgs"
      }
      response: {
        py: "core_platform_thing.ttypes;GetIdentityResponse"
        go: "github.snooguts.net/reddit/thing-api/go/thrift/core_platform/thing;GetIdentityResponse"
      }
    };
  }

  rpc GetIdentityDepr(google.protobuf.Empty) returns (google.protobuf.Empty) {
    option (reddit.coreplatform.grpc_thrift.v1.thrift_aliases) = {
      request: {
        py: "core_platform_thing.ThingService;get_identity_depr_args"
        go: "github.snooguts.net/reddit/thing-api/go/thrift/core_platform/thing;ThingServiceGetIdentityDeprArgs"
      }
      response: {
        py: "core_platform_thing.ttypes;GetIdentityResponse"
        go: "github.snooguts.net/reddit/thing-api/go/thrift/core_platform/thing;GetIdentityResponse"
      }
    };
  }

  rpc GetIdentityLastModified(google.protobuf.Empty) returns (google.protobuf.Empty) {
    option (reddit.coreplatform.grpc_thrift.v1.thrift_aliases) = {
      request: {
        py: "core_platform_thing.ThingService;get_identity_last_modified_args"
        go: "github.snooguts.net/reddit/thing-api/go/thrift/core_platform/thing;ThingServiceGetIdentityLastModifiedArgs"
      }
      response: {
        py: "core_platform_thing.ttypes;GetIdentityLastModifiedResponse"
        go: "github.snooguts.net/reddit/thing-api/go/thrift/core_platform/thing;GetIdentityLastModifiedResponse"
      }
    };
  }

  //Returns a set of users invited mod permissions for the given subreddit.     Unlike active moderators, only moderators with ALL permission may access   this information.
  rpc GetInvitedModeratorPermissionsByAccountIds(google.protobuf.Empty) returns (google.protobuf.Empty) {
    option (reddit.coreplatform.grpc_thrift.v1.thrift_aliases) = {
      request: {
        py: "core_platform_thing.ThingService;get_invited_moderator_permissions_by_account_ids_args"
        go: "github.snooguts.net/reddit/thing-api/go/thrift/core_platform/thing;ThingServiceGetInvitedModeratorPermissionsByAccountIdsArgs"
      }
      response: {
        py: "core_platform_thing.ttypes;GetInvitedModeratorPermissionsByAccountIdsResponse"
        go: "github.snooguts.net/reddit/thing-api/go/thrift/core_platform/thing;GetInvitedModeratorPermissionsByAccountIdsResponse"
      }
    };
  }

  rpc GetLinkHides(google.protobuf.Empty) returns (google.protobuf.Empty) {
    option (reddit.coreplatform.grpc_thrift.v1.thrift_aliases) = {
      request: {
        py: "core_platform_thing.ThingService;get_link_hides_args"
        go: "github.snooguts.net/reddit/thing-api/go/thrift/core_platform/thing;ThingServiceGetLinkHidesArgs"
      }
      response: {
        py: "core_platform_thing.ttypes;GetLinkHidesResponse"
        go: "github.snooguts.net/reddit/thing-api/go/thrift/core_platform/thing;GetLinkHidesResponse"
      }
    };
  }

  rpc GetLinkHidesDepr(google.protobuf.Empty) returns (google.protobuf.Empty) {
    option (reddit.coreplatform.grpc_thrift.v1.thrift_aliases) = {
      request: {
        py: "core_platform_thing.ThingService;get_link_hides_depr_args"
        go: "github.snooguts.net/reddit/thing-api/go/thrift/core_platform/thing;ThingServiceGetLinkHidesDeprArgs"
      }
      response: {
        py: "core_platform_thing.ttypes;GetLinkHidesResponse"
        go: "github.snooguts.net/reddit/thing-api/go/thrift/core_platform/thing;GetLinkHidesResponse"
      }
    };
  }

  rpc GetLinkIdsForUrlAndSr(google.protobuf.Empty) returns (google.protobuf.Empty) {
    option (reddit.coreplatform.grpc_thrift.v1.thrift_aliases) = {
      request: {
        py: "core_platform_thing.ThingService;get_link_ids_for_url_and_sr_args"
        go: "github.snooguts.net/reddit/thing-api/go/thrift/core_platform/thing;ThingServiceGetLinkIdsForURLAndSrArgs"
      }
      response: {
        py: "core_platform_thing.ttypes;GetLinkIdsForUrlAndSubredditResponse"
        go: "github.snooguts.net/reddit/thing-api/go/thrift/core_platform/thing;GetLinkIdsForUrlAndSubredditResponse"
      }
    };
  }

  rpc GetLinkModInfo(google.protobuf.Empty) returns (google.protobuf.Empty) {
    option (reddit.coreplatform.grpc_thrift.v1.thrift_aliases) = {
      request: {
        py: "core_platform_thing.ThingService;get_link_mod_info_args"
        go: "github.snooguts.net/reddit/thing-api/go/thrift/core_platform/thing;ThingServiceGetLinkModInfoArgs"
      }
      response: {
        py: "core_platform_thing.ttypes;GetLinkModerationInfoResponse"
        go: "github.snooguts.net/reddit/thing-api/go/thrift/core_platform/thing;GetLinkModerationInfoResponse"
      }
    };
  }

  rpc GetLinkReports(google.protobuf.Empty) returns (google.protobuf.Empty) {
    option (reddit.coreplatform.grpc_thrift.v1.thrift_aliases) = {
      request: {
        py: "core_platform_thing.ThingService;get_link_reports_args"
        go: "github.snooguts.net/reddit/thing-api/go/thrift/core_platform/thing;ThingServiceGetLinkReportsArgs"
      }
      response: {
        py: "core_platform_thing.ttypes;GetLinkReportsResponse"
        go: "github.snooguts.net/reddit/thing-api/go/thrift/core_platform/thing;GetLinkReportsResponse"
      }
    };
  }

  rpc GetLinkSaves(google.protobuf.Empty) returns (google.protobuf.Empty) {
    option (reddit.coreplatform.grpc_thrift.v1.thrift_aliases) = {
      request: {
        py: "core_platform_thing.ThingService;get_link_saves_args"
        go: "github.snooguts.net/reddit/thing-api/go/thrift/core_platform/thing;ThingServiceGetLinkSavesArgs"
      }
      response: {
        py: "core_platform_thing.ttypes;GetLinkSavesResponse"
        go: "github.snooguts.net/reddit/thing-api/go/thrift/core_platform/thing;GetLinkSavesResponse"
      }
    };
  }

  rpc GetLinkVisits(google.protobuf.Empty) returns (google.protobuf.Empty) {
    option (reddit.coreplatform.grpc_thrift.v1.thrift_aliases) = {
      request: {
        py: "core_platform_thing.ThingService;get_link_visits_args"
        go: "github.snooguts.net/reddit/thing-api/go/thrift/core_platform/thing;ThingServiceGetLinkVisitsArgs"
      }
      response: {
        py: "core_platform_thing.ttypes;GetLinkVisitsResponse"
        go: "github.snooguts.net/reddit/thing-api/go/thrift/core_platform/thing;GetLinkVisitsResponse"
      }
    };
  }

  rpc GetLinkVotes(google.protobuf.Empty) returns (google.protobuf.Empty) {
    option (reddit.coreplatform.grpc_thrift.v1.thrift_aliases) = {
      request: {
        py: "core_platform_thing.ThingService;get_link_votes_args"
        go: "github.snooguts.net/reddit/thing-api/go/thrift/core_platform/thing;ThingServiceGetLinkVotesArgs"
      }
      response: {
        py: "core_platform_thing.ttypes;GetLinkVotesResponse"
        go: "github.snooguts.net/reddit/thing-api/go/thrift/core_platform/thing;GetLinkVotesResponse"
      }
    };
  }

  rpc GetLinkVotesDepr(google.protobuf.Empty) returns (google.protobuf.Empty) {
    option (reddit.coreplatform.grpc_thrift.v1.thrift_aliases) = {
      request: {
        py: "core_platform_thing.ThingService;get_link_votes_depr_args"
        go: "github.snooguts.net/reddit/thing-api/go/thrift/core_platform/thing;ThingServiceGetLinkVotesDeprArgs"
      }
      response: {
        py: "core_platform_thing.ttypes;GetLinkVotesResponse"
        go: "github.snooguts.net/reddit/thing-api/go/thrift/core_platform/thing;GetLinkVotesResponse"
      }
    };
  }

  rpc GetLinks(google.protobuf.Empty) returns (google.protobuf.Empty) {
    option (reddit.coreplatform.grpc_thrift.v1.thrift_aliases) = {
      request: {
        py: "core_platform_thing.ThingService;get_links_args"
        go: "github.snooguts.net/reddit/thing-api/go/thrift/core_platform/thing;ThingServiceGetLinksArgs"
      }
      response: {
        py: "core_platform_thing.ttypes;GetLinksResponse"
        go: "github.snooguts.net/reddit/thing-api/go/thrift/core_platform/thing;GetLinksResponse"
      }
    };
  }

  rpc GetLinksDepr(google.protobuf.Empty) returns (google.protobuf.Empty) {
    option (reddit.coreplatform.grpc_thrift.v1.thrift_aliases) = {
      request: {
        py: "core_platform_thing.ThingService;get_links_depr_args"
        go: "github.snooguts.net/reddit/thing-api/go/thrift/core_platform/thing;ThingServiceGetLinksDeprArgs"
      }
      response: {
        py: "core_platform_thing.ttypes;GetLinksResponse"
        go: "github.snooguts.net/reddit/thing-api/go/thrift/core_platform/thing;GetLinksResponse"
      }
    };
  }

  rpc GetLiveEvent(google.protobuf.Empty) returns (google.protobuf.Empty) {
    option (reddit.coreplatform.grpc_thrift.v1.thrift_aliases) = {
      request: {
        py: "core_platform_thing.ThingService;get_live_event_args"
        go: "github.snooguts.net/reddit/thing-api/go/thrift/core_platform/thing;ThingServiceGetLiveEventArgs"
      }
      response: {
        py: "core_platform_thing.ttypes;GetLiveEventResponse"
        go: "github.snooguts.net/reddit/thing-api/go/thrift/core_platform/thing;GetLiveEventResponse"
      }
    };
  }

  rpc GetMessages(google.protobuf.Empty) returns (google.protobuf.Empty) {
    option (reddit.coreplatform.grpc_thrift.v1.thrift_aliases) = {
      request: {
        py: "core_platform_thing.ThingService;get_messages_args"
        go: "github.snooguts.net/reddit/thing-api/go/thrift/core_platform/thing;ThingServiceGetMessagesArgs"
      }
      response: {
        py: "core_platform_thing.ttypes;GetMessagesResponse"
        go: "github.snooguts.net/reddit/thing-api/go/thrift/core_platform/thing;GetMessagesResponse"
      }
    };
  }

  rpc GetModeratedSubreddits(google.protobuf.Empty) returns (google.protobuf.Empty) {
    option (reddit.coreplatform.grpc_thrift.v1.thrift_aliases) = {
      request: {
        py: "core_platform_thing.ThingService;get_moderated_subreddits_args"
        go: "github.snooguts.net/reddit/thing-api/go/thrift/core_platform/thing;ThingServiceGetModeratedSubredditsArgs"
      }
      response: {
        py: "core_platform_thing.ttypes;GetModeratedSubredditsResponse"
        go: "github.snooguts.net/reddit/thing-api/go/thrift/core_platform/thing;GetModeratedSubredditsResponse"
      }
    };
  }

  rpc GetModeratedSubredditsWithPermissions(google.protobuf.Empty) returns (google.protobuf.Empty) {
    option (reddit.coreplatform.grpc_thrift.v1.thrift_aliases) = {
      request: {
        py: "core_platform_thing.ThingService;get_moderated_subreddits_with_permissions_args"
        go: "github.snooguts.net/reddit/thing-api/go/thrift/core_platform/thing;ThingServiceGetModeratedSubredditsWithPermissionsArgs"
      }
      response: {
        py: "core_platform_thing.ttypes;GetModeratedSubredditsWithPermissionsResponse"
        go: "github.snooguts.net/reddit/thing-api/go/thrift/core_platform/thing;GetModeratedSubredditsWithPermissionsResponse"
      }
    };
  }

  rpc GetModeratorPermissions(google.protobuf.Empty) returns (google.protobuf.Empty) {
    option (reddit.coreplatform.grpc_thrift.v1.thrift_aliases) = {
      request: {
        py: "core_platform_thing.ThingService;get_moderator_permissions_args"
        go: "github.snooguts.net/reddit/thing-api/go/thrift/core_platform/thing;ThingServiceGetModeratorPermissionsArgs"
      }
      response: {
        py: "core_platform_thing.ttypes;GetModeratorPermissionsResponse"
        go: "github.snooguts.net/reddit/thing-api/go/thrift/core_platform/thing;GetModeratorPermissionsResponse"
      }
    };
  }

  //Returns a set of users mod permissions for the given subreddit.
  rpc GetModeratorPermissionsByAccountIds(google.protobuf.Empty) returns (google.protobuf.Empty) {
    option (reddit.coreplatform.grpc_thrift.v1.thrift_aliases) = {
      request: {
        py: "core_platform_thing.ThingService;get_moderator_permissions_by_account_ids_args"
        go: "github.snooguts.net/reddit/thing-api/go/thrift/core_platform/thing;ThingServiceGetModeratorPermissionsByAccountIdsArgs"
      }
      response: {
        py: "core_platform_thing.ttypes;GetModeratorPermissionsByAccountIdsResponse"
        go: "github.snooguts.net/reddit/thing-api/go/thrift/core_platform/thing;GetModeratorPermissionsByAccountIdsResponse"
      }
    };
  }

  rpc GetMonthlyGildings(google.protobuf.Empty) returns (google.protobuf.Empty) {
    option (reddit.coreplatform.grpc_thrift.v1.thrift_aliases) = {
      request: {
        py: "core_platform_thing.ThingService;get_monthly_gildings_args"
        go: "github.snooguts.net/reddit/thing-api/go/thrift/core_platform/thing;ThingServiceGetMonthlyGildingsArgs"
      }
      response: {
        py: "core_platform_thing.ttypes;GetMonthlyGildingsResponse"
        go: "github.snooguts.net/reddit/thing-api/go/thrift/core_platform/thing;GetMonthlyGildingsResponse"
      }
    };
  }

  //Return multi names (e.g. "/user/reddit/m/test") belong to the   accounts.
  rpc GetMultiNamesByAccounts(google.protobuf.Empty) returns (google.protobuf.Empty) {
    option (reddit.coreplatform.grpc_thrift.v1.thrift_aliases) = {
      request: {
        py: "core_platform_thing.ThingService;get_multi_names_by_accounts_args"
        go: "github.snooguts.net/reddit/thing-api/go/thrift/core_platform/thing;ThingServiceGetMultiNamesByAccountsArgs"
      }
      response: {
        py: "core_platform_thing.ttypes;GetMultiNamesByAccountsResponse"
        go: "github.snooguts.net/reddit/thing-api/go/thrift/core_platform/thing;GetMultiNamesByAccountsResponse"
      }
    };
  }

  //Return multi names (e.g. "/user/reddit/m/test") subscribed to by     the accounts
  rpc GetMultiSubscriptions(google.protobuf.Empty) returns (google.protobuf.Empty) {
    option (reddit.coreplatform.grpc_thrift.v1.thrift_aliases) = {
      response: {
        py: "core_platform_thing.ttypes;GetMultiSubscriptionsResponse"
        go: "github.snooguts.net/reddit/thing-api/go/thrift/core_platform/thing;GetMultiSubscriptionsResponse"
      }
    };
  }

  rpc GetMultis(google.protobuf.Empty) returns (google.protobuf.Empty) {
    option (reddit.coreplatform.grpc_thrift.v1.thrift_aliases) = {
      request: {
        py: "core_platform_thing.ThingService;get_multis_args"
        go: "github.snooguts.net/reddit/thing-api/go/thrift/core_platform/thing;ThingServiceGetMultisArgs"
      }
      response: {
        py: "core_platform_thing.ttypes;GetMultisResponse"
        go: "github.snooguts.net/reddit/thing-api/go/thrift/core_platform/thing;GetMultisResponse"
      }
    };
  }

  //Takes subreddit_id, returns a map of account_ids to the notification level  that the user has subscribed to.
  rpc GetNotificationLevelsForSubreddit(google.protobuf.Empty) returns (google.protobuf.Empty) {
    option (reddit.coreplatform.grpc_thrift.v1.thrift_aliases) = {
      request: {
        py: "core_platform_thing.ThingService;get_notification_levels_for_subreddit_args"
        go: "github.snooguts.net/reddit/thing-api/go/thrift/core_platform/thing;ThingServiceGetNotificationLevelsForSubredditArgs"
      }
      response: {
        py: "core_platform_thing.ttypes;GetNotificationLevelsForSubredditResponse"
        go: "github.snooguts.net/reddit/thing-api/go/thrift/core_platform/thing;GetNotificationLevelsForSubredditResponse"
      }
    };
  }

  //Return multi names (e.g. "/user/reddit/m/test") for all public     multis belonging to the given accounts
  rpc GetPublicMultiNamesByAccount(google.protobuf.Empty) returns (google.protobuf.Empty) {
    option (reddit.coreplatform.grpc_thrift.v1.thrift_aliases) = {
      request: {
        py: "core_platform_thing.ThingService;get_public_multi_names_by_account_args"
        go: "github.snooguts.net/reddit/thing-api/go/thrift/core_platform/thing;ThingServiceGetPublicMultiNamesByAccountArgs"
      }
      response: {
        py: "core_platform_thing.ttypes;GetPublicMultiNamesByAccountResponse"
        go: "github.snooguts.net/reddit/thing-api/go/thrift/core_platform/thing;GetPublicMultiNamesByAccountResponse"
      }
    };
  }

  //Return a list of quarantined subreddit ids the user has opted to be   visible.
  rpc GetQuarantineOptins(google.protobuf.Empty) returns (google.protobuf.Empty) {
    option (reddit.coreplatform.grpc_thrift.v1.thrift_aliases) = {
      request: {
        py: "core_platform_thing.ThingService;get_quarantine_optins_args"
        go: "github.snooguts.net/reddit/thing-api/go/thrift/core_platform/thing;ThingServiceGetQuarantineOptinsArgs"
      }
      response: {
        py: "core_platform_thing.ttypes;GetQuarantineOptinsResponse"
        go: "github.snooguts.net/reddit/thing-api/go/thrift/core_platform/thing;GetQuarantineOptinsResponse"
      }
    };
  }

  rpc GetRAllFilteredSubreddits(google.protobuf.Empty) returns (google.protobuf.Empty) {
    option (reddit.coreplatform.grpc_thrift.v1.thrift_aliases) = {
      request: {
        py: "core_platform_thing.ThingService;get_r_all_filtered_subreddits_args"
        go: "github.snooguts.net/reddit/thing-api/go/thrift/core_platform/thing;ThingServiceGetRAllFilteredSubredditsArgs"
      }
      response: {
        py: "core_platform_thing.ttypes;GetRAllFilteredSubredditsResponse"
        go: "github.snooguts.net/reddit/thing-api/go/thrift/core_platform/thing;GetRAllFilteredSubredditsResponse"
      }
    };
  }

  rpc GetRAllFilteredSubredditsDepr(google.protobuf.Empty) returns (google.protobuf.Empty) {
    option (reddit.coreplatform.grpc_thrift.v1.thrift_aliases) = {
      request: {
        py: "core_platform_thing.ThingService;get_r_all_filtered_subreddits_depr_args"
        go: "github.snooguts.net/reddit/thing-api/go/thrift/core_platform/thing;ThingServiceGetRAllFilteredSubredditsDeprArgs"
      }
      response: {
        py: "core_platform_thing.ttypes;GetRAllFilteredSubredditsResponse"
        go: "github.snooguts.net/reddit/thing-api/go/thrift/core_platform/thing;GetRAllFilteredSubredditsResponse"
      }
    };
  }

  rpc GetSocialLinks(google.protobuf.Empty) returns (google.protobuf.Empty) {
    option (reddit.coreplatform.grpc_thrift.v1.thrift_aliases) = {
      request: {
        py: "core_platform_thing.ThingService;get_social_links_args"
        go: "github.snooguts.net/reddit/thing-api/go/thrift/core_platform/thing;ThingServiceGetSocialLinksArgs"
      }
      response: {
        py: "core_platform_thing.ttypes;GetProfileSocialLinksResponse"
        go: "github.snooguts.net/reddit/thing-api/go/thrift/core_platform/thing;GetProfileSocialLinksResponse"
      }
    };
  }

  //Takes account_id, returns a map of subreddit_ids to the notification level  that the user has subscribed to.   If subreddit_ids is passed, returns a map of subreddit_ids to the notification level  for given list. When a subreddit id in the request is absent from the response,  it means that the notification level for this subreddit is the default value.  The default value varies depending on subreddit type and whether or not the user  is a subscriber to the subreddit. It's the caller's responsibility to figure out  which is the correct default value. The logic on r2 is at:  https://github.com/reddit/reddit-public/blob/a52a8084226ba723d1729a1c9db252f17971e7ee/r2/r2/models/subreddit.py#L1826L1829
  rpc GetSrNotificationLevelsForAccount(google.protobuf.Empty) returns (google.protobuf.Empty) {
    option (reddit.coreplatform.grpc_thrift.v1.thrift_aliases) = {
      request: {
        py: "core_platform_thing.ThingService;get_sr_notification_levels_for_account_args"
        go: "github.snooguts.net/reddit/thing-api/go/thrift/core_platform/thing;ThingServiceGetSrNotificationLevelsForAccountArgs"
      }
      response: {
        py: "core_platform_thing.ttypes;GetSRNotificationLevelsForAccountResponse"
        go: "github.snooguts.net/reddit/thing-api/go/thrift/core_platform/thing;GetSRNotificationLevelsForAccountResponse"
      }
    };
  }

  //THIS METHOD IS DEPRECATED: use the struct based method, get_subreddit_contributors_v2     Returns contributors of the given subreddit.
  rpc GetSubredditContributors(google.protobuf.Empty) returns (google.protobuf.Empty) {
    option (reddit.coreplatform.grpc_thrift.v1.thrift_aliases) = {
      request: {
        py: "core_platform_thing.ThingService;get_subreddit_contributors_args"
        go: "github.snooguts.net/reddit/thing-api/go/thrift/core_platform/thing;ThingServiceGetSubredditContributorsArgs"
      }
      response: {
        py: "core_platform_thing.ttypes;GetSubredditContributorsResponse"
        go: "github.snooguts.net/reddit/thing-api/go/thrift/core_platform/thing;GetSubredditContributorsResponse"
      }
    };
  }

  //Returns contributors of the given subreddit.     If account_id is set, filters only to that single contributors details, if that user exists.
  rpc GetSubredditContributorsV2(google.protobuf.Empty) returns (google.protobuf.Empty) {
    option (reddit.coreplatform.grpc_thrift.v1.thrift_aliases) = {
      request: {
        py: "core_platform_thing.ThingService;get_subreddit_contributors_v2_args"
        go: "github.snooguts.net/reddit/thing-api/go/thrift/core_platform/thing;ThingServiceGetSubredditContributorsV2Args"
      }
      response: {
        py: "core_platform_thing.ttypes;GetSubredditContributorsResponse"
        go: "github.snooguts.net/reddit/thing-api/go/thrift/core_platform/thing;GetSubredditContributorsResponse"
      }
    };
  }

  rpc GetSubredditDetails(google.protobuf.Empty) returns (google.protobuf.Empty) {
    option (reddit.coreplatform.grpc_thrift.v1.thrift_aliases) = {
      request: {
        py: "core_platform_thing.ThingService;get_subreddit_details_args"
        go: "github.snooguts.net/reddit/thing-api/go/thrift/core_platform/thing;ThingServiceGetSubredditDetailsArgs"
      }
      response: {
        py: "core_platform_thing.ttypes;GetSubredditDetailsResponse"
        go: "github.snooguts.net/reddit/thing-api/go/thrift/core_platform/thing;GetSubredditDetailsResponse"
      }
    };
  }

  rpc GetSubredditFlairedAccounts(google.protobuf.Empty) returns (google.protobuf.Empty) {
    option (reddit.coreplatform.grpc_thrift.v1.thrift_aliases) = {
      request: {
        py: "core_platform_thing.ThingService;get_subreddit_flaired_accounts_args"
        go: "github.snooguts.net/reddit/thing-api/go/thrift/core_platform/thing;ThingServiceGetSubredditFlairedAccountsArgs"
      }
      response: {
        py: "core_platform_thing.ttypes;GetSubredditFlairedAccountsResponse"
        go: "github.snooguts.net/reddit/thing-api/go/thrift/core_platform/thing;GetSubredditFlairedAccountsResponse"
      }
    };
  }

  rpc GetSubredditFlairedAccountsByAccounts(google.protobuf.Empty) returns (google.protobuf.Empty) {
    option (reddit.coreplatform.grpc_thrift.v1.thrift_aliases) = {
      request: {
        py: "core_platform_thing.ThingService;get_subreddit_flaired_accounts_by_accounts_args"
        go: "github.snooguts.net/reddit/thing-api/go/thrift/core_platform/thing;ThingServiceGetSubredditFlairedAccountsByAccountsArgs"
      }
      response: {
        py: "core_platform_thing.ttypes;GetSubredditFlairedAccountsByAccountsResponse"
        go: "github.snooguts.net/reddit/thing-api/go/thrift/core_platform/thing;GetSubredditFlairedAccountsByAccountsResponse"
      }
    };
  }

  rpc GetSubredditIds(google.protobuf.Empty) returns (google.protobuf.Empty) {
    option (reddit.coreplatform.grpc_thrift.v1.thrift_aliases) = {
      request: {
        py: "core_platform_thing.ThingService;get_subreddit_ids_args"
        go: "github.snooguts.net/reddit/thing-api/go/thrift/core_platform/thing;ThingServiceGetSubredditIdsArgs"
      }
      response: {
        py: "core_platform_thing.ttypes;GetSubredditIdsResponse"
        go: "github.snooguts.net/reddit/thing-api/go/thrift/core_platform/thing;GetSubredditIdsResponse"
      }
    };
  }

  rpc GetSubredditIdsDepr(google.protobuf.Empty) returns (google.protobuf.Empty) {
    option (reddit.coreplatform.grpc_thrift.v1.thrift_aliases) = {
      request: {
        py: "core_platform_thing.ThingService;get_subreddit_ids_depr_args"
        go: "github.snooguts.net/reddit/thing-api/go/thrift/core_platform/thing;ThingServiceGetSubredditIdsDeprArgs"
      }
      response: {
        py: "core_platform_thing.ttypes;GetSubredditIdsResponse"
        go: "github.snooguts.net/reddit/thing-api/go/thrift/core_platform/thing;GetSubredditIdsResponse"
      }
    };
  }

  rpc GetSubredditModerators(google.protobuf.Empty) returns (google.protobuf.Empty) {
    option (reddit.coreplatform.grpc_thrift.v1.thrift_aliases) = {
      request: {
        py: "core_platform_thing.ThingService;get_subreddit_moderators_args"
        go: "github.snooguts.net/reddit/thing-api/go/thrift/core_platform/thing;ThingServiceGetSubredditModeratorsArgs"
      }
      response: {
        py: "core_platform_thing.ttypes;GetSubredditModeratorsResponse"
        go: "github.snooguts.net/reddit/thing-api/go/thrift/core_platform/thing;GetSubredditModeratorsResponse"
      }
    };
  }

  rpc GetSubredditModeratorsInvited(google.protobuf.Empty) returns (google.protobuf.Empty) {
    option (reddit.coreplatform.grpc_thrift.v1.thrift_aliases) = {
      request: {
        py: "core_platform_thing.ThingService;get_subreddit_moderators_invited_args"
        go: "github.snooguts.net/reddit/thing-api/go/thrift/core_platform/thing;ThingServiceGetSubredditModeratorsInvitedArgs"
      }
      response: {
        py: "core_platform_thing.ttypes;GetSubredditModeratorsInvitedResponse"
        go: "github.snooguts.net/reddit/thing-api/go/thrift/core_platform/thing;GetSubredditModeratorsInvitedResponse"
      }
    };
  }

  rpc GetSubredditRules(google.protobuf.Empty) returns (google.protobuf.Empty) {
    option (reddit.coreplatform.grpc_thrift.v1.thrift_aliases) = {
      request: {
        py: "core_platform_thing.ThingService;get_subreddit_rules_args"
        go: "github.snooguts.net/reddit/thing-api/go/thrift/core_platform/thing;ThingServiceGetSubredditRulesArgs"
      }
      response: {
        py: "core_platform_thing.ttypes;GetSubredditRulesResponse"
        go: "github.snooguts.net/reddit/thing-api/go/thrift/core_platform/thing;GetSubredditRulesResponse"
      }
    };
  }

  rpc GetSubreddits(google.protobuf.Empty) returns (google.protobuf.Empty) {
    option (reddit.coreplatform.grpc_thrift.v1.thrift_aliases) = {
      request: {
        py: "core_platform_thing.ThingService;get_subreddits_args"
        go: "github.snooguts.net/reddit/thing-api/go/thrift/core_platform/thing;ThingServiceGetSubredditsArgs"
      }
      response: {
        py: "core_platform_thing.ttypes;GetSubredditsResponse"
        go: "github.snooguts.net/reddit/thing-api/go/thrift/core_platform/thing;GetSubredditsResponse"
      }
    };
  }

  rpc GetSubredditsDepr(google.protobuf.Empty) returns (google.protobuf.Empty) {
    option (reddit.coreplatform.grpc_thrift.v1.thrift_aliases) = {
      request: {
        py: "core_platform_thing.ThingService;get_subreddits_depr_args"
        go: "github.snooguts.net/reddit/thing-api/go/thrift/core_platform/thing;ThingServiceGetSubredditsDeprArgs"
      }
      response: {
        py: "core_platform_thing.ttypes;GetSubredditsResponse"
        go: "github.snooguts.net/reddit/thing-api/go/thrift/core_platform/thing;GetSubredditsResponse"
      }
    };
  }

  rpc GetSubredditsNotUserByDate(google.protobuf.Empty) returns (google.protobuf.Empty) {
    option (reddit.coreplatform.grpc_thrift.v1.thrift_aliases) = {
      request: {
        py: "core_platform_thing.ThingService;get_subreddits_not_user_by_date_args"
        go: "github.snooguts.net/reddit/thing-api/go/thrift/core_platform/thing;ThingServiceGetSubredditsNotUserByDateArgs"
      }
      response: {
        py: "core_platform_thing.ttypes;GetSubredditsNotUserByDateResponse"
        go: "github.snooguts.net/reddit/thing-api/go/thrift/core_platform/thing;GetSubredditsNotUserByDateResponse"
      }
    };
  }

  rpc GetSubredditsWithNotifications(google.protobuf.Empty) returns (google.protobuf.Empty) {
    option (reddit.coreplatform.grpc_thrift.v1.thrift_aliases) = {
      request: {
        py: "core_platform_thing.ThingService;get_subreddits_with_notifications_args"
        go: "github.snooguts.net/reddit/thing-api/go/thrift/core_platform/thing;ThingServiceGetSubredditsWithNotificationsArgs"
      }
      response: {
        py: "core_platform_thing.ttypes;GetSubredditsWithNotificationsResponse"
        go: "github.snooguts.net/reddit/thing-api/go/thrift/core_platform/thing;GetSubredditsWithNotificationsResponse"
      }
    };
  }

  rpc GetSubscribedAccountIds(google.protobuf.Empty) returns (google.protobuf.Empty) {
    option (reddit.coreplatform.grpc_thrift.v1.thrift_aliases) = {
      request: {
        py: "core_platform_thing.ThingService;get_subscribed_account_ids_args"
        go: "github.snooguts.net/reddit/thing-api/go/thrift/core_platform/thing;ThingServiceGetSubscribedAccountIdsArgs"
      }
      response: {
        py: "core_platform_thing.ttypes;GetSubscribedAccountIdsResponse"
        go: "github.snooguts.net/reddit/thing-api/go/thrift/core_platform/thing;GetSubscribedAccountIdsResponse"
      }
    };
  }

  rpc GetSubscribedSubreddits(google.protobuf.Empty) returns (google.protobuf.Empty) {
    option (reddit.coreplatform.grpc_thrift.v1.thrift_aliases) = {
      request: {
        py: "core_platform_thing.ThingService;get_subscribed_subreddits_args"
        go: "github.snooguts.net/reddit/thing-api/go/thrift/core_platform/thing;ThingServiceGetSubscribedSubredditsArgs"
      }
      response: {
        py: "core_platform_thing.ttypes;GetSubscribedSubredditsResponse"
        go: "github.snooguts.net/reddit/thing-api/go/thrift/core_platform/thing;GetSubscribedSubredditsResponse"
      }
    };
  }

  rpc GetTrendingSubreddits(google.protobuf.Empty) returns (google.protobuf.Empty) {
    option (reddit.coreplatform.grpc_thrift.v1.thrift_aliases) = {
      response: {
        py: "core_platform_thing.ttypes;GetTrendingSubredditsResponse"
        go: "github.snooguts.net/reddit/thing-api/go/thrift/core_platform/thing;GetTrendingSubredditsResponse"
      }
    };
  }

  rpc GetTrophies(google.protobuf.Empty) returns (google.protobuf.Empty) {
    option (reddit.coreplatform.grpc_thrift.v1.thrift_aliases) = {
      request: {
        py: "core_platform_thing.ThingService;get_trophies_args"
        go: "github.snooguts.net/reddit/thing-api/go/thrift/core_platform/thing;ThingServiceGetTrophiesArgs"
      }
      response: {
        py: "core_platform_thing.ttypes;GetTrophiesResponse"
        go: "github.snooguts.net/reddit/thing-api/go/thrift/core_platform/thing;GetTrophiesResponse"
      }
    };
  }

  rpc GetVideoCounts(google.protobuf.Empty) returns (google.protobuf.Empty) {
    option (reddit.coreplatform.grpc_thrift.v1.thrift_aliases) = {
      request: {
        py: "core_platform_thing.ThingService;get_video_counts_args"
        go: "github.snooguts.net/reddit/thing-api/go/thrift/core_platform/thing;ThingServiceGetVideoCountsArgs"
      }
      response: {
        py: "core_platform_thing.ttypes;GetVideoCountsResponse"
        go: "github.snooguts.net/reddit/thing-api/go/thrift/core_platform/thing;GetVideoCountsResponse"
      }
    };
  }

  rpc GetViewableStatus(google.protobuf.Empty) returns (google.protobuf.Empty) {
    option (reddit.coreplatform.grpc_thrift.v1.thrift_aliases) = {
      request: {
        py: "core_platform_thing.ThingService;get_viewable_status_args"
        go: "github.snooguts.net/reddit/thing-api/go/thrift/core_platform/thing;ThingServiceGetViewableStatusArgs"
      }
      response: {
        py: "core_platform_thing.ttypes;GetSubredditIdsViewableStatusResponse"
        go: "github.snooguts.net/reddit/thing-api/go/thrift/core_platform/thing;GetSubredditIdsViewableStatusResponse"
      }
    };
  }

  rpc IncrCommentProps(google.protobuf.Empty) returns (google.protobuf.Empty) {
    option (reddit.coreplatform.grpc_thrift.v1.thrift_aliases) = {
      request: {
        py: "core_platform_thing.ThingService;incr_comment_props_args"
        go: "github.snooguts.net/reddit/thing-api/go/thrift/core_platform/thing;ThingServiceIncrCommentPropsArgs"
      }
      response: {
        py: "core_platform_thing.ttypes;IncrCommentPropsResponse"
        go: "github.snooguts.net/reddit/thing-api/go/thrift/core_platform/thing;IncrCommentPropsResponse"
      }
    };
  }

  rpc IncrIdentityKarma(google.protobuf.Empty) returns (google.protobuf.Empty) {
    option (reddit.coreplatform.grpc_thrift.v1.thrift_aliases) = {
      request: {
        py: "core_platform_thing.ThingService;incr_identity_karma_args"
        go: "github.snooguts.net/reddit/thing-api/go/thrift/core_platform/thing;ThingServiceIncrIdentityKarmaArgs"
      }
      response: {
        py: "core_platform_thing.ttypes;IncrIdentityKarmaResponse"
        go: "github.snooguts.net/reddit/thing-api/go/thrift/core_platform/thing;IncrIdentityKarmaResponse"
      }
    };
  }

  rpc IncrIdentityProps(google.protobuf.Empty) returns (google.protobuf.Empty) {
    option (reddit.coreplatform.grpc_thrift.v1.thrift_aliases) = {
      request: {
        py: "core_platform_thing.ThingService;incr_identity_props_args"
        go: "github.snooguts.net/reddit/thing-api/go/thrift/core_platform/thing;ThingServiceIncrIdentityPropsArgs"
      }
      response: {
        py: "core_platform_thing.ttypes;IncrIdentityPropsResponse"
        go: "github.snooguts.net/reddit/thing-api/go/thrift/core_platform/thing;IncrIdentityPropsResponse"
      }
    };
  }

  rpc IncrLinkProps(google.protobuf.Empty) returns (google.protobuf.Empty) {
    option (reddit.coreplatform.grpc_thrift.v1.thrift_aliases) = {
      request: {
        py: "core_platform_thing.ThingService;incr_link_props_args"
        go: "github.snooguts.net/reddit/thing-api/go/thrift/core_platform/thing;ThingServiceIncrLinkPropsArgs"
      }
      response: {
        py: "core_platform_thing.ttypes;IncrLinkPropsResponse"
        go: "github.snooguts.net/reddit/thing-api/go/thrift/core_platform/thing;IncrLinkPropsResponse"
      }
    };
  }

  //Takes one message_id and each property name is an individual argument,        returns map of new count by prop name.
  rpc IncrMessageProps(google.protobuf.Empty) returns (google.protobuf.Empty) {
    option (reddit.coreplatform.grpc_thrift.v1.thrift_aliases) = {
      request: {
        py: "core_platform_thing.ThingService;incr_message_props_args"
        go: "github.snooguts.net/reddit/thing-api/go/thrift/core_platform/thing;ThingServiceIncrMessagePropsArgs"
      }
      response: {
        py: "core_platform_thing.ttypes;IncrMessagePropsResponse"
        go: "github.snooguts.net/reddit/thing-api/go/thrift/core_platform/thing;IncrMessagePropsResponse"
      }
    };
  }

  rpc IncrSubredditProps(google.protobuf.Empty) returns (google.protobuf.Empty) {
    option (reddit.coreplatform.grpc_thrift.v1.thrift_aliases) = {
      request: {
        py: "core_platform_thing.ThingService;incr_subreddit_props_args"
        go: "github.snooguts.net/reddit/thing-api/go/thrift/core_platform/thing;ThingServiceIncrSubredditPropsArgs"
      }
      response: {
        py: "core_platform_thing.ttypes;IncrSubredditPropsResponse"
        go: "github.snooguts.net/reddit/thing-api/go/thrift/core_platform/thing;IncrSubredditPropsResponse"
      }
    };
  }

  rpc IsValidAccountName(google.protobuf.Empty) returns (google.protobuf.Empty) {
    option (reddit.coreplatform.grpc_thrift.v1.thrift_aliases) = {
      request: {
        py: "core_platform_thing.ThingService;is_valid_account_name_args"
        go: "github.snooguts.net/reddit/thing-api/go/thrift/core_platform/thing;ThingServiceIsValidAccountNameArgs"
      }
      response: {
        py: "core_platform_thing.ttypes;IsValidAccountNameResponse"
        go: "github.snooguts.net/reddit/thing-api/go/thrift/core_platform/thing;IsValidAccountNameResponse"
      }
    };
  }

  rpc ReorderSocialLinks(google.protobuf.Empty) returns (google.protobuf.Empty) {
    option (reddit.coreplatform.grpc_thrift.v1.thrift_aliases) = {
      request: {
        py: "core_platform_thing.ThingService;reorder_social_links_args"
        go: "github.snooguts.net/reddit/thing-api/go/thrift/core_platform/thing;ThingServiceReorderSocialLinksArgs"
      }
      response: {
        py: "core_platform_thing.ttypes;ReorderProfileSocialLinksResponse"
        go: "github.snooguts.net/reddit/thing-api/go/thrift/core_platform/thing;ReorderProfileSocialLinksResponse"
      }
    };
  }

  rpc UpdateAccountGender(google.protobuf.Empty) returns (google.protobuf.Empty) {
    option (reddit.coreplatform.grpc_thrift.v1.thrift_aliases) = {
      request: {
        py: "core_platform_thing.ThingService;update_account_gender_args"
        go: "github.snooguts.net/reddit/thing-api/go/thrift/core_platform/thing;ThingServiceUpdateAccountGenderArgs"
      }
      response: {
        py: "core_platform_thing.ttypes;UpdateAccountGenderByAccountIdResponse"
        go: "github.snooguts.net/reddit/thing-api/go/thrift/core_platform/thing;UpdateAccountGenderByAccountIdResponse"
      }
    };
  }

  rpc UpdateComment(google.protobuf.Empty) returns (google.protobuf.Empty) {
    option (reddit.coreplatform.grpc_thrift.v1.thrift_aliases) = {
      request: {
        py: "core_platform_thing.ThingService;update_comment_args"
        go: "github.snooguts.net/reddit/thing-api/go/thrift/core_platform/thing;ThingServiceUpdateCommentArgs"
      }
      response: {
        py: "core_platform_thing.ttypes;UpdateCommentResponse"
        go: "github.snooguts.net/reddit/thing-api/go/thrift/core_platform/thing;UpdateCommentResponse"
      }
    };
  }

  rpc UpdateIdentity(google.protobuf.Empty) returns (google.protobuf.Empty) {
    option (reddit.coreplatform.grpc_thrift.v1.thrift_aliases) = {
      request: {
        py: "core_platform_thing.ThingService;update_identity_args"
        go: "github.snooguts.net/reddit/thing-api/go/thrift/core_platform/thing;ThingServiceUpdateIdentityArgs"
      }
      response: {
        py: "core_platform_thing.ttypes;UpdateIdentityResponse"
        go: "github.snooguts.net/reddit/thing-api/go/thrift/core_platform/thing;UpdateIdentityResponse"
      }
    };
  }

  rpc UpdateLink(google.protobuf.Empty) returns (google.protobuf.Empty) {
    option (reddit.coreplatform.grpc_thrift.v1.thrift_aliases) = {
      request: {
        py: "core_platform_thing.ThingService;update_link_args"
        go: "github.snooguts.net/reddit/thing-api/go/thrift/core_platform/thing;ThingServiceUpdateLinkArgs"
      }
      response: {
        py: "core_platform_thing.ttypes;UpdateLinkResponse"
        go: "github.snooguts.net/reddit/thing-api/go/thrift/core_platform/thing;UpdateLinkResponse"
      }
    };
  }

  rpc UpdateMessage(google.protobuf.Empty) returns (google.protobuf.Empty) {
    option (reddit.coreplatform.grpc_thrift.v1.thrift_aliases) = {
      request: {
        py: "core_platform_thing.ThingService;update_message_args"
        go: "github.snooguts.net/reddit/thing-api/go/thrift/core_platform/thing;ThingServiceUpdateMessageArgs"
      }
      response: {
        py: "core_platform_thing.ttypes;UpdateMessageResponse"
        go: "github.snooguts.net/reddit/thing-api/go/thrift/core_platform/thing;UpdateMessageResponse"
      }
    };
  }

  rpc UpdateSocialLinks(google.protobuf.Empty) returns (google.protobuf.Empty) {
    option (reddit.coreplatform.grpc_thrift.v1.thrift_aliases) = {
      request: {
        py: "core_platform_thing.ThingService;update_social_links_args"
        go: "github.snooguts.net/reddit/thing-api/go/thrift/core_platform/thing;ThingServiceUpdateSocialLinksArgs"
      }
      response: {
        py: "core_platform_thing.ttypes;UpdateProfileSocialLinksResponse"
        go: "github.snooguts.net/reddit/thing-api/go/thrift/core_platform/thing;UpdateProfileSocialLinksResponse"
      }
    };
  }

  //Modifies SubredditNotificationLevels per subreddit for an account.  Setting the level to null removes the notification level.
  rpc UpdateSrNotificationLevel(google.protobuf.Empty) returns (google.protobuf.Empty) {
    option (reddit.coreplatform.grpc_thrift.v1.thrift_aliases) = {
      request: {
        py: "core_platform_thing.ThingService;update_sr_notification_level_args"
        go: "github.snooguts.net/reddit/thing-api/go/thrift/core_platform/thing;ThingServiceUpdateSrNotificationLevelArgs"
      }
      response: {
        py: "core_platform_thing.ttypes;UpdateSubredditNotificationLevelResponse"
        go: "github.snooguts.net/reddit/thing-api/go/thrift/core_platform/thing;UpdateSubredditNotificationLevelResponse"
      }
    };
  }

  rpc UpdateSubreddit(google.protobuf.Empty) returns (google.protobuf.Empty) {
    option (reddit.coreplatform.grpc_thrift.v1.thrift_aliases) = {
      request: {
        py: "core_platform_thing.ThingService;update_subreddit_args"
        go: "github.snooguts.net/reddit/thing-api/go/thrift/core_platform/thing;ThingServiceUpdateSubredditArgs"
      }
      response: {
        py: "core_platform_thing.ttypes;UpdateSubredditResponse"
        go: "github.snooguts.net/reddit/thing-api/go/thrift/core_platform/thing;UpdateSubredditResponse"
      }
    };
  }
}

message AddCommentVisitErrorDetails {
  ThingErrorType type = 10;

  oneof rpc_error {
    NotAuthorizedError not_authorized = 1;

    InvalidIdsError invalid_ids = 2;
  }
}

message CreateCommentErrorDetails {
  ThingErrorType type = 10;

  oneof rpc_error {
    NotAuthorizedError not_authorized = 1;

    InvalidIdsError invalid_ids = 2;
  }
}

message CreateIdentityErrorDetails {
  ThingErrorType type = 10;

  oneof rpc_error {
    NotAuthorizedError not_authorized = 1;

    InvalidIdsError invalid_ids = 2;

    IdentityNameExistsError name_exists = 3;

    IdentityIDExistsError id_exists = 4;
  }
}

message CreateLinkErrorDetails {
  ThingErrorType type = 10;

  oneof rpc_error {
    NotAuthorizedError not_authorized = 1;

    InvalidIdsError invalid_ids = 2;
  }
}

message CreateMessageErrorDetails {
  ThingErrorType type = 10;

  oneof rpc_error {
    NotAuthorizedError not_authorized = 1;

    InvalidIdsError invalid_ids = 2;
  }
}

message CreateSocialLinksErrorDetails {
  ThingErrorType type = 10;

  oneof rpc_error {
    NotAuthorizedError not_authorized = 1;

    InvalidRequestError invalid_request = 2;
  }
}

message CreateSubredditErrorDetails {
  ThingErrorType type = 10;

  oneof rpc_error {
    NotAuthorizedError not_authorized = 1;

    InvalidIdsError invalid_ids = 2;

    SubredditExistsError subreddit_exists = 3;
  }
}

message DeletePiiDataErrorDetails {
  ThingErrorType type = 10;

  oneof rpc_error {
    NotAuthorizedError not_authorized = 1;
  }
}

message DeleteSocialLinksErrorDetails {
  ThingErrorType type = 10;

  oneof rpc_error {
    NotAuthorizedError not_authorized = 1;

    InvalidRequestError invalid_request = 2;
  }
}

message GetAccountHasSeenFlagsErrorDetails {
  ThingErrorType type = 10;

  oneof rpc_error {
    NotAuthorizedError not_authorized = 1;

    InvalidIdsError invalid_ids = 2;
  }
}

message GetAccountIdsBannedStatusErrorDetails {
  ThingErrorType type = 10;

  oneof rpc_error {
    NotAuthorizedError not_authorized = 1;

    InvalidIdsError invalid_ids = 2;

    InvalidRequestError invalid_request = 3;
  }
}

message GetAccountIdsByEmailErrorDetails {
  ThingErrorType type = 10;

  oneof rpc_error {
    InvalidRequestError invalid_request = 1;

    NotAuthorizedError not_authorized = 2;
  }
}

message GetAccountIdsDeprErrorDetails {
  ThingErrorType type = 10;

  oneof rpc_error {
    NotAuthorizedError not_authorized = 1;
  }
}

message GetAccountIdsErrorDetails {
  ThingErrorType type = 10;

  oneof rpc_error {
    NotAuthorizedError not_authorized = 1;
  }
}

message GetAccountflairsBatchErrorDetails {
  ThingErrorType type = 10;

  oneof rpc_error {
    NotAuthorizedError not_authorized = 1;

    InvalidIdsError invalid_ids = 2;

    InvalidRequestError invalid_request = 3;
  }
}

message GetAccountflairsErrorDetails {
  ThingErrorType type = 10;

  oneof rpc_error {
    NotAuthorizedError not_authorized = 1;

    InvalidIdsError invalid_ids = 2;

    InvalidRequestError invalid_request = 3;
  }
}

message GetAccountsDeprErrorDetails {
  ThingErrorType type = 10;

  oneof rpc_error {
    NotAuthorizedError not_authorized = 1;

    InvalidIdsError invalid_ids = 2;

    InvalidRequestError invalid_request = 3;

    TypeTransformationError invalid_type = 4;
  }
}

message GetAccountsErrorDetails {
  ThingErrorType type = 10;

  oneof rpc_error {
    NotAuthorizedError not_authorized = 1;

    InvalidIdsError invalid_ids = 2;

    InvalidRequestError invalid_request = 3;

    TypeTransformationError invalid_type = 4;
  }
}

message GetActiveSubscriptionsErrorDetails {
  ThingErrorType type = 10;

  oneof rpc_error {
    NotAuthorizedError not_authorized = 1;

    InvalidIdsError invalid_ids = 2;

    InvalidRequestError invalid_request = 3;
  }
}

message GetAllowlistedAccountIdsErrorDetails {
  ThingErrorType type = 10;

  oneof rpc_error {
    NotAuthorizedError not_authorized = 1;

    InvalidIdsError invalid_ids = 2;
  }
}

message GetBannedStatusErrorDetails {
  ThingErrorType type = 10;

  oneof rpc_error {
    NotAuthorizedError not_authorized = 1;

    InvalidIdsError invalid_ids = 2;

    InvalidRequestError invalid_request = 3;
  }
}

message GetBlockedAccountIdsDeprErrorDetails {
  ThingErrorType type = 10;

  oneof rpc_error {
    NotAuthorizedError not_authorized = 1;

    InvalidIdsError invalid_ids = 2;
  }
}

message GetBlockedAccountIdsErrorDetails {
  ThingErrorType type = 10;

  oneof rpc_error {
    NotAuthorizedError not_authorized = 1;

    InvalidIdsError invalid_ids = 2;
  }
}

message GetBlockedByAccountIdsErrorDetails {
  ThingErrorType type = 10;

  oneof rpc_error {
    NotAuthorizedError not_authorized = 1;

    InvalidIdsError invalid_ids = 2;
  }
}

message GetBlockedIdsForAccountIdsErrorDetails {
  ThingErrorType type = 10;

  oneof rpc_error {
    NotAuthorizedError not_authorized = 1;

    InvalidIdsError invalid_ids = 2;
  }
}

message GetBlockerAccountIdsErrorDetails {
  ThingErrorType type = 10;

  oneof rpc_error {
    NotAuthorizedError not_authorized = 1;

    InvalidIdsError invalid_ids = 2;
  }
}

message GetCommentIdsByAuthorAndParentAuthorErrorDetails {
  ThingErrorType type = 10;

  oneof rpc_error {
    NotAuthorizedError not_authorized = 1;

    InvalidIdsError invalid_ids = 2;

    InvalidRequestError invalid_request = 3;

    InvalidPager invalid_pager = 4;
  }
}

message GetCommentIdsForLinkErrorDetails {
  ThingErrorType type = 10;

  oneof rpc_error {
    NotAuthorizedError not_authorized = 1;

    InvalidIdsError invalid_ids = 2;

    InvalidRequestError invalid_request = 3;

    InvalidPager invalid_pager = 4;
  }
}

message GetCommentModInfoErrorDetails {
  ThingErrorType type = 10;

  oneof rpc_error {
    NotAuthorizedError not_authorized = 1;

    InvalidIdsError invalid_ids = 2;

    InvalidRequestError invalid_request = 3;
  }
}

message GetCommentReportsErrorDetails {
  ThingErrorType type = 10;

  oneof rpc_error {
    NotAuthorizedError not_authorized = 1;

    InvalidIdsError invalid_ids = 2;

    InvalidRequestError invalid_request = 3;
  }
}

message GetCommentSavesErrorDetails {
  ThingErrorType type = 10;

  oneof rpc_error {
    NotAuthorizedError not_authorized = 1;

    InvalidIdsError invalid_ids = 2;

    InvalidRequestError invalid_request = 3;
  }
}

message GetCommentVisitsErrorDetails {
  ThingErrorType type = 10;

  oneof rpc_error {
    NotAuthorizedError not_authorized = 1;

    InvalidIdsError invalid_ids = 2;
  }
}

message GetCommentVotesErrorDetails {
  ThingErrorType type = 10;

  oneof rpc_error {
    NotAuthorizedError not_authorized = 1;

    InvalidIdsError invalid_ids = 2;

    InvalidRequestError invalid_request = 3;
  }
}

message GetCommentsDeprErrorDetails {
  ThingErrorType type = 10;

  oneof rpc_error {
    NotAuthorizedError not_authorized = 1;

    InvalidIdsError invalid_ids = 2;

    InvalidRequestError invalid_request = 3;

    TypeTransformationError invalid_type = 4;
  }
}

message GetCommentsErrorDetails {
  ThingErrorType type = 10;

  oneof rpc_error {
    NotAuthorizedError not_authorized = 1;

    InvalidIdsError invalid_ids = 2;

    InvalidRequestError invalid_request = 3;

    TypeTransformationError invalid_type = 4;
  }
}

message GetContributorStatusByAccountIdErrorDetails {
  ThingErrorType type = 10;

  oneof rpc_error {
    NotAuthorizedError not_authorized = 1;

    InvalidIdsError invalid_ids = 2;

    InvalidRequestError invalid_request = 3;
  }
}

message GetContributorStatusErrorDetails {
  ThingErrorType type = 10;

  oneof rpc_error {
    NotAuthorizedError not_authorized = 1;

    InvalidIdsError invalid_ids = 2;

    InvalidRequestError invalid_request = 3;
  }
}

message GetCreatedSubredditIdsErrorDetails {
  ThingErrorType type = 10;

  oneof rpc_error {
    NotAuthorizedError not_authorized = 1;

    InvalidIdsError invalid_ids = 2;

    InvalidRequestError invalid_request = 3;
  }
}

message GetFavoriteSubredditsErrorDetails {
  ThingErrorType type = 10;

  oneof rpc_error {
    NotAuthorizedError not_authorized = 1;

    InvalidIdsError invalid_ids = 2;

    InvalidRequestError invalid_request = 3;
  }
}

message GetFavoritedMultiredditsErrorDetails {
  ThingErrorType type = 10;

  oneof rpc_error {
    NotAuthorizedError not_authorized = 1;
  }
}

message GetFeaturedAnnouncementsErrorDetails {
  ThingErrorType type = 10;

  oneof rpc_error {
    NotAuthorizedError not_authorized = 1;
  }
}

message GetFeaturedLiveEventsErrorDetails {
  ThingErrorType type = 10;

  oneof rpc_error {
    NotAuthorizedError not_authorized = 1;
  }
}

message GetFlairTemplatesErrorDetails {
  ThingErrorType type = 10;

  oneof rpc_error {
    NotAuthorizedError not_authorized = 1;

    InvalidIdsError invalid_ids = 2;
  }
}

message GetFriendAccountIdsErrorDetails {
  ThingErrorType type = 10;

  oneof rpc_error {
    NotAuthorizedError not_authorized = 1;

    InvalidIdsError invalid_ids = 2;
  }
}

message GetGenderByAccountIdErrorDetails {
  ThingErrorType type = 10;

  oneof rpc_error {
    InvalidRequestError invalid_request = 1;

    NotAuthorizedError not_authorized = 2;
  }
}

message GetGildedLinksErrorDetails {
  ThingErrorType type = 10;

  oneof rpc_error {
    NotAuthorizedError not_authorized = 1;

    InvalidIdsError invalid_ids = 2;

    InvalidRequestError invalid_request = 3;
  }
}

message GetIdentitiesDeprErrorDetails {
  ThingErrorType type = 10;

  oneof rpc_error {
    NotAuthorizedError not_authorized = 1;

    InvalidIdsError invalid_ids = 2;

    InvalidRequestError invalid_request = 3;

    TypeTransformationError invalid_type = 4;
  }
}

message GetIdentitiesErrorDetails {
  ThingErrorType type = 10;

  oneof rpc_error {
    NotAuthorizedError not_authorized = 1;

    InvalidIdsError invalid_ids = 2;

    InvalidRequestError invalid_request = 3;

    TypeTransformationError invalid_type = 4;
  }
}

message GetIdentityDeprErrorDetails {
  ThingErrorType type = 10;

  oneof rpc_error {
    NotAuthorizedError not_authorized = 1;

    InvalidIdsError invalid_ids = 2;

    NotFoundError not_found = 3;

    TypeTransformationError invalid_type = 4;
  }
}

message GetIdentityErrorDetails {
  ThingErrorType type = 10;

  oneof rpc_error {
    NotAuthorizedError not_authorized = 1;

    InvalidIdsError invalid_ids = 2;

    NotFoundError not_found = 3;

    TypeTransformationError invalid_type = 4;
  }
}

message GetIdentityLastModifiedErrorDetails {
  ThingErrorType type = 10;

  oneof rpc_error {
    NotAuthorizedError not_authorized = 1;

    InvalidIdsError invalid_ids = 2;
  }
}

message GetInvitedModeratorPermissionsByAccountIdsErrorDetails {
  ThingErrorType type = 10;

  oneof rpc_error {
    NotAuthorizedError not_authorized = 1;

    InvalidIdsError invalid_ids = 2;

    InvalidRequestError invalid_request = 3;
  }
}

message GetLinkHidesDeprErrorDetails {
  ThingErrorType type = 10;

  oneof rpc_error {
    NotAuthorizedError not_authorized = 1;

    InvalidIdsError invalid_ids = 2;

    InvalidRequestError invalid_request = 3;
  }
}

message GetLinkHidesErrorDetails {
  ThingErrorType type = 10;

  oneof rpc_error {
    NotAuthorizedError not_authorized = 1;

    InvalidIdsError invalid_ids = 2;

    InvalidRequestError invalid_request = 3;
  }
}

message GetLinkIdsForUrlAndSrErrorDetails {
  ThingErrorType type = 10;

  oneof rpc_error {
    NotAuthorizedError not_authorized = 1;

    InvalidIdsError invalid_ids = 2;

    InvalidRequestError invalid_request = 3;
  }
}

message GetLinkModInfoErrorDetails {
  ThingErrorType type = 10;

  oneof rpc_error {
    NotAuthorizedError not_authorized = 1;

    InvalidIdsError invalid_ids = 2;

    InvalidRequestError invalid_request = 3;
  }
}

message GetLinkReportsErrorDetails {
  ThingErrorType type = 10;

  oneof rpc_error {
    NotAuthorizedError not_authorized = 1;

    InvalidIdsError invalid_ids = 2;

    InvalidRequestError invalid_request = 3;
  }
}

message GetLinkSavesErrorDetails {
  ThingErrorType type = 10;

  oneof rpc_error {
    NotAuthorizedError not_authorized = 1;

    InvalidIdsError invalid_ids = 2;

    InvalidRequestError invalid_request = 3;
  }
}

message GetLinkVisitsErrorDetails {
  ThingErrorType type = 10;

  oneof rpc_error {
    NotAuthorizedError not_authorized = 1;

    InvalidIdsError invalid_ids = 2;

    InvalidRequestError invalid_request = 3;
  }
}

message GetLinkVotesDeprErrorDetails {
  ThingErrorType type = 10;

  oneof rpc_error {
    NotAuthorizedError not_authorized = 1;

    InvalidIdsError invalid_ids = 2;

    InvalidRequestError invalid_request = 3;
  }
}

message GetLinkVotesErrorDetails {
  ThingErrorType type = 10;

  oneof rpc_error {
    NotAuthorizedError not_authorized = 1;

    InvalidIdsError invalid_ids = 2;

    InvalidRequestError invalid_request = 3;
  }
}

message GetLinksDeprErrorDetails {
  ThingErrorType type = 10;

  oneof rpc_error {
    NotAuthorizedError not_authorized = 1;

    InvalidIdsError invalid_ids = 2;

    InvalidRequestError invalid_request = 3;

    TypeTransformationError invalid_type = 4;
  }
}

message GetLinksErrorDetails {
  ThingErrorType type = 10;

  oneof rpc_error {
    NotAuthorizedError not_authorized = 1;

    InvalidIdsError invalid_ids = 2;

    InvalidRequestError invalid_request = 3;

    TypeTransformationError invalid_type = 4;
  }
}

message GetLiveEventErrorDetails {
  ThingErrorType type = 10;

  oneof rpc_error {
    NotAuthorizedError not_authorized = 1;
  }
}

message GetMessagesErrorDetails {
  ThingErrorType type = 10;

  oneof rpc_error {
    NotAuthorizedError not_authorized = 1;

    InvalidIdsError invalid_ids = 2;

    InvalidRequestError invalid_request = 3;

    TypeTransformationError invalid_type = 4;
  }
}

message GetModeratedSubredditsErrorDetails {
  ThingErrorType type = 10;

  oneof rpc_error {
    NotAuthorizedError not_authorized = 1;

    InvalidIdsError invalid_ids = 2;
  }
}

message GetModeratedSubredditsWithPermissionsErrorDetails {
  ThingErrorType type = 10;

  oneof rpc_error {
    NotAuthorizedError not_authorized = 1;

    InvalidIdsError invalid_ids = 2;
  }
}

message GetModeratorPermissionsByAccountIdsErrorDetails {
  ThingErrorType type = 10;

  oneof rpc_error {
    NotAuthorizedError not_authorized = 1;

    InvalidIdsError invalid_ids = 2;

    InvalidRequestError invalid_request = 3;
  }
}

message GetModeratorPermissionsErrorDetails {
  ThingErrorType type = 10;

  oneof rpc_error {
    NotAuthorizedError not_authorized = 1;

    InvalidIdsError invalid_ids = 2;

    InvalidRequestError invalid_request = 3;
  }
}

message GetMonthlyGildingsErrorDetails {
  ThingErrorType type = 10;

  oneof rpc_error {
    NotAuthorizedError not_authorized = 1;

    InvalidIdsError invalid_ids = 2;
  }
}

message GetMultiNamesByAccountsErrorDetails {
  ThingErrorType type = 10;

  oneof rpc_error {
    NotAuthorizedError not_authorized = 1;

    InvalidIdsError invalid_ids = 2;

    InvalidRequestError invalid_request = 3;
  }
}

message GetMultiSubscriptionsErrorDetails {
  ThingErrorType type = 10;

  oneof rpc_error {
    NotAuthorizedError not_authorized = 1;
  }
}

message GetMultisErrorDetails {
  ThingErrorType type = 10;

  oneof rpc_error {
    NotAuthorizedError not_authorized = 1;

    InvalidIdsError invalid_ids = 2;
  }
}

message GetNotificationLevelsForSubredditErrorDetails {
  ThingErrorType type = 10;

  oneof rpc_error {
    InvalidIdsError invalid_ids = 1;
  }
}

message GetPublicMultiNamesByAccountErrorDetails {
  ThingErrorType type = 10;

  oneof rpc_error {
    NotAuthorizedError not_authorized = 1;

    InvalidIdsError invalid_ids = 2;

    InvalidRequestError invalid_request = 3;
  }
}

message GetQuarantineOptinsErrorDetails {
  ThingErrorType type = 10;

  oneof rpc_error {
    NotAuthorizedError not_authorized = 1;

    InvalidIdsError invalid_ids = 2;

    InvalidRequestError invalid_request = 3;
  }
}

message GetRAllFilteredSubredditsDeprErrorDetails {
  ThingErrorType type = 10;

  oneof rpc_error {
    NotAuthorizedError not_authorized = 1;

    InvalidIdsError invalid_ids = 2;
  }
}

message GetRAllFilteredSubredditsErrorDetails {
  ThingErrorType type = 10;

  oneof rpc_error {
    NotAuthorizedError not_authorized = 1;

    InvalidIdsError invalid_ids = 2;
  }
}

message GetSocialLinksErrorDetails {
  ThingErrorType type = 10;

  oneof rpc_error {
    InvalidRequestError invalid_request = 1;
  }
}

message GetSrNotificationLevelsForAccountErrorDetails {
  ThingErrorType type = 10;

  oneof rpc_error {
    InvalidIdsError invalid_ids = 1;

    InvalidRequestError invalid_request = 2;
  }
}

message GetSubredditContributorsErrorDetails {
  ThingErrorType type = 10;

  oneof rpc_error {
    NotAuthorizedError not_authorized = 1;

    InvalidRequestError invalid_request = 2;
  }
}

message GetSubredditContributorsV2ErrorDetails {
  ThingErrorType type = 10;

  oneof rpc_error {
    NotAuthorizedError not_authorized = 1;

    InvalidRequestError invalid_request = 2;
  }
}

message GetSubredditDetailsErrorDetails {
  ThingErrorType type = 10;

  oneof rpc_error {
    NotAuthorizedError not_authorized = 1;

    InvalidIdsError invalid_ids = 2;

    InvalidRequestError invalid_request = 3;
  }
}

message GetSubredditFlairedAccountsByAccountsErrorDetails {
  ThingErrorType type = 10;

  oneof rpc_error {
    NotAuthorizedError not_authorized = 1;

    InvalidRequestError invalid_request = 2;
  }
}

message GetSubredditFlairedAccountsErrorDetails {
  ThingErrorType type = 10;

  oneof rpc_error {
    NotAuthorizedError not_authorized = 1;

    InvalidRequestError invalid_request = 2;
  }
}

message GetSubredditIdsDeprErrorDetails {
  ThingErrorType type = 10;

  oneof rpc_error {
    NotAuthorizedError not_authorized = 1;

    InvalidRequestError invalid_request = 2;
  }
}

message GetSubredditIdsErrorDetails {
  ThingErrorType type = 10;

  oneof rpc_error {
    NotAuthorizedError not_authorized = 1;
  }
}

message GetSubredditModeratorsErrorDetails {
  ThingErrorType type = 10;

  oneof rpc_error {
    NotAuthorizedError not_authorized = 1;

    InvalidRequestError invalid_request = 2;
  }
}

message GetSubredditModeratorsInvitedErrorDetails {
  ThingErrorType type = 10;

  oneof rpc_error {
    NotAuthorizedError not_authorized = 1;

    InvalidRequestError invalid_request = 2;

    InvalidIdsError invalid_ids = 3;
  }
}

message GetSubredditRulesErrorDetails {
  ThingErrorType type = 10;

  oneof rpc_error {
    NotAuthorizedError not_authorized = 1;

    InvalidIdsError invalid_ids = 2;

    InvalidRequestError invalid_request = 3;
  }
}

message GetSubredditsDeprErrorDetails {
  ThingErrorType type = 10;

  oneof rpc_error {
    NotAuthorizedError not_authorized = 1;

    InvalidIdsError invalid_ids = 2;

    InvalidRequestError invalid_request = 3;

    TypeTransformationError invalid_type = 4;
  }
}

message GetSubredditsErrorDetails {
  ThingErrorType type = 10;

  oneof rpc_error {
    NotAuthorizedError not_authorized = 1;

    InvalidIdsError invalid_ids = 2;

    InvalidRequestError invalid_request = 3;

    TypeTransformationError invalid_type = 4;
  }
}

message GetSubredditsNotUserByDateErrorDetails {
  ThingErrorType type = 10;

  oneof rpc_error {
    NotAuthorizedError not_authorized = 1;

    InvalidIdsError invalid_ids = 2;

    InvalidRequestError invalid_request = 3;
  }
}

message GetSubscribedAccountIdsErrorDetails {
  ThingErrorType type = 10;

  oneof rpc_error {
    NotAuthorizedError not_authorized = 1;

    InvalidIdsError invalid_ids = 2;
  }
}

message GetSubscribedSubredditsErrorDetails {
  ThingErrorType type = 10;

  oneof rpc_error {
    NotAuthorizedError not_authorized = 1;

    InvalidIdsError invalid_ids = 2;

    InvalidRequestError invalid_request = 3;
  }
}

message GetTrendingSubredditsErrorDetails {
  ThingErrorType type = 10;

  oneof rpc_error {
    NotAuthorizedError not_authorized = 1;
  }
}

message GetTrophiesErrorDetails {
  ThingErrorType type = 10;

  oneof rpc_error {
    NotAuthorizedError not_authorized = 1;

    InvalidIdsError invalid_ids = 2;

    InvalidRequestError invalid_request = 3;
  }
}

message GetVideoCountsErrorDetails {
  ThingErrorType type = 10;

  oneof rpc_error {
    NotAuthorizedError not_authorized = 1;

    InvalidIdsError invalid_ids = 2;

    InvalidRequestError invalid_request = 3;
  }
}

message GetViewableStatusErrorDetails {
  ThingErrorType type = 10;

  oneof rpc_error {
    NotAuthorizedError not_authorized = 1;

    InvalidIdsError invalid_ids = 2;

    InvalidRequestError invalid_request = 3;
  }
}

message IdentityIDExistsError {
  //reason
  string reason = 1;
}

message IdentityNameExistsError {
  //reason
  string reason = 1;
}

message IncrCommentPropsErrorDetails {
  ThingErrorType type = 10;

  oneof rpc_error {
    NotAuthorizedError not_authorized = 1;

    InvalidIdsError invalid_ids = 2;
  }
}

message IncrIdentityKarmaErrorDetails {
  ThingErrorType type = 10;

  oneof rpc_error {
    NotAuthorizedError not_authorized = 1;

    InvalidIdsError invalid_ids = 2;

    InvalidRequestError invalid_request = 3;
  }
}

message IncrIdentityPropsErrorDetails {
  ThingErrorType type = 10;

  oneof rpc_error {
    NotAuthorizedError not_authorized = 1;

    InvalidIdsError invalid_ids = 2;

    InvalidRequestError invalid_request = 3;
  }
}

message IncrLinkPropsErrorDetails {
  ThingErrorType type = 10;

  oneof rpc_error {
    NotAuthorizedError not_authorized = 1;

    InvalidIdsError invalid_ids = 2;
  }
}

message IncrMessagePropsErrorDetails {
  ThingErrorType type = 10;

  oneof rpc_error {
    NotAuthorizedError not_authorized = 1;

    InvalidIdsError invalid_ids = 2;
  }
}

message IncrSubredditPropsErrorDetails {
  ThingErrorType type = 10;

  oneof rpc_error {
    NotAuthorizedError not_authorized = 1;

    InvalidIdsError invalid_ids = 2;
  }
}

message InvalidIdsError {
  //bad_ids
  repeated string bad_ids = 1;
}

message InvalidPager {
  //reason
  string reason = 1;
}

message InvalidRequestError {
  //reason
  string reason = 1;
}

message IsValidAccountNameErrorDetails {
  ThingErrorType type = 10;

  oneof rpc_error {
    NotAuthorizedError not_authorized = 1;
  }
}

message NotAuthorizedError {
  //DELETED: 1: optional Scope required_scope;
  string reason = 2;
}

message NotFoundError {}

message ReorderSocialLinksErrorDetails {
  ThingErrorType type = 10;

  oneof rpc_error {
    NotAuthorizedError not_authorized = 1;

    InvalidRequestError invalid_request = 2;

    SocialLinksReorderingError reordering_error = 3;
  }
}

message SocialLinksReorderingError {}

message SubredditExistsError {
  //reason
  string reason = 1;
}

message TypeTransformationError {
  //reason
  string reason = 1;
}

message UpdateAccountGenderErrorDetails {
  ThingErrorType type = 10;

  oneof rpc_error {
    NotAuthorizedError not_authorized = 1;

    InvalidIdsError invalid_ids = 2;
  }
}

message UpdateCommentErrorDetails {
  ThingErrorType type = 10;

  oneof rpc_error {
    NotAuthorizedError not_authorized = 1;

    InvalidIdsError invalid_ids = 2;
  }
}

message UpdateIdentityErrorDetails {
  ThingErrorType type = 10;

  oneof rpc_error {
    NotAuthorizedError not_authorized = 1;

    InvalidIdsError invalid_ids = 2;

    IdentityNameExistsError name_exists = 3;
  }
}

message UpdateLinkErrorDetails {
  ThingErrorType type = 10;

  oneof rpc_error {
    NotAuthorizedError not_authorized = 1;

    InvalidIdsError invalid_ids = 2;
  }
}

message UpdateMessageErrorDetails {
  ThingErrorType type = 10;

  oneof rpc_error {
    NotAuthorizedError not_authorized = 1;

    InvalidIdsError invalid_ids = 2;
  }
}

message UpdateSocialLinksErrorDetails {
  ThingErrorType type = 10;

  oneof rpc_error {
    NotAuthorizedError not_authorized = 1;

    InvalidRequestError invalid_request = 2;
  }
}

message UpdateSrNotificationLevelErrorDetails {
  ThingErrorType type = 10;

  oneof rpc_error {
    NotAuthorizedError not_authorized = 1;

    InvalidIdsError invalid_ids = 2;
  }
}

message UpdateSubredditErrorDetails {
  ThingErrorType type = 10;

  oneof rpc_error {
    NotAuthorizedError not_authorized = 1;

    InvalidIdsError invalid_ids = 2;

    SubredditExistsError subreddit_exists = 3;
  }
}

// An enum whose constants each map to a legacy thing error type.
enum ThingErrorType {
  // Default value. Should not be used directly.
  // buf:lint:ignore ENUM_ZERO_VALUE_SUFFIX
  THING_ERROR_TYPE_UNKNOWN = 0;
  // The const entry for the InvalidIds error message
  THING_ERROR_TYPE_INVALID_IDS = 1;
  // The const entry for the NotAuthorized error message
  THING_ERROR_TYPE_NOT_AUTHORIZED = 2;
  // The const entry for the NotFound error message
  THING_ERROR_TYPE_NOT_FOUND = 3;
  // The const entry for the InvalidRequest error message
  THING_ERROR_TYPE_INVALID_REQUEST = 4;
  // The const entry for the InvalidPager error message
  THING_ERROR_TYPE_INVALID_PAGER = 5;
  // The const entry for the TypeTransformation error message
  THING_ERROR_TYPE_TYPE_TRANSFORMATION = 6;
  // The const entry for the LinksReordering error message
  THING_ERROR_TYPE_SOCIAL_LINKS_REORDERING = 7;
  // The const entry for the IdentityNameExists error message
  THING_ERROR_TYPE_IDENTITY_NAME_EXISTS = 8;
  // The const entry for the IdentityIdExists error message
  THING_ERROR_TYPE_IDENTITY_ID_EXISTS = 9;
  // The const entry for the SubredditExists error message
  THING_ERROR_TYPE_SUBREDDIT_EXISTS = 10;
}
