syntax = "proto3";

package reddit.coreplatform.events.subreddit.v1;

import "google/protobuf/timestamp.proto";
import "reddit/coreplatform/subreddit/v1/subreddit_member_relations.proto";

option go_package = "github.snooguts.net/reddit/core-platform-events/go/subreddit/v1;subreddit";
option java_multiple_files = true;
option java_outer_classname = "SubredditMemberRelationsProto";
option java_package = "com.reddit.coreplatform.events.subreddit.v1";

// An event which encapsulates a single instance of a subreddit contributor relation entity create or delete. A change event
// is emitted when a subreddit contributor relation is created or deleted. A contributor relation can't be modified as it has no
// data attributes. In the future if attributes get added to the block relation, the change event will start to
// include update event as well.
message ContributorRelationChangeEvent {
  // An event which encapsulates a single block relation create.
  message Create {
    // The blocking relation entity created.
    reddit.coreplatform.subreddit.v1.ContributorRelation relation = 1;

    // The UTC timestamp of the instance at which this event was triggered and successfully persisted to
    // any relevant datastore.
    google.protobuf.Timestamp created_at = 3;
  }

  // An event which encapsulates a single block relation delete.
  message Delete {
    // The block relation entity deleted.
    reddit.coreplatform.subreddit.v1.ContributorRelation relation = 1;

    // The UTC timestamp of the instance at which this event was triggered and successfully persisted to
    // any relevant datastore.
    google.protobuf.Timestamp deleted_at = 3;
  }

  // A change event is either a create event or a delete event depending on the action that triggered
  // the event.
  oneof change {
    // Event representing a block relation create. In a change event representing a relationship create,
    // only create event will be present.
    Create create = 1;

    // Event representing a block relation delete. In a change event representing a relationship delete,
    // only delete event will be present.
    Delete delete = 2;
  }

  // Reserved for exposing the actor that triggered this event.
  reserved 3;
}
