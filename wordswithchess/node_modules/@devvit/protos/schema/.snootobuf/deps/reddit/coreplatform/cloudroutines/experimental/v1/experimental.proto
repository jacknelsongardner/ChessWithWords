syntax = "proto3";

package reddit.coreplatform.cloudroutines.experimental.v1;

import "google/protobuf/duration.proto";
import "validate/validate.proto";

option go_package = "github.snooguts.net/reddit/cloudroutines/go/experimental/v1;experimentalpb";

// Ensures that messages are processed in the strict order they are received.
// This guarantees the sequence of message execution but may reduce throughput.
// This is the default ordering if not specified, so it is not necessary to set this explicitly.
//
// *Note: If you're using the Python SDK, then KeyMessageOrdering is the default ordering.
message StrictMessageOrdering {}

// Enables out-of-order message execution.
// Messages are batched and processed concurrently, increasing throughput but not guaranteeing order of receipt.
message LooseMessageOrdering {}

// Messages are processed concurrently, similar to LooseMessageOrdering, improving throughput.
// However, messages with the same Kafka partitioning key will be processed in the order they arrive in.
// This allows for controlled parallel processing with guarantees on order based on specific keys.
//
// *Note: This is the default ordering if not specified when using the Python SDK.
message KeyMessageOrdering {}

// Wrapper struct for all client alert configurations.
message AlertConfig {
  string sdk_version = 1;
  optional ConsumerLagAlertConfig consumer_lag_alert_config = 2;
}

// Alert configuration for consumer lag. If the entire struct is left blank, the stated defaults are applied; otherwise, all fields must be set.
// Currently, this is based off of Burrow's consumer lag metric.
message ConsumerLagAlertConfig {
  // Whether or not the alert is disabled.
  // Defaults to false.
  bool disabled = 1;

  // The number of messages the consumer group needs to lag by for the alert to fire.
  // Defaults to 25000.
  int64 threshold = 2;

  // How long the alert threshold must be sustained for the alert to fire.
  // Defaults to 5 minutes. Maximum of 30 minutes.
  google.protobuf.Duration threshold_duration = 3;

  // Infrared v2 reddit-component name to route the alert to (see https://atlas.snooguts.net/catalog/default/component).
  // Defaults to an empty value, which will route the alert based on the client namespace.
  string component_name = 4;
}

message ExperimentalCallbackOptions {
  // Specifies the delivery order of messages.
  // Defaults to strict ordering if unset.
  oneof message_ordering {
    StrictMessageOrdering strict_ordering = 1;
    LooseMessageOrdering loose_ordering = 2;
    KeyMessageOrdering key_ordering = 3;
  }

  // Wrapper type containing configuration for all client alerts.
  AlertConfig alert_config = 4;

  // URI representing an arbitrary data source to consume messages from.
  optional string data_source_uri = 5 [(validate.rules).string = {
    uri: true
    max_len: 255
  }];
}
