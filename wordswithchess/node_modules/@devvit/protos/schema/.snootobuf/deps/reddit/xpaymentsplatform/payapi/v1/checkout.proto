syntax = "proto3";

package reddit.xpaymentsplatform.payapi.v1;

import "google/protobuf/timestamp.proto";
import "reddit/xpaymentsplatform/payapi/v1/common.proto";

option go_package = "github.snooguts.net/reddit/payments-api/api/xpaymentsplatform/payapipb/v1;payapipb";

message CheckoutDevvitProductsRequest {
  CheckoutRequest base_request = 1;
  SandboxOutcome sandbox_outcome = 100;

  // metadata need to be passed at product level ("CheckoutRequest.cartItems" - message CartItem).
  // If multiple products are passed, each one of them should have the metadata duplicated.
}

message CheckoutDevvitProductsResponse {
  CheckoutResponse base_response = 1;
}

message CheckoutRequest {
  Environment environment = 1;
  string reference_id = 2;
  PaymentProvider payment_provider = 3;
  CheckoutMode mode = 4;
  repeated CartItem cart_items = 5;
  ClientInfo client_info = 6;
  Captcha captcha = 7;

  string buyer_id = 20; // t2_id/t5_id of the buyer, value is required. Please do not set the value on the FE client because it can be edited before it reaches GQL.
  string caller_user_id = 21; // if the buyer_id is a t5_id, this should be the t2_id of the moderator who is spending the community gold.
  CallerID caller_id = 99; // This is the caller ID of the service that is calling this API.
}

message CheckoutResponse {
  Environment environment = 1;
  string order_id = 2;
  OrderStatus order_status = 3;
  repeated OrderItem order_items = 4;
  CheckoutAction checkout_action = 5;

  google.protobuf.Timestamp expires_at = 10;
}

message CartItem {
  string product_id = 1;
  ProductPrice checkout_price = 2;
  ProductPrice base_price = 3;
  string seller_id = 4;
  string product_metadata = 5;
  string external_product_id = 6;
  bool is_anonymous = 7; // If the buyer is anonymous, this should be set to true.
  optional int32 quantity = 8; // currently applies to free/gift subscriptions only to specify subscription duration (in the same units as subscription plan billing_period)
}

message CheckoutErrorDetails {
  CheckoutErrorCode code = 1;
}

message Captcha {
  string token = 1;
  bool checkbox = 2; // If true, the captcha is a checkbox captcha from Web.
}

enum CheckoutErrorCode {
  CHECKOUT_ERROR_CODE_UNSPECIFIED = 0;

  CHECKOUT_ERROR_CODE_NOT_FOUND = 1;
  CHECKOUT_ERROR_CODE_ILLEGAL_PRICE = 2;
  CHECKOUT_ERROR_CODE_GENERIC_PURCHASE_ERROR = 3;
  CHECKOUT_ERROR_CODE_ACCOUNT_AGE_RESTRICTION_ERROR = 4;
  CHECKOUT_ERROR_CODE_RATE_LIMITING_CHECK_ERROR = 5;
  CHECKOUT_ERROR_CODE_ILLEGAL_ARGUMENT = 6;
  CHECKOUT_ERROR_CODE_NOT_SUPPORTED = 7;
  CHECKOUT_ERROR_CODE_CAPTCHA_VERIFICATION_REJECTED = 8;
  CHECKOUT_ERROR_CODE_INTERNAL_PURCHASE_ERROR = 9;
  CHECKOUT_ERROR_CODE_ORDER_REJECTION_ERROR = 10;
  CHECKOUT_ERROR_CODE_DEVVIT_SANDBOX_PURCHASE_ERROR = 11;
}

enum SandboxOutcome {
  SANDBOX_OUTCOME_UNSPECIFIED = 0;
  SANDBOX_OUTCOME_SUCCESS = 1;
  SANDBOX_OUTCOME_FAILURE = 2;
}
