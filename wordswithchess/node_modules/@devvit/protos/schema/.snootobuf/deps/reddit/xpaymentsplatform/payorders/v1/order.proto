syntax = "proto3";

package reddit.xpaymentsplatform.payorders.v1;

import "google/protobuf/timestamp.proto";
import "reddit/xpaymentsplatform/paycommon/v1/order_status_reason.proto";
import "reddit/xpaymentsplatform/paypayments/v1/paypayments.proto";
import "reddit/xpaymentsplatform/payproducts/v1/payproducts.proto";

option go_package = "github.snooguts.net/reddit/reddit-service-pay-orders/orders-api/api/xpaymentsplatform/payorderspb/v1;payorderspb";

enum OrderStatus {
  ORDER_STATUS_UNSPECIFIED = 0;

  NEW = 1;
  CREATED = 2;
  PAID = 3;
  DELIVERED = 4; // One-time purchase delivered or subscription expired after being active.
  CANCELED = 5; // [Before payment] Reddit decides to cancel a checkout before it was paid.
  REVERTED = 6; // [After payment] Refund, chargeback.
  ACTIVE = 7; // [Subscriptions only] Subscription is active.
}

enum StatusReason {
  option deprecated = true; // Use pay-common's StatusReason instead
  STATUS_REASON_UNSPECIFIED = 0;

  REFUND_REDDIT_ADMIN = 1;
  REFUND_PAYMENT_PLATFORM_INTERNAL = 2;
  REFUND_PRODUCT_OWNER = 3;

  CHARGEBACK = 4;

  EXPIRED_INTERNAL_ERROR = 5;
  EXPIRED_NOT_PAID = 6;
  EXPIRED_NOT_DELIVERED = 7;

  ECON_BLOCKER_VALIDATION_FAILED = 8;
}

enum OrderType {
  ORDER_TYPE_UNSPECIFIED = 0;
  ONE_TIME = 1;
  SUBSCRIPTION = 2;
}

message Order {
  string id = 1;
  OrderStatus status = 2;
  OrderType type = 12;
  google.protobuf.Timestamp created_at = 3;
  google.protobuf.Timestamp updated_at = 4;

  repeated CartItem cart_items = 5;

  CheckoutAction checkout_action = 6; // Each order has only one checkout possible
  optional StatusReason old_status_reason = 7 [deprecated = true]; // Set only if status == CANCELED or REVERTED
  optional reddit.xpaymentsplatform.paycommon.v1.StatusReason status_reason = 13; // Set only if status == CANCELED or REVERTED

  reddit.xpaymentsplatform.payproducts.v1.Environment env = 8;
  string seller_id = 9;
  string buyer_id = 10;
  map<string, string> metadata = 11;
}

message CheckoutAction {
  reddit.xpaymentsplatform.paypayments.v1.PaymentMode mode = 1;
  reddit.xpaymentsplatform.payproducts.v1.PaymentProvider payment_provider = 2;
  string client_token = 3;
}

message ProductCheckoutMetadata {
  bool is_anonymous = 1; // If the true, buyer info can't be shown to the seller.
  string raw_client_metadata = 100; // The raw metadata sent by the client. Payment Platform will not interpret it.
}

message CartItem {
  reddit.xpaymentsplatform.payproducts.v1.Product product = 1;
  ProductCheckoutMetadata product_checkout_metadata = 2;
}
