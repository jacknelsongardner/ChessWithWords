syntax = "proto3";

package reddit.coreplatform.cloudroutines.operation.v1;

import "google/protobuf/timestamp.proto";
import "google/rpc/status.proto";
import "validate/validate.proto";

option go_package = "github.snooguts.net/reddit/cloudroutines/go/operationpb/v1;operationpb";

// RPC Service for working with Cloudroutines operations
service OperationService {
  // Poll for the status of an operation
  rpc PollOperationStatuses(PollOperationStatusesRequest) returns (PollOperationStatusesResponse) {
    option idempotency_level = NO_SIDE_EFFECTS;
  }

  // Update the status of an operation
  rpc PublishOperationStatus(PublishOperationStatusRequest) returns (PublishOperationStatusResponse) {
    option idempotency_level = IDEMPOTENT;
  }

  // Mark an operation as skippable
  rpc SkipOperation(SkipOperationRequest) returns (SkipOperationResponse) {
    option idempotency_level = IDEMPOTENT;
  }
}

// Request payload to check the statuses of Cloudroutines operations
// This request requires the operationURI, consisting of the fully qualified Cloudroutines callback name and event ID.
// If the retention period has elapsed, then requesting a previously valid operation URI will result in
// a NOT_FOUND status code being returned.
message PollOperationStatusesRequest {
  // A list of operation URIs (RFC 3986) to request statuses for, each formatted as
  // `{worker_pool_namespace}:{callback_name}:{eventID}`.
  repeated string operation_uris = 1 [(validate.rules).repeated = {
    min_items: 1
    max_items: 10
    items: {
      string: {
        uri: true
        min_len: 1
        max_len: 255
      }
    }
  }];
}

// Response payload to check the statuses of Cloudroutines operations
message PollOperationStatusesResponse {
  // A map of operations by their URI to their statuses
  map<string, Operation> associated_operations = 2;
}

// Request payload to update the status of a Cloudroutines operation
// This request requires the operationURI, consisting of the fully qualified Cloudroutines callback name and event ID.
message PublishOperationStatusRequest {
  // The operation URI (RFC 3986), formatted as `{worker_pool_namespace}:{callback_name}:{eventID}`.
  string operation_uri = 1 [(validate.rules).string = {
    uri: true
    min_len: 1
    max_len: 255
  }];

  // The status to update the operation to, must be a valid status (not UNKNOWN). If the operation on the request
  // is in an initial phase, any provided status value on the request will be ignored and default to UNKNOWN.
  // Terminal statuses (any status that is not UNKNOWN) cannot be overwritten.
  google.rpc.Status status = 3;

  // The phase corresponding to the status update for the operation.
  Phase phase = 4 [(validate.rules).enum = {
    not_in: [0]
  }];
}

// Response payload to update the status of a Cloudroutines operation
message PublishOperationStatusResponse {}

// Request payload to mark an operation as skippable
message SkipOperationRequest {
  // The operation URI (RFC 3986), formatted as `{worker_pool_namespace}:{callback_name}:{eventID}`.
  string operation_uri = 1 [(validate.rules).string = {
    uri: true
    min_len: 1
    max_len: 255
  }];
}

// Response payload to mark an operation as skippable
message SkipOperationResponse {}

// Phase represents the individual states a Cloudroutines operation can be in throughout its lifecycle.
enum Phase {
  // No status was specified or set.
  PHASE_UNSPECIFIED = 0;

  // An operation is acknowledged by the system but not processed yet. The initial state.
  PHASE_PENDING = 1;

  // An operation has started processing within the system. Used only for long running operations.
  PHASE_IN_PROGRESS = 2;

  // An operation has successfully processed or ended up in an unrecoverable error state.
  PHASE_COMPLETED = 3;
}

// An operation represents the Cloudroutines operation state including its current status.
// Due to the nature of Cloudroutines, these are eventually consistent values.
message Operation {
  // The operation URI, formatted as `{worker_pool_namespace}:{callback_name}:{eventID}`.
  // TODO: fix regex
  string uri = 1 [(validate.rules).string = {
    // pattern: "^[-_.a-zA-Z0-9]+$",
    min_len: 1
    max_len: 255
  }];

  // The phase of the operation.
  Phase phase = 2;

  // Operations that complete successfully will have a status `OK`. Any other status code indicates failure.
  // Status will only be populated when phase is completed. If an operation produces any metadata or results,
  // they will be available as additional details on the status.
  google.rpc.Status status = 3;

  // Time when the operation expires from both the event queue and status store.
  google.protobuf.Timestamp expires_at = 4;
}

// Used internally within Cloudroutines to asynchronously store the given operation
message StoreOperationStatus {
  // The event ID, a unique identifier for an event.
  string event_id = 1 [(validate.rules).string = {
    min_len: 1
    max_len: 255
  }];

  // The fully qualified Cloudroutines callback name (worker pool namespace + callback name) that processed the operation.
  string fq_callback_name = 2 [(validate.rules).string = {
    ignore_empty: true
    // pattern: "^[-_.a-zA-Z0-9]+$",
    min_len: 1
    max_len: 255
  }];

  // The status to update the operation to, must be a valid status (not UNKNOWN).
  google.rpc.Status status = 3;
}
