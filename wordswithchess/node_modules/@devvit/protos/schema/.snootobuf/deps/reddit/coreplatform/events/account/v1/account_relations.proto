syntax = "proto3";

package reddit.coreplatform.events.account.v1;

import "google/protobuf/timestamp.proto";
import "reddit/coreplatform/account/v1/account_relations.proto";

option go_package = "github.snooguts.net/reddit/core-platform-events/go/account/v1;account";
option java_multiple_files = true;
option java_outer_classname = "AccountRelationsProto";
option java_package = "com.reddit.coreplatform.events.account.v1";

// An event which encapsulates a single instance of a friend relation entity creation or deletion. A change event
// is emitted when a friend relationship is either created or deleted. A friend relation has no attributes and can
// only be created or deleted and not modified. In the future if attributes get added to the friend relation,
// the change event will start to include update event as well.
message FriendRelationChangeEvent {
  // An event which encapsulates a single friend relation create.
  message Create {
    // The friend relation entity created.
    reddit.coreplatform.account.v1.FriendRelation relation = 1;

    // The UTC timestamp of the instance at which this event was triggered and successfully persisted to
    // any relevant datastore.
    google.protobuf.Timestamp created_at = 3;
  }

  // An event which encapsulates a single friend relation delete.
  message Delete {
    // The friend relation entity deleted.
    reddit.coreplatform.account.v1.FriendRelation relation = 1;

    // The UTC timestamp of the instance at which this event was triggered and successfully persisted to
    // any relevant datastore.
    google.protobuf.Timestamp deleted_at = 3;
  }

  // A change event is either a create event or a delete event depending on the action that triggered
  // the event.
  oneof change {
    // Event representing a friend relation create. In a change event representing a relationship create,
    // only create event will be present.
    Create create = 1;

    // Event representing a friend relation delete. In a change event representing a relationship delete,
    // only delete event will be present.
    Delete delete = 2;
  }

  // Reserved for exposing the actor that triggered this event.
  reserved 3;
}

// An event which encapsulates a single instance of a block relation entity create or delete. A change event
// is emitted when a block relation is created or deleted. A block relation can't be modified as it has no
// data attributes. In the future if attributes get added to the block relation, the change event will start to
// include update event as well.
message BlockRelationChangeEvent {
  // An event which encapsulates a single block relation create.
  message Create {
    // The blocking relation entity created.
    reddit.coreplatform.account.v1.BlockRelation relation = 1;

    // The UTC timestamp of the instance at which this event was triggered and successfully persisted to
    // any relevant datastore.
    google.protobuf.Timestamp created_at = 3;
  }

  // An event which encapsulates a single block relation delete.
  message Delete {
    // The block relation entity deleted.
    reddit.coreplatform.account.v1.BlockRelation relation = 1;

    // The UTC timestamp of the instance at which this event was triggered and successfully persisted to
    // any relevant datastore.
    google.protobuf.Timestamp deleted_at = 3;
  }

  // A change event is either a create event or a delete event depending on the action that triggered
  // the event.
  oneof change {
    // Event representing a block relation create. In a change event representing a relationship create,
    // only create event will be present.
    Create create = 1;

    // Event representing a block relation delete. In a change event representing a relationship delete,
    // only delete event will be present.
    Delete delete = 2;
  }

  // Reserved for exposing the actor that triggered this event.
  reserved 3;
}
