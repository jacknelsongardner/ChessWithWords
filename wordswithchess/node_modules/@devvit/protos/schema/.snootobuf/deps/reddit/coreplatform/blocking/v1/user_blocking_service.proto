syntax = "proto3";

package reddit.coreplatform.blocking.v1;

import "google/protobuf/descriptor.proto";

option go_package = "github.snooguts.net/reddit/thing-api/go/grpc/blocking/v1;blocking";
option java_multiple_files = true;
option java_outer_classname = "UserBlockingServiceProto";
option java_package = "com.reddit.coreplatform.api.blocking.v1";

// The user blocking service exposes APIs for interacting with user block lists
service UserBlockingService {
  // Add a user to the target users block list. This performs a bidirectional write, where the
  // blockee is added to the users "blocking" list, and the blocker is added to the blockees
  // "blocked by" list.
  rpc BlockUser(BlockUserRequest) returns (BlockUserResponse) {
    option idempotency_level = IDEMPOTENT;
  }

  // Remove a user to the target users block list. This performs a bidirectional write, where the
  // blockee is removed from the users "blocking" list, and the blocker is removed from the blockees
  // "blocked by" list.
  rpc UnblockUser(UnblockUserRequest) returns (UnblockUserResponse) {
    option idempotency_level = IDEMPOTENT;
  }

  // Retrieve the list of users that are blocking the requested user.
  rpc GetBlockedByList(GetBlockedByListRequest) returns (GetBlockedByListResponse) {
    option idempotency_level = NO_SIDE_EFFECTS;
  }

  // Retrieve the list of users that the requested user has blocked.
  rpc GetBlockingList(GetBlockingListRequest) returns (GetBlockingListResponse) {
    option idempotency_level = NO_SIDE_EFFECTS;
  }

  // Check if the requested user is blocked by or blocking any of the target account ids supplied
  // This method is more performant than concurrently calling both `IsBlockedByUsers` and `IsBlockingUsers`
  rpc HasAnyBlockingRelation(HasAnyBlockingRelationRequest) returns (HasAnyBlockingRelationResponse) {
    option idempotency_level = NO_SIDE_EFFECTS;
  }

  // Check if the requested user is blocked by any of the target account ids supplied
  rpc IsBlockedByUsers(IsBlockedByUsersRequest) returns (IsBlockedByUsersResponse) {
    option idempotency_level = NO_SIDE_EFFECTS;
  }

  // Check if the requested user is blocking any of the target account ids supplied
  rpc IsBlockingUsers(IsBlockingUsersRequest) returns (IsBlockingUsersResponse) {
    option idempotency_level = NO_SIDE_EFFECTS;
  }
}

// The type of blocking relation between two users
enum BlockRelationType {
  // No relation specific
  BLOCK_RELATION_TYPE_UNSPECIFIED = 0;

  // The relation type used when the subject user is blocking the target user
  BLOCK_RELATION_TYPE_BLOCKING = 1;

  // The relation type used when the subject user is blocked by the target user
  BLOCK_RELATION_TYPE_BLOCKED_BY = 2;
}

/* @exclude No documentation present when converted from Thrift to Proto */
message BlockUserRequest {
  //account_id
  string account_id = 1;

  //block_target
  string block_target = 2;
}

// The response message returned by successful calls to the `BlockUser` rpc.
message BlockUserResponse {
  // The unique identifier of the relation entry between the blocker and blocked. This field will always be populated in responses where a block was successfully performed.
  // Generally, this id has no special meaning outside of the context of core services and should be ignored by clients. Its purpose is mostly to help facilitate migrations in legacy systems which depend blocking implementation details.
  // Originally added to support R2 blocking migrations due to the way R2 persists blocks in its cache.
  int64 relation_id = 1;
}

/* @exclude No documentation present when converted from Thrift to Proto */
message GetBlockedAccountIdsResponse {
  //blocked_account_ids
  repeated string blocked_account_ids = 1;
}

/* @exclude No documentation present when converted from Thrift to Proto */
message GetBlockedByAccountIdsResponse {
  //blocking_account_ids
  repeated string blocking_account_ids = 1;
}

/* @exclude No documentation present when converted from Thrift to Proto */
message GetBlockedByListRequest {
  //account_id
  string account_id = 1;

  //cursor
  string cursor = 2;

  //limit
  int32 limit = 3;
}

/* @exclude No documentation present when converted from Thrift to Proto */
message GetBlockedByListResponse {
  //blocked_by
  repeated string blocked_by = 1;

  //cursor
  string cursor = 2;
}

/* @exclude No documentation present when converted from Thrift to Proto */
message GetBlockedIdsForAccountIdsResponse {
  //account_id_to_blocked_account_ids
  map<string, BlockedAccountIdList> account_id_to_blocked_account_ids = 1;
  /* @exclude No documentation present when converted from Thrift to Proto */
  message BlockedAccountIdList {
    /* @exclude No documentation present when converted from Thrift to Proto */
    repeated string blocked_account_ids = 1;
  }
}

/* @exclude No documentation present when converted from Thrift to Proto */
message GetBlockerAccountIdsResponse {
  //account_ids
  repeated string account_ids = 1;
}

/* @exclude No documentation present when converted from Thrift to Proto */
message GetBlockingListRequest {
  //account_id
  string account_id = 1;

  //cursor
  string cursor = 2;

  //limit
  int32 limit = 3;
}

/* @exclude No documentation present when converted from Thrift to Proto */
message GetBlockingListResponse {
  //is_blocking
  repeated string is_blocking = 1;

  //cursor
  string cursor = 2;
}

/* @exclude No documentation present when converted from Thrift to Proto */
message HasAnyBlockingRelationRequest {
  //account_id
  string account_id = 1;

  //blocker_ids
  repeated string blocker_ids = 2;
}

/* @exclude No documentation present when converted from Thrift to Proto */
message HasAnyBlockingRelationResponse {
  //found_relations
  repeated string found_relations = 1;

  //relations_by_type
  map<string, AccountIdList> relations_by_type = 2;

  /* @exclude No documentation present when converted from Thrift to Proto */
  message AccountIdList {
    /* @exclude No documentation present when converted from Thrift to Proto */
    repeated string account_id = 1;
  }
}

/* @exclude No documentation present when converted from Thrift to Proto */
message IsBlockedByUsersRequest {
  //account_id
  string account_id = 1;

  //blocker_ids
  repeated string blocker_ids = 2;
}

/* @exclude No documentation present when converted from Thrift to Proto */
message IsBlockedByUsersResponse {
  // The is_blocked_by field contains the subset of blocker_ids supplied which are blocking the account_id supplied.
  // This list can potentially be empty.
  repeated string is_blocked_by = 1;
}

/* @exclude No documentation present when converted from Thrift to Proto */
message IsBlockingUsersRequest {
  //account_id
  string account_id = 1;

  //users
  repeated string users = 2;
}

/* @exclude No documentation present when converted from Thrift to Proto */
message IsBlockingUsersResponse {
  // The is_blocking field contains the subset of account ids supplied which are blocked by the account_id supplied.
  // This list can potentially be empty.
  repeated string is_blocking = 1;
}

/* @exclude No documentation present when converted from Thrift to Proto */
message UnblockUserRequest {
  //account_id
  string account_id = 1;

  //unblock_target
  string unblock_target = 2;
}

/* @exclude No documentation present when converted from Thrift to Proto */
message UnblockUserResponse {}
