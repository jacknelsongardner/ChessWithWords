syntax = "proto3";

package reddit.xpaymentsplatform.payapi.v1;

import "reddit/xpaymentsplatform/payapi/v1/acknowledge_order_delivery.proto";
import "reddit/xpaymentsplatform/payapi/v1/cancel_subscription.proto";
import "reddit/xpaymentsplatform/payapi/v1/change_payment_method.proto";
import "reddit/xpaymentsplatform/payapi/v1/checkout.proto";
import "reddit/xpaymentsplatform/payapi/v1/contributor_program.proto";
import "reddit/xpaymentsplatform/payapi/v1/delete_products.proto";
import "reddit/xpaymentsplatform/payapi/v1/deposit_gold.proto";
import "reddit/xpaymentsplatform/payapi/v1/get_aggregated_transactions_list.proto";
import "reddit/xpaymentsplatform/payapi/v1/get_batch_products.proto";
import "reddit/xpaymentsplatform/payapi/v1/get_gold_balances.proto";
import "reddit/xpaymentsplatform/payapi/v1/get_order.proto";
import "reddit/xpaymentsplatform/payapi/v1/get_orders.proto";
import "reddit/xpaymentsplatform/payapi/v1/get_orders_by_user.proto";
import "reddit/xpaymentsplatform/payapi/v1/get_payout_info_batch.proto";
import "reddit/xpaymentsplatform/payapi/v1/get_products.proto";
import "reddit/xpaymentsplatform/payapi/v1/get_subscriptions.proto";
import "reddit/xpaymentsplatform/payapi/v1/get_transaction_list.proto";
import "reddit/xpaymentsplatform/payapi/v1/get_user_profiles.proto";
import "reddit/xpaymentsplatform/payapi/v1/refund_order.proto";
import "reddit/xpaymentsplatform/payapi/v1/revoke_subscription.proto";
import "reddit/xpaymentsplatform/payapi/v1/transfer_subscription.proto";
import "reddit/xpaymentsplatform/payapi/v1/upsert_products.proto";

option go_package = "github.snooguts.net/reddit/payments-api/api/xpaymentsplatform/payapipb/v1;payapipb";

service PayApiService {
  rpc AcknowledgeOrderDelivery(AcknowledgeOrderDeliveryRequest) returns (AcknowledgeOrderDeliveryResponse) {}

  // CancelSubscription cancels renewal of an active subscription.
  rpc CancelSubscription(CancelSubscriptionRequest) returns (CancelSubscriptionResponse) {}

  // ChangePaymentMethod changes the payment method for an order.
  rpc ChangePaymentMethod(ChangePaymentMethodRequest) returns (ChangePaymentMethodResponse) {}

  rpc Checkout(CheckoutRequest) returns (CheckoutResponse) {}

  rpc CheckoutDevvitProducts(CheckoutDevvitProductsRequest) returns (CheckoutDevvitProductsResponse) {}

  rpc DeleteProducts(DeleteProductsRequest) returns (DeleteProductsResponse) {}

  // This API is used by the everest service to deposit gold into the community chest, via a callback from gateway-features.
  rpc DepositGold(DepositGoldRequest) returns (DepositGoldResponse) {}

  // Gets transactions for a specified owner grouped according to common characteristics and time frame
  rpc GetAggregatedTransactionsList(GetAggregatedTransactionsListRequest) returns (GetAggregatedTransactionsListResponse) {}

  rpc GetBatchProducts(GetBatchProductsRequest) returns (GetBatchProductsResponse) {}

  rpc GetContributorProgramUserVerificationStatus(GetContributorProgramUserVerificationStatusRequest) returns (GetContributorProgramUserVerificationStatusResponse) {}

  rpc GetGoldBalances(GetGoldBalancesRequest) returns (GetGoldBalancesResponse) {}

  rpc GetOrder(GetOrderRequest) returns (GetOrderResponse) {}

  rpc GetOrders(GetOrdersRequest) returns (GetOrdersResponse) {}

  rpc GetOrdersByUser(GetOrdersByUserRequest) returns (GetOrdersByUserResponse) {}

  rpc GetPayoutInfoBatch(GetPayoutInfoBatchRequest) returns (GetPayoutInfoBatchResponse) {}

  rpc GetProducts(GetProductsRequest) returns (GetProductsResponse) {}

  // GetSubscriptions returns last 100 existing subscriptions for a user.
  rpc GetSubscriptions(GetSubscriptionsRequest) returns (GetSubscriptionsResponse) {}

  // Gets the transactions for a specified owner
  rpc GetTransactionsList(GetTransactionsListRequest) returns (GetTransactionsListResponse) {}

  rpc GetUserProfiles(GetUserProfilesRequest) returns (GetUserProfilesResponse) {}

  rpc RefundOrder(RefundOrderRequest) returns (RefundOrderResponse) {}

  rpc RegisterUsersForContributorProgram(RegisterUsersForContributorProgramRequest) returns (RegisterUsersForContributorProgramResponse) {}

  // TransferSubscription transfers a subscription between users.
  rpc TransferSubscription(TransferSubscriptionRequest) returns (TransferSubscriptionResponse) {}

  rpc UpsertProducts(UpsertProductsRequest) returns (UpsertProductsResponse) {}

  // RevokeSubscription immediately ends an active subscription.
  rpc RevokeSubscription(RevokeSubscriptionRequest) returns (RevokeSubscriptionResponse) {}
}
