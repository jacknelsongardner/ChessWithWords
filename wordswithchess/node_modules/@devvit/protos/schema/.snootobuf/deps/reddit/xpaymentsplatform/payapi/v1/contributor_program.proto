syntax = "proto3";

package reddit.xpaymentsplatform.payapi.v1;

import "reddit/xpaymentsplatform/payapi/v1/common.proto";

option go_package = "github.snooguts.net/reddit/payments-api/api/xpaymentsplatform/payapipb/v1;payapipb";

enum PayoutVerificationStatus {
  PAYOUT_VERIFICATION_STATUS_UNSPECIFIED = 0;
  PAYOUT_VERIFICATION_STATUS_NOT_STARTED = 1; // User has not started the verification process but is eligible.
  // PAYOUT_VERIFICATION_STATUS_IN_LINE = 2; // Reserved for future use.
  PAYOUT_VERIFICATION_STATUS_APPROVED_TO_START = 3;
  PAYOUT_VERIFICATION_STATUS_IN_PROGRESS = 4;
  PAYOUT_VERIFICATION_STATUS_COMPLETE = 5;
  PAYOUT_VERIFICATION_STATUS_NOT_ELIGIBLE = 6; // User was removed from the program.
  PAYOUT_VERIFICATION_STATUS_NOT_APPROVED_TO_START = 7; // User doesn't meet the requirements to start the verification process.
}

message GetContributorProgramUserVerificationStatusRequest {
  CallerID caller_id = 1; // The ID of the service that is calling this API.
  Environment environment = 2; // The environment in which the request is made.
  string user_id = 3; // The user ID for which to get the verification status.
}

message GetContributorProgramUserVerificationStatusResponse {
  PayoutVerificationStatus status = 1;
}

message RegisterUsersForContributorProgramRequest {
  CallerID caller_id = 1; // The ID of the service that is calling this API.
  Environment environment = 2; // The environment in which the request is made.
  repeated string user_ids = 3; // List of user IDs to register for the contributor program.
}

message RegisterUsersForContributorProgramResponse {
  // Possible extension for this message:
  // repeated string registered_user_ids = 1; // List of user IDs that were successfully registered.
  // repeated string failed_user_ids = 2; // List of user IDs that failed to register.
}
