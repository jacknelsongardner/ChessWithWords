// Code generated by protoc-gen-go-redditapi. DO NOT EDIT.

package reddithttpplugin

import (
	context "context"
	json "encoding/json"
	fmt "fmt"
	redditapi "github.snooguts.net/reddit/reddit-devplatform-monorepo/go-common/generated/protos/types/devvit/plugin/redditapi"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	url "net/url"
)

func (s *RedditHttpPlugin) AddButtonWidget(ctx context.Context, req *redditapi.AddButtonWidgetRequest) (*redditapi.ButtonWidget, error) {
	resp := redditapi.ButtonWidget{}
	hydratedPath := fmt.Sprintf(
		"/r/%v/api/widget?raw_json=1",
		req.Subreddit)
	body := make(map[string]interface{})
	body["buttons"] = buildRepeatedMessageJson(req.Buttons)
	body["description"] = req.Description
	body["kind"] = "button"
	body["shortName"] = req.ShortName
	body["styles"] = buildMessageJson(req.Styles)
	body["subreddit"] = req.Subreddit
	bodyBytes, _ := json.Marshal(body)
	err := s.doRequest(ctx, requestConfig{Method: "POST", ProtoMethod: "AddButtonWidget", BodyType: JSON_CAMEL, Body: bodyBytes, Path: hydratedPath}, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (s *RedditHttpPlugin) AddImageWidget(ctx context.Context, req *redditapi.AddImageWidgetRequest) (*redditapi.ImageWidget, error) {
	resp := redditapi.ImageWidget{}
	hydratedPath := fmt.Sprintf(
		"/r/%v/api/widget?raw_json=1",
		req.Subreddit)
	body := make(map[string]interface{})
	body["data"] = buildRepeatedMessageJson(req.Data)
	body["kind"] = "image"
	body["shortName"] = req.ShortName
	body["styles"] = buildMessageJson(req.Styles)
	body["subreddit"] = req.Subreddit
	bodyBytes, _ := json.Marshal(body)
	err := s.doRequest(ctx, requestConfig{Method: "POST", ProtoMethod: "AddImageWidget", BodyType: JSON_CAMEL, Body: bodyBytes, Path: hydratedPath}, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (s *RedditHttpPlugin) AddCalendarWidget(ctx context.Context, req *redditapi.AddCalendarWidgetRequest) (*redditapi.CalendarWidget, error) {
	resp := redditapi.CalendarWidget{}
	hydratedPath := fmt.Sprintf(
		"/r/%v/api/widget?raw_json=1",
		req.Subreddit)
	body := make(map[string]interface{})
	body["configuration"] = buildMessageJson(req.Configuration)
	body["googleCalendarId"] = req.GoogleCalendarId
	body["kind"] = "calendar"
	body["requiresSync"] = req.RequiresSync
	body["shortName"] = req.ShortName
	body["styles"] = buildMessageJson(req.Styles)
	body["subreddit"] = req.Subreddit
	bodyBytes, _ := json.Marshal(body)
	err := s.doRequest(ctx, requestConfig{Method: "POST", ProtoMethod: "AddCalendarWidget", BodyType: JSON_CAMEL, Body: bodyBytes, Path: hydratedPath}, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (s *RedditHttpPlugin) AddTextAreaWidget(ctx context.Context, req *redditapi.AddTextAreaWidgetRequest) (*redditapi.TextAreaWidget, error) {
	resp := redditapi.TextAreaWidget{}
	hydratedPath := fmt.Sprintf(
		"/r/%v/api/widget?raw_json=1",
		req.Subreddit)
	body := make(map[string]interface{})
	body["kind"] = "textarea"
	body["shortName"] = req.ShortName
	body["styles"] = buildMessageJson(req.Styles)
	body["subreddit"] = req.Subreddit
	body["text"] = req.Text
	bodyBytes, _ := json.Marshal(body)
	err := s.doRequest(ctx, requestConfig{Method: "POST", ProtoMethod: "AddTextAreaWidget", BodyType: JSON_CAMEL, Body: bodyBytes, Path: hydratedPath}, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (s *RedditHttpPlugin) AddCommunityListWidget(ctx context.Context, req *redditapi.AddCommunityListWidgetRequest) (*redditapi.CommunityListWidget, error) {
	resp := redditapi.CommunityListWidget{}
	hydratedPath := fmt.Sprintf(
		"/r/%v/api/widget?raw_json=1",
		req.Subreddit)
	body := make(map[string]interface{})
	body["data"] = req.Data
	body["kind"] = "community-list"
	body["shortName"] = req.ShortName
	body["styles"] = buildMessageJson(req.Styles)
	body["subreddit"] = req.Subreddit
	bodyBytes, _ := json.Marshal(body)
	err := s.doRequest(ctx, requestConfig{Method: "POST", ProtoMethod: "AddCommunityListWidget", BodyType: JSON_CAMEL, Body: bodyBytes, Path: hydratedPath}, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (s *RedditHttpPlugin) AddPostFlairWidget(ctx context.Context, req *redditapi.AddPostFlairWidgetRequest) (*redditapi.PostFlairWidget, error) {
	resp := redditapi.PostFlairWidget{}
	hydratedPath := fmt.Sprintf(
		"/r/%v/api/widget?raw_json=1",
		req.Subreddit)
	body := make(map[string]interface{})
	body["display"] = req.Display
	body["kind"] = "post-flair"
	body["order"] = req.Order
	body["shortName"] = req.ShortName
	body["styles"] = buildMessageJson(req.Styles)
	body["subreddit"] = req.Subreddit
	bodyBytes, _ := json.Marshal(body)
	err := s.doRequest(ctx, requestConfig{Method: "POST", ProtoMethod: "AddPostFlairWidget", BodyType: JSON_CAMEL, Body: bodyBytes, Path: hydratedPath}, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (s *RedditHttpPlugin) AddCustomWidget(ctx context.Context, req *redditapi.AddCustomWidgetRequest) (*redditapi.CustomWidget, error) {
	resp := redditapi.CustomWidget{}
	hydratedPath := fmt.Sprintf(
		"/r/%v/api/widget?raw_json=1",
		req.Subreddit)
	body := make(map[string]interface{})
	body["css"] = req.Css
	body["height"] = req.Height
	body["imageData"] = buildRepeatedMessageJson(req.ImageData)
	body["kind"] = "custom"
	body["shortName"] = req.ShortName
	body["styles"] = buildMessageJson(req.Styles)
	body["subreddit"] = req.Subreddit
	body["text"] = req.Text
	bodyBytes, _ := json.Marshal(body)
	err := s.doRequest(ctx, requestConfig{Method: "POST", ProtoMethod: "AddCustomWidget", BodyType: JSON_CAMEL, Body: bodyBytes, Path: hydratedPath}, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (s *RedditHttpPlugin) DeleteWidget(ctx context.Context, req *redditapi.DeleteWidgetRequest) (*emptypb.Empty, error) {
	resp := emptypb.Empty{}
	hydratedPath := fmt.Sprintf(
		"/r/%v/api/widget/%v?raw_json=1",
		req.Subreddit,
		req.Id)
	err := s.doRequest(ctx, requestConfig{Method: "DELETE", ProtoMethod: "DeleteWidget", Path: hydratedPath}, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (s *RedditHttpPlugin) UpdateButtonWidget(ctx context.Context, req *redditapi.UpdateButtonWidgetRequest) (*redditapi.ButtonWidget, error) {
	resp := redditapi.ButtonWidget{}
	hydratedPath := fmt.Sprintf(
		"/r/%v/api/widget/%v?raw_json=1",
		req.Subreddit,
		req.Id)
	body := make(map[string]interface{})
	body["buttons"] = buildRepeatedMessageJson(req.Buttons)
	body["description"] = req.Description
	body["id"] = req.Id
	body["kind"] = "button"
	body["shortName"] = req.ShortName
	body["styles"] = buildMessageJson(req.Styles)
	body["subreddit"] = req.Subreddit
	bodyBytes, _ := json.Marshal(body)
	err := s.doRequest(ctx, requestConfig{Method: "PUT", ProtoMethod: "UpdateButtonWidget", BodyType: JSON_CAMEL, Body: bodyBytes, Path: hydratedPath}, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (s *RedditHttpPlugin) UpdateImageWidget(ctx context.Context, req *redditapi.UpdateImageWidgetRequest) (*redditapi.ImageWidget, error) {
	resp := redditapi.ImageWidget{}
	hydratedPath := fmt.Sprintf(
		"/r/%v/api/widget/%v?raw_json=1",
		req.Subreddit,
		req.Id)
	body := make(map[string]interface{})
	body["data"] = buildRepeatedMessageJson(req.Data)
	body["id"] = req.Id
	body["kind"] = "image"
	body["shortName"] = req.ShortName
	body["styles"] = buildMessageJson(req.Styles)
	body["subreddit"] = req.Subreddit
	bodyBytes, _ := json.Marshal(body)
	err := s.doRequest(ctx, requestConfig{Method: "PUT", ProtoMethod: "UpdateImageWidget", BodyType: JSON_CAMEL, Body: bodyBytes, Path: hydratedPath}, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (s *RedditHttpPlugin) UpdateCalendarWidget(ctx context.Context, req *redditapi.UpdateCalendarWidgetRequest) (*redditapi.CalendarWidget, error) {
	resp := redditapi.CalendarWidget{}
	hydratedPath := fmt.Sprintf(
		"/r/%v/api/widget/%v?raw_json=1",
		req.Subreddit,
		req.Id)
	body := make(map[string]interface{})
	body["configuration"] = buildMessageJson(req.Configuration)
	body["googleCalendarId"] = req.GoogleCalendarId
	body["id"] = req.Id
	body["kind"] = "calendar"
	body["requiresSync"] = req.RequiresSync
	body["shortName"] = req.ShortName
	body["styles"] = buildMessageJson(req.Styles)
	body["subreddit"] = req.Subreddit
	bodyBytes, _ := json.Marshal(body)
	err := s.doRequest(ctx, requestConfig{Method: "PUT", ProtoMethod: "UpdateCalendarWidget", BodyType: JSON_CAMEL, Body: bodyBytes, Path: hydratedPath}, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (s *RedditHttpPlugin) UpdateTextAreaWidget(ctx context.Context, req *redditapi.UpdateTextAreaWidgetRequest) (*redditapi.TextAreaWidget, error) {
	resp := redditapi.TextAreaWidget{}
	hydratedPath := fmt.Sprintf(
		"/r/%v/api/widget/%v?raw_json=1",
		req.Subreddit,
		req.Id)
	body := make(map[string]interface{})
	body["id"] = req.Id
	body["kind"] = "textarea"
	body["shortName"] = req.ShortName
	body["styles"] = buildMessageJson(req.Styles)
	body["subreddit"] = req.Subreddit
	body["text"] = req.Text
	bodyBytes, _ := json.Marshal(body)
	err := s.doRequest(ctx, requestConfig{Method: "PUT", ProtoMethod: "UpdateTextAreaWidget", BodyType: JSON_CAMEL, Body: bodyBytes, Path: hydratedPath}, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (s *RedditHttpPlugin) UpdateCommunityListWidget(ctx context.Context, req *redditapi.UpdateCommunityListWidgetRequest) (*redditapi.UpdateCommunityListWidgetResponse, error) {
	resp := redditapi.UpdateCommunityListWidgetResponse{}
	hydratedPath := fmt.Sprintf(
		"/r/%v/api/widget/%v?raw_json=1",
		req.Subreddit,
		req.Id)
	body := make(map[string]interface{})
	body["data"] = req.Data
	body["id"] = req.Id
	body["kind"] = "community-list"
	body["shortName"] = req.ShortName
	body["styles"] = buildMessageJson(req.Styles)
	body["subreddit"] = req.Subreddit
	bodyBytes, _ := json.Marshal(body)
	err := s.doRequest(ctx, requestConfig{Method: "PUT", ProtoMethod: "UpdateCommunityListWidget", BodyType: JSON_CAMEL, Body: bodyBytes, Path: hydratedPath}, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (s *RedditHttpPlugin) UpdatePostFlairWidget(ctx context.Context, req *redditapi.UpdatePostFlairWidgetRequest) (*redditapi.PostFlairWidget, error) {
	resp := redditapi.PostFlairWidget{}
	hydratedPath := fmt.Sprintf(
		"/r/%v/api/widget/%v?raw_json=1",
		req.Subreddit,
		req.Id)
	body := make(map[string]interface{})
	body["display"] = req.Display
	body["id"] = req.Id
	body["kind"] = "post-flair"
	body["order"] = req.Order
	body["shortName"] = req.ShortName
	body["styles"] = buildMessageJson(req.Styles)
	body["subreddit"] = req.Subreddit
	bodyBytes, _ := json.Marshal(body)
	err := s.doRequest(ctx, requestConfig{Method: "PUT", ProtoMethod: "UpdatePostFlairWidget", BodyType: JSON_CAMEL, Body: bodyBytes, Path: hydratedPath}, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (s *RedditHttpPlugin) UpdateCustomWidget(ctx context.Context, req *redditapi.UpdateCustomWidgetRequest) (*redditapi.CustomWidget, error) {
	resp := redditapi.CustomWidget{}
	hydratedPath := fmt.Sprintf(
		"/r/%v/api/widget/%v?raw_json=1",
		req.Subreddit,
		req.Id)
	body := make(map[string]interface{})
	body["css"] = req.Css
	body["height"] = req.Height
	body["id"] = req.Id
	body["imageData"] = buildRepeatedMessageJson(req.ImageData)
	body["kind"] = "custom"
	body["shortName"] = req.ShortName
	body["styles"] = buildMessageJson(req.Styles)
	body["subreddit"] = req.Subreddit
	body["text"] = req.Text
	bodyBytes, _ := json.Marshal(body)
	err := s.doRequest(ctx, requestConfig{Method: "PUT", ProtoMethod: "UpdateCustomWidget", BodyType: JSON_CAMEL, Body: bodyBytes, Path: hydratedPath}, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (s *RedditHttpPlugin) GetWidgetImageUploadLease(ctx context.Context, req *redditapi.GetWidgetImageUploadLeaseRequest) (*redditapi.GetWidgetImageUploadLeaseResponse, error) {
	resp := redditapi.GetWidgetImageUploadLeaseResponse{}
	hydratedPath := fmt.Sprintf(
		"/r/%v/api/widget_image_upload_s3?raw_json=1",
		req.Subreddit)
	body := url.Values{}
	body.Add("filepath", req.Filepath)
	body.Add("mimetype", req.Mimetype)
	body.Add("subreddit", req.Subreddit)
	bodyBytes := []byte(body.Encode())
	err := s.doRequest(ctx, requestConfig{Method: "POST", ProtoMethod: "GetWidgetImageUploadLease", BodyType: FORM_CAMEL, Body: bodyBytes, Path: hydratedPath}, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (s *RedditHttpPlugin) OrderWidgets(ctx context.Context, req *redditapi.OrderWidgetsRequest) (*emptypb.Empty, error) {
	resp := emptypb.Empty{}
	hydratedPath := fmt.Sprintf(
		"/r/%v/api/widget_order/section?raw_json=1",
		req.Subreddit)
	body := make(map[string]interface{})
	body["order"] = req.Order
	body["subreddit"] = req.Subreddit
	bodyBytes, _ := json.Marshal(body)
	err := s.doRequest(ctx, requestConfig{Method: "PATCH", ProtoMethod: "OrderWidgets", BodyType: JSON_CAMEL, Body: bodyBytes, Path: hydratedPath}, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (s *RedditHttpPlugin) GetWidgets(ctx context.Context, req *redditapi.GetWidgetsRequest) (*redditapi.GetWidgetsResponse, error) {
	resp := redditapi.GetWidgetsResponse{}
	hydratedPath := fmt.Sprintf(
		"/r/%v/api/widgets?raw_json=1",
		req.Subreddit)
	err := s.doRequest(ctx, requestConfig{Method: "GET", ProtoMethod: "GetWidgets", Path: hydratedPath}, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}
