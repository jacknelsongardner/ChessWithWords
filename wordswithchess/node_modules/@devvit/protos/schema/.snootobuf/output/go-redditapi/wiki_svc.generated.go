// Code generated by protoc-gen-go-redditapi. DO NOT EDIT.

package reddithttpplugin

import (
	context "context"
	fmt "fmt"
	dlog "github.snooguts.net/reddit/reddit-devplatform-monorepo/go-common/dlog"
	redditapi "github.snooguts.net/reddit/reddit-devplatform-monorepo/go-common/generated/protos/types/devvit/plugin/redditapi"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	url "net/url"
	strconv "strconv"
)

func (s *RedditHttpPlugin) GetWikiPages(ctx context.Context, req *redditapi.GetWikiPagesRequest) (*redditapi.GetWikiPagesResponse, error) {
	resp := redditapi.GetWikiPagesResponse{}
	hydratedPath := fmt.Sprintf(
		"/r/%v/wiki/pages?raw_json=1",
		req.Subreddit)
	err := s.doRequest(ctx, requestConfig{Method: "GET", ProtoMethod: "GetWikiPages", Path: hydratedPath}, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (s *RedditHttpPlugin) GetWikiPage(ctx context.Context, req *redditapi.GetWikiPageRequest) (*redditapi.GetWikiPageResponse, error) {
	hydratedPath := fmt.Sprintf(
		"/r/%v/wiki/%v?raw_json=1",
		req.Subreddit,
		req.Page)
	respBody, err := s.doRequestRaw(ctx, requestConfig{Method: "GET", ProtoMethod: "GetWikiPage", Path: hydratedPath})
	if err != nil {
		return nil, err
	}
	resp, err := fixGetWikiPageResponse(respBody)
	if err != nil {
		l := dlog.WithIncomingContext(ctx)
		l.Errorf("Could not unmarshal JSON for path %s: %v", hydratedPath, err)
		l.Errorf("Body failure: %v", string(respBody))
		return nil, err
	}
	return resp, nil
}

func (s *RedditHttpPlugin) EditWikiPage(ctx context.Context, req *redditapi.EditWikiPageRequest) (*emptypb.Empty, error) {
	resp := emptypb.Empty{}
	hydratedPath := fmt.Sprintf(
		"/r/%v/api/wiki/edit?raw_json=1",
		req.Subreddit)
	body := url.Values{}
	body.Add("content", req.Content)
	body.Add("page", req.Page)
	body.Add("reason", req.Reason)
	body.Add("subreddit", req.Subreddit)
	bodyBytes := []byte(body.Encode())
	err := s.doRequest(ctx, requestConfig{Method: "POST", ProtoMethod: "EditWikiPage", BodyType: FORM_SNAKE, Body: bodyBytes, Path: hydratedPath}, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (s *RedditHttpPlugin) HideWikiPageRevision(ctx context.Context, req *redditapi.HideWikiPageRevisionRequest) (*redditapi.HideWikiPageRevisionResponse, error) {
	resp := redditapi.HideWikiPageRevisionResponse{}
	hydratedPath := fmt.Sprintf(
		"/r/%v/api/wiki/hide?raw_json=1",
		req.Subreddit)
	body := url.Values{}
	body.Add("page", req.Page)
	body.Add("revision", req.Revision)
	body.Add("subreddit", req.Subreddit)
	bodyBytes := []byte(body.Encode())
	err := s.doRequest(ctx, requestConfig{Method: "POST", ProtoMethod: "HideWikiPageRevision", BodyType: FORM_SNAKE, Body: bodyBytes, Path: hydratedPath}, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (s *RedditHttpPlugin) GetWikiPageRevisions(ctx context.Context, req *redditapi.GetWikiPageRevisionsRequest) (*redditapi.WikiPageRevisionListing, error) {
	resp := redditapi.WikiPageRevisionListing{}
	tmpAfterValue := ""
	if req.After != nil {
		tmpAfterValue = fmt.Sprintf("%v", req.After.Value)
	}
	tmpBeforeValue := ""
	if req.Before != nil {
		tmpBeforeValue = fmt.Sprintf("%v", req.Before.Value)
	}
	tmpCountValue := ""
	if req.Count != nil {
		tmpCountValue = fmt.Sprintf("%v", req.Count.Value)
	}
	tmpLimitValue := ""
	if req.Limit != nil {
		tmpLimitValue = fmt.Sprintf("%v", req.Limit.Value)
	}
	tmpShowValue := ""
	if req.Show != nil {
		tmpShowValue = fmt.Sprintf("%v", req.Show.Value)
	}
	tmpSrDetailValue := ""
	if req.SrDetail != nil {
		tmpSrDetailValue = fmt.Sprintf("%v", req.SrDetail.Value)
	}
	hydratedPath := fmt.Sprintf(
		"/r/%v/wiki/revisions/%v?after=%v&before=%v&count=%v&limit=%v&show=%v&sr_detail=%v&raw_json=1",
		req.Subreddit,
		req.Page,
		tmpAfterValue,
		tmpBeforeValue,
		tmpCountValue,
		tmpLimitValue,
		tmpShowValue,
		tmpSrDetailValue)
	err := s.doRequest(ctx, requestConfig{Method: "GET", ProtoMethod: "GetWikiPageRevisions", Path: hydratedPath}, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (s *RedditHttpPlugin) GetWikiRevisions(ctx context.Context, req *redditapi.GetWikiRevisionsRequest) (*redditapi.WikiPageRevisionListing, error) {
	resp := redditapi.WikiPageRevisionListing{}
	tmpAfterValue := ""
	if req.After != nil {
		tmpAfterValue = fmt.Sprintf("%v", req.After.Value)
	}
	tmpBeforeValue := ""
	if req.Before != nil {
		tmpBeforeValue = fmt.Sprintf("%v", req.Before.Value)
	}
	tmpCountValue := ""
	if req.Count != nil {
		tmpCountValue = fmt.Sprintf("%v", req.Count.Value)
	}
	tmpLimitValue := ""
	if req.Limit != nil {
		tmpLimitValue = fmt.Sprintf("%v", req.Limit.Value)
	}
	tmpShowValue := ""
	if req.Show != nil {
		tmpShowValue = fmt.Sprintf("%v", req.Show.Value)
	}
	tmpSrDetailValue := ""
	if req.SrDetail != nil {
		tmpSrDetailValue = fmt.Sprintf("%v", req.SrDetail.Value)
	}
	hydratedPath := fmt.Sprintf(
		"/r/%v/wiki/revisions?after=%v&before=%v&count=%v&limit=%v&show=%v&sr_detail=%v&raw_json=1",
		req.Subreddit,
		tmpAfterValue,
		tmpBeforeValue,
		tmpCountValue,
		tmpLimitValue,
		tmpShowValue,
		tmpSrDetailValue)
	err := s.doRequest(ctx, requestConfig{Method: "GET", ProtoMethod: "GetWikiRevisions", Path: hydratedPath}, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (s *RedditHttpPlugin) RevertWikiPage(ctx context.Context, req *redditapi.RevertWikiPageRequest) (*emptypb.Empty, error) {
	resp := emptypb.Empty{}
	hydratedPath := fmt.Sprintf(
		"/r/%v/api/wiki/revert?raw_json=1",
		req.Subreddit)
	body := url.Values{}
	body.Add("page", req.Page)
	body.Add("revision", req.Revision)
	body.Add("subreddit", req.Subreddit)
	bodyBytes := []byte(body.Encode())
	err := s.doRequest(ctx, requestConfig{Method: "POST", ProtoMethod: "RevertWikiPage", BodyType: FORM_SNAKE, Body: bodyBytes, Path: hydratedPath}, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (s *RedditHttpPlugin) GetWikiPageSettings(ctx context.Context, req *redditapi.GetWikiPageSettingsRequest) (*redditapi.WikiPageSettings, error) {
	resp := redditapi.WikiPageSettings{}
	hydratedPath := fmt.Sprintf(
		"/r/%v/wiki/settings/%v?raw_json=1",
		req.Subreddit,
		req.Page)
	err := s.doRequest(ctx, requestConfig{Method: "GET", ProtoMethod: "GetWikiPageSettings", Path: hydratedPath}, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (s *RedditHttpPlugin) UpdateWikiPageSettings(ctx context.Context, req *redditapi.UpdateWikiPageSettingsRequest) (*redditapi.WikiPageSettings, error) {
	resp := redditapi.WikiPageSettings{}
	hydratedPath := fmt.Sprintf(
		"/r/%v/wiki/settings/%v?raw_json=1",
		req.Subreddit,
		req.Page)
	body := url.Values{}
	body.Add("listed", req.Listed)
	body.Add("page", req.Page)
	body.Add("permlevel", strconv.Itoa(int(req.Permlevel)))
	body.Add("subreddit", req.Subreddit)
	bodyBytes := []byte(body.Encode())
	err := s.doRequest(ctx, requestConfig{Method: "POST", ProtoMethod: "UpdateWikiPageSettings", BodyType: FORM_CAMEL, Body: bodyBytes, Path: hydratedPath}, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (s *RedditHttpPlugin) AllowEditor(ctx context.Context, req *redditapi.AllowEditorRequest) (*emptypb.Empty, error) {
	resp := emptypb.Empty{}
	hydratedPath := fmt.Sprintf(
		"/r/%v/api/wiki/alloweditor/%v?raw_json=1",
		req.Subreddit,
		req.Act)
	body := url.Values{}
	body.Add("act", req.Act)
	body.Add("page", req.Page)
	body.Add("subreddit", req.Subreddit)
	body.Add("username", req.Username)
	bodyBytes := []byte(body.Encode())
	err := s.doRequest(ctx, requestConfig{Method: "POST", ProtoMethod: "AllowEditor", BodyType: FORM_SNAKE, Body: bodyBytes, Path: hydratedPath}, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}
