// Code generated by protoc-gen-go-redditapi. DO NOT EDIT.

package reddithttpplugin

import (
	context "context"
	json "encoding/json"
	fmt "fmt"
	dlog "github.snooguts.net/reddit/reddit-devplatform-monorepo/go-common/dlog"
	redditapi "github.snooguts.net/reddit/reddit-devplatform-monorepo/go-common/generated/protos/types/devvit/plugin/redditapi"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	url "net/url"
	strconv "strconv"
)

func (s *RedditHttpPlugin) AboutWhere(ctx context.Context, req *redditapi.AboutWhereRequest) (*redditapi.Listing, error) {
	tmpSubredditValue := ""
	if req.Subreddit != nil {
		tmpSubredditValue = fmt.Sprintf("%v", req.Subreddit.Value)
	}
	tmpAfterValue := ""
	if req.After != nil {
		tmpAfterValue = fmt.Sprintf("%v", req.After.Value)
	}
	tmpBeforeValue := ""
	if req.Before != nil {
		tmpBeforeValue = fmt.Sprintf("%v", req.Before.Value)
	}
	tmpCountValue := ""
	if req.Count != nil {
		tmpCountValue = fmt.Sprintf("%v", req.Count.Value)
	}
	tmpLimitValue := ""
	if req.Limit != nil {
		tmpLimitValue = fmt.Sprintf("%v", req.Limit.Value)
	}
	tmpShowValue := ""
	if req.Show != nil {
		tmpShowValue = fmt.Sprintf("%v", req.Show.Value)
	}
	tmpUserValue := ""
	if req.User != nil {
		tmpUserValue = fmt.Sprintf("%v", req.User.Value)
	}
	hydratedPath := fmt.Sprintf(
		"/r/%v/about/%v?after=%v&before=%v&count=%v&limit=%v&show=%v&user=%v&raw_json=1",
		tmpSubredditValue,
		req.Where,
		tmpAfterValue,
		tmpBeforeValue,
		tmpCountValue,
		tmpLimitValue,
		tmpShowValue,
		tmpUserValue)
	respBody, err := s.doRequestRaw(ctx, requestConfig{Method: "GET", ProtoMethod: "AboutWhere", Path: hydratedPath})
	if err != nil {
		return nil, err
	}
	resp, err := fixAboutWhereResponse(respBody)
	if err != nil {
		l := dlog.WithIncomingContext(ctx)
		l.Errorf("Could not unmarshal JSON for path %s: %v", hydratedPath, err)
		l.Errorf("Body failure: %v", string(respBody))
		return nil, err
	}
	return resp, nil
}

func (s *RedditHttpPlugin) DeleteSrBanner(ctx context.Context, req *redditapi.BasicSubredditRequest) (*redditapi.JsonStatus, error) {
	resp := redditapi.JsonStatus{}
	hydratedPath := fmt.Sprintf(
		"/r/%v/api/delete_sr_banner?raw_json=1",
		req.Subreddit)
	err := s.doRequest(ctx, requestConfig{Method: "POST", ProtoMethod: "DeleteSrBanner", Path: hydratedPath}, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (s *RedditHttpPlugin) DeleteSrHeader(ctx context.Context, req *redditapi.BasicSubredditRequest) (*redditapi.JsonStatus, error) {
	resp := redditapi.JsonStatus{}
	hydratedPath := fmt.Sprintf(
		"/r/%v/api/delete_sr_header?raw_json=1",
		req.Subreddit)
	err := s.doRequest(ctx, requestConfig{Method: "POST", ProtoMethod: "DeleteSrHeader", Path: hydratedPath}, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (s *RedditHttpPlugin) DeleteSrIcon(ctx context.Context, req *redditapi.BasicSubredditRequest) (*redditapi.JsonStatus, error) {
	resp := redditapi.JsonStatus{}
	hydratedPath := fmt.Sprintf(
		"/r/%v/api/delete_sr_icon?raw_json=1",
		req.Subreddit)
	err := s.doRequest(ctx, requestConfig{Method: "POST", ProtoMethod: "DeleteSrIcon", Path: hydratedPath}, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (s *RedditHttpPlugin) DeleteSrImg(ctx context.Context, req *redditapi.DeleteSrImgRequest) (*redditapi.JsonStatus, error) {
	resp := redditapi.JsonStatus{}
	hydratedPath := fmt.Sprintf(
		"/r/%v/api/delete_sr_img?raw_json=1",
		req.Subreddit)
	body := url.Values{}
	body.Add("api_type", "json")
	body.Add("img_name", req.ImgName)
	body.Add("subreddit", req.Subreddit)
	bodyBytes := []byte(body.Encode())
	err := s.doRequest(ctx, requestConfig{Method: "POST", ProtoMethod: "DeleteSrImg", BodyType: FORM_SNAKE, Body: bodyBytes, Path: hydratedPath}, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (s *RedditHttpPlugin) SearchRedditNames(ctx context.Context, req *redditapi.BasicSearchRequest) (*redditapi.SearchRedditNamesResponse, error) {
	resp := redditapi.SearchRedditNamesResponse{}
	hydratedPath := `/api/search_reddit_names?raw_json=1`
	body := url.Values{}
	if req.Exact.GetValue() != false {
		body.Add("exact", strconv.FormatBool(req.Exact.GetValue()))
	}
	if req.IncludeOver_18.GetValue() != false {
		body.Add("include_over_18", strconv.FormatBool(req.IncludeOver_18.GetValue()))
	}
	if req.IncludeUnadvertisable.GetValue() != false {
		body.Add("include_unadvertisable", strconv.FormatBool(req.IncludeUnadvertisable.GetValue()))
	}
	body.Add("query", req.Query)
	if req.SearchQueryId.GetValue() != "" {
		body.Add("search_query_id", req.SearchQueryId.GetValue())
	}
	if req.TypeaheadActive.GetValue() != false {
		body.Add("typeahead_active", strconv.FormatBool(req.TypeaheadActive.GetValue()))
	}
	bodyBytes := []byte(body.Encode())
	err := s.doRequest(ctx, requestConfig{Method: "POST", ProtoMethod: "SearchRedditNames", BodyType: FORM_SNAKE, Body: bodyBytes, Path: hydratedPath}, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (s *RedditHttpPlugin) SearchSubreddits(ctx context.Context, req *redditapi.BasicSearchRequest) (*redditapi.SearchSubredditsResponse, error) {
	resp := redditapi.SearchSubredditsResponse{}
	hydratedPath := `/api/search_subreddits?raw_json=1`
	body := url.Values{}
	if req.Exact.GetValue() != false {
		body.Add("exact", strconv.FormatBool(req.Exact.GetValue()))
	}
	if req.IncludeOver_18.GetValue() != false {
		body.Add("include_over_18", strconv.FormatBool(req.IncludeOver_18.GetValue()))
	}
	if req.IncludeUnadvertisable.GetValue() != false {
		body.Add("include_unadvertisable", strconv.FormatBool(req.IncludeUnadvertisable.GetValue()))
	}
	body.Add("query", req.Query)
	if req.SearchQueryId.GetValue() != "" {
		body.Add("search_query_id", req.SearchQueryId.GetValue())
	}
	if req.TypeaheadActive.GetValue() != false {
		body.Add("typeahead_active", strconv.FormatBool(req.TypeaheadActive.GetValue()))
	}
	bodyBytes := []byte(body.Encode())
	err := s.doRequest(ctx, requestConfig{Method: "POST", ProtoMethod: "SearchSubreddits", BodyType: FORM_SNAKE, Body: bodyBytes, Path: hydratedPath}, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (s *RedditHttpPlugin) SiteAdmin(ctx context.Context, req *redditapi.SiteAdminRequest) (*redditapi.JsonStatus, error) {
	resp := redditapi.JsonStatus{}
	hydratedPath := `/api/site_admin?raw_json=1`
	body := make(map[string]interface{})
	body["accept_followers"] = req.AcceptFollowers
	body["admin_override_spam_comments"] = req.AdminOverrideSpamComments
	body["admin_override_spam_links"] = req.AdminOverrideSpamLinks
	body["admin_override_spam_selfposts"] = req.AdminOverrideSpamSelfposts
	body["all_original_content"] = req.AllOriginalContent
	body["allow_chat_post_creation"] = req.AllowChatPostCreation
	body["allow_discovery"] = req.AllowDiscovery
	body["allow_galleries"] = req.AllowGalleries
	body["allow_images"] = req.AllowImages
	body["allow_polls"] = req.AllowPolls
	body["allow_post_crossposts"] = req.AllowPostCrossposts
	body["allow_prediction_contributors"] = req.AllowPredictionContributors
	body["allow_predictions"] = req.AllowPredictions
	body["allow_predictions_tournament"] = req.AllowPredictionsTournament
	body["allow_talks"] = req.AllowTalks
	body["allow_top"] = req.AllowTop
	body["allow_videos"] = req.AllowVideos
	body["api_type"] = "json"
	body["ban_evasion_threshold"] = req.BanEvasionThreshold
	body["collapse_deleted_comments"] = req.CollapseDeletedComments
	body["comment_contribution_settings"] = buildMessageJson(req.CommentContributionSettings)
	body["comment_score_hide_mins"] = req.CommentScoreHideMins
	body["crowd_control_chat_level"] = req.CrowdControlChatLevel
	body["crowd_control_filter"] = req.CrowdControlFilter
	body["crowd_control_level"] = req.CrowdControlLevel
	body["crowd_control_mode"] = req.CrowdControlMode
	body["crowd_control_post_level"] = req.CrowdControlPostLevel
	body["description"] = req.Description
	body["disable_contributor_requests"] = req.DisableContributorRequests
	body["exclude_banned_modqueue"] = req.ExcludeBannedModqueue
	body["free_form_reports"] = req.FreeFormReports
	body["g_recaptcha_response"] = req.GRecaptchaResponse
	body["hateful_content_threshold_abuse"] = req.HatefulContentThresholdAbuse
	body["hateful_content_threshold_identity"] = req.HatefulContentThresholdIdentity
	body["header_title"] = req.HeaderTitle
	body["hide_ads"] = req.HideAds
	body["key_color"] = req.KeyColor
	body["link_type"] = req.LinkType
	body["modmail_harassment_filter_enabled"] = req.ModmailHarassmentFilterEnabled
	body["name"] = req.Name
	body["new_pinned_post_pns_enabled"] = req.NewPinnedPostPnsEnabled
	body["original_content_tag_enabled"] = req.OriginalContentTagEnabled
	body["over_18"] = req.Over_18
	body["prediction_leaderboard_entry_type"] = req.PredictionLeaderboardEntryType
	body["public_description"] = req.PublicDescription
	body["restrict_commenting"] = req.RestrictCommenting
	body["restrict_posting"] = req.RestrictPosting
	body["should_archive_posts"] = req.ShouldArchivePosts
	body["show_media"] = req.ShowMedia
	body["show_media_preview"] = req.ShowMediaPreview
	body["spam_comments"] = req.SpamComments
	body["spam_links"] = req.SpamLinks
	body["spam_selfposts"] = req.SpamSelfposts
	body["spoilers_enabled"] = req.SpoilersEnabled
	body["sr"] = req.Sr
	body["submit_link_label"] = req.SubmitLinkLabel
	body["submit_text"] = req.SubmitText
	body["submit_text_label"] = req.SubmitTextLabel
	body["suggested_comment_sort"] = req.SuggestedCommentSort
	body["title"] = req.Title
	body["toxicity_threshold_chat_level"] = req.ToxicityThresholdChatLevel
	body["type"] = req.Type
	body["user_flair_pns_enabled"] = req.UserFlairPnsEnabled
	body["welcome_message_enabled"] = req.WelcomeMessageEnabled
	body["welcome_message_text"] = req.WelcomeMessageText
	body["wiki_edit_age"] = req.WikiEditAge
	body["wiki_edit_karma"] = req.WikiEditKarma
	body["wikimode"] = req.Wikimode
	bodyBytes, _ := json.Marshal(body)
	err := s.doRequest(ctx, requestConfig{Method: "POST", ProtoMethod: "SiteAdmin", BodyType: JSON_SNAKE, Body: bodyBytes, Path: hydratedPath}, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (s *RedditHttpPlugin) SubmitText(ctx context.Context, req *redditapi.BasicSubredditRequest) (*redditapi.SubmitTextResponse, error) {
	resp := redditapi.SubmitTextResponse{}
	hydratedPath := fmt.Sprintf(
		"/r/%v/api/submit_text?raw_json=1",
		req.Subreddit)
	err := s.doRequest(ctx, requestConfig{Method: "GET", ProtoMethod: "SubmitText", Path: hydratedPath}, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (s *RedditHttpPlugin) SubredditAutocomplete(ctx context.Context, req *redditapi.SubredditAutocompleteRequest) (*redditapi.SubredditAutocompleteResponse, error) {
	resp := redditapi.SubredditAutocompleteResponse{}
	tmpIncludeOver_18Value := ""
	if req.IncludeOver_18 != nil {
		tmpIncludeOver_18Value = fmt.Sprintf("%v", req.IncludeOver_18.Value)
	}
	tmpIncludeProfilesValue := ""
	if req.IncludeProfiles != nil {
		tmpIncludeProfilesValue = fmt.Sprintf("%v", req.IncludeProfiles.Value)
	}
	tmpLimitValue := ""
	if req.Limit != nil {
		tmpLimitValue = fmt.Sprintf("%v", req.Limit.Value)
	}
	tmpSearchQueryIdValue := ""
	if req.SearchQueryId != nil {
		tmpSearchQueryIdValue = fmt.Sprintf("%v", req.SearchQueryId.Value)
	}
	tmpTypeaheadActiveValue := ""
	if req.TypeaheadActive != nil {
		tmpTypeaheadActiveValue = fmt.Sprintf("%v", req.TypeaheadActive.Value)
	}
	hydratedPath := fmt.Sprintf(
		"/api/subreddit_autocomplete_v2?include_over_18=%v&include_profiles=%v&limit=%v&query=%v&search_query_id=%v&typeahead_active=%v&raw_json=1",
		tmpIncludeOver_18Value,
		tmpIncludeProfilesValue,
		tmpLimitValue,
		req.Query,
		tmpSearchQueryIdValue,
		tmpTypeaheadActiveValue)
	err := s.doRequest(ctx, requestConfig{Method: "GET", ProtoMethod: "SubredditAutocomplete", Path: hydratedPath}, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (s *RedditHttpPlugin) SubredditStylesheet(ctx context.Context, req *redditapi.SubredditStylesheetRequest) (*redditapi.JsonStatus, error) {
	resp := redditapi.JsonStatus{}
	hydratedPath := fmt.Sprintf(
		"/r/%v/api/subreddit_stylesheet?raw_json=1",
		req.Subreddit)
	body := url.Values{}
	body.Add("api_type", "json")
	body.Add("op", req.Op)
	body.Add("reason", req.Reason)
	body.Add("stylesheet_contents", req.StylesheetContents)
	body.Add("subreddit", req.Subreddit)
	bodyBytes := []byte(body.Encode())
	err := s.doRequest(ctx, requestConfig{Method: "POST", ProtoMethod: "SubredditStylesheet", BodyType: FORM_SNAKE, Body: bodyBytes, Path: hydratedPath}, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (s *RedditHttpPlugin) Subscribe(ctx context.Context, req *redditapi.SubscribeRequest) (*emptypb.Empty, error) {
	resp := emptypb.Empty{}
	hydratedPath := `/api/subscribe?raw_json=1`
	body := url.Values{}
	body.Add("action", req.Action)
	body.Add("action_source", req.ActionSource)
	body.Add("skip_initial_defaults", strconv.FormatBool(req.SkipInitialDefaults))
	body.Add("sr", req.Sr)
	body.Add("sr_name", req.SrName)
	bodyBytes := []byte(body.Encode())
	err := s.doRequest(ctx, requestConfig{Method: "POST", ProtoMethod: "Subscribe", BodyType: FORM_SNAKE, Body: bodyBytes, Path: hydratedPath}, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (s *RedditHttpPlugin) UploadSrImg(ctx context.Context, req *redditapi.UploadSrImgRequest) (*redditapi.UploadSrImgResponse, error) {
	resp := redditapi.UploadSrImgResponse{}
	hydratedPath := fmt.Sprintf(
		"/r/%v/api/upload_sr_img?raw_json=1",
		req.Subreddit)
	body := url.Values{}
	body.Add("file", req.File)
	body.Add("header", strconv.Itoa(int(req.Header)))
	body.Add("img_type", req.ImgType)
	body.Add("name", req.Name)
	body.Add("subreddit", req.Subreddit)
	body.Add("upload_type", req.UploadType)
	bodyBytes := []byte(body.Encode())
	err := s.doRequest(ctx, requestConfig{Method: "POST", ProtoMethod: "UploadSrImg", BodyType: FORM_SNAKE, Body: bodyBytes, Path: hydratedPath}, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (s *RedditHttpPlugin) SubredditPostRequirements(ctx context.Context, req *redditapi.BasicSubredditRequest) (*redditapi.SubredditPostRequirementsResponse, error) {
	resp := redditapi.SubredditPostRequirementsResponse{}
	hydratedPath := fmt.Sprintf(
		"/api/v1/%v/post_requirements?raw_json=1",
		req.Subreddit)
	err := s.doRequest(ctx, requestConfig{Method: "GET", ProtoMethod: "SubredditPostRequirements", Path: hydratedPath}, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (s *RedditHttpPlugin) SubredditAbout(ctx context.Context, req *redditapi.BasicSubredditRequest) (*redditapi.SubredditAboutResponse, error) {
	resp := redditapi.SubredditAboutResponse{}
	hydratedPath := fmt.Sprintf(
		"/r/%v/about?quarantine_optin=1&gated_optin=1&raw_json=1",
		req.Subreddit)
	err := s.doRequest(ctx, requestConfig{Method: "GET", ProtoMethod: "SubredditAbout", Path: hydratedPath}, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (s *RedditHttpPlugin) SubredditAboutEdit(ctx context.Context, req *redditapi.SubredditAboutEditRequest) (*redditapi.SubredditAboutEditResponse, error) {
	resp := redditapi.SubredditAboutEditResponse{}
	hydratedPath := fmt.Sprintf(
		"/r/%v/about/edit?created=%v&location=%v&raw_json=1",
		req.Subreddit,
		req.Created,
		req.Location)
	err := s.doRequest(ctx, requestConfig{Method: "GET", ProtoMethod: "SubredditAboutEdit", Path: hydratedPath}, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (s *RedditHttpPlugin) SubredditAboutRules(ctx context.Context, req *redditapi.BasicSubredditRequest) (*redditapi.SubredditAboutRulesResponse, error) {
	resp := redditapi.SubredditAboutRulesResponse{}
	hydratedPath := fmt.Sprintf(
		"/r/%v/about/rules?raw_json=1",
		req.Subreddit)
	err := s.doRequest(ctx, requestConfig{Method: "GET", ProtoMethod: "SubredditAboutRules", Path: hydratedPath}, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (s *RedditHttpPlugin) SubredditAboutTraffic(ctx context.Context, req *redditapi.BasicSubredditRequest) (*redditapi.SubredditAboutTrafficResponse, error) {
	resp := redditapi.SubredditAboutTrafficResponse{}
	hydratedPath := fmt.Sprintf(
		"/r/%v/about/traffic?raw_json=1",
		req.Subreddit)
	err := s.doRequest(ctx, requestConfig{Method: "GET", ProtoMethod: "SubredditAboutTraffic", Path: hydratedPath}, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (s *RedditHttpPlugin) Sidebar(ctx context.Context, req *redditapi.BasicSubredditRequest) (*wrapperspb.StringValue, error) {
	hydratedPath := fmt.Sprintf(
		"/r/%v/sidebar?raw_json=1",
		req.Subreddit)
	respBody, err := s.doRequestRaw(ctx, requestConfig{Method: "GET", ProtoMethod: "Sidebar", Path: hydratedPath})
	if err != nil {
		return nil, err
	}
	resp, err := fixSidebarResponse(respBody)
	if err != nil {
		l := dlog.WithIncomingContext(ctx)
		l.Errorf("Could not unmarshal JSON for path %s: %v", hydratedPath, err)
		l.Errorf("Body failure: %v", string(respBody))
		return nil, err
	}
	return resp, nil
}

func (s *RedditHttpPlugin) Sticky(ctx context.Context, req *redditapi.StickyRequest) (*redditapi.StickyResponse, error) {
	resp := redditapi.StickyResponse{}
	hydratedPath := fmt.Sprintf(
		"/r/%v/sticky?num=%v&raw_json=1",
		req.Subreddit,
		req.Num)
	err := s.doRequest(ctx, requestConfig{Method: "GET", ProtoMethod: "Sticky", Path: hydratedPath}, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (s *RedditHttpPlugin) SubredditsMineWhere(ctx context.Context, req *redditapi.BasicWhereRequest) (*redditapi.Listing, error) {
	resp := redditapi.Listing{}
	tmpAfterValue := ""
	if req.After != nil {
		tmpAfterValue = fmt.Sprintf("%v", req.After.Value)
	}
	tmpBeforeValue := ""
	if req.Before != nil {
		tmpBeforeValue = fmt.Sprintf("%v", req.Before.Value)
	}
	tmpCountValue := ""
	if req.Count != nil {
		tmpCountValue = fmt.Sprintf("%v", req.Count.Value)
	}
	tmpLimitValue := ""
	if req.Limit != nil {
		tmpLimitValue = fmt.Sprintf("%v", req.Limit.Value)
	}
	tmpShowValue := ""
	if req.Show != nil {
		tmpShowValue = fmt.Sprintf("%v", req.Show.Value)
	}
	hydratedPath := fmt.Sprintf(
		"/subreddits/mine/%v?after=%v&before=%v&count=%v&limit=%v&show=%v&raw_json=1",
		req.Where,
		tmpAfterValue,
		tmpBeforeValue,
		tmpCountValue,
		tmpLimitValue,
		tmpShowValue)
	err := s.doRequest(ctx, requestConfig{Method: "GET", ProtoMethod: "SubredditsMineWhere", Path: hydratedPath}, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (s *RedditHttpPlugin) SubredditsSearch(ctx context.Context, req *redditapi.SubredditsSearchRequest) (*redditapi.SubredditsSearchResponse, error) {
	resp := redditapi.SubredditsSearchResponse{}
	tmpAfterValue := ""
	if req.After != nil {
		tmpAfterValue = fmt.Sprintf("%v", req.After.Value)
	}
	tmpBeforeValue := ""
	if req.Before != nil {
		tmpBeforeValue = fmt.Sprintf("%v", req.Before.Value)
	}
	tmpCountValue := ""
	if req.Count != nil {
		tmpCountValue = fmt.Sprintf("%v", req.Count.Value)
	}
	tmpLimitValue := ""
	if req.Limit != nil {
		tmpLimitValue = fmt.Sprintf("%v", req.Limit.Value)
	}
	tmpSearchQueryIdValue := ""
	if req.SearchQueryId != nil {
		tmpSearchQueryIdValue = fmt.Sprintf("%v", req.SearchQueryId.Value)
	}
	tmpShowValue := ""
	if req.Show != nil {
		tmpShowValue = fmt.Sprintf("%v", req.Show.Value)
	}
	tmpShowUsersValue := ""
	if req.ShowUsers != nil {
		tmpShowUsersValue = fmt.Sprintf("%v", req.ShowUsers.Value)
	}
	tmpSortValue := ""
	if req.Sort != nil {
		tmpSortValue = fmt.Sprintf("%v", req.Sort.Value)
	}
	tmpTypeaheadActiveValue := ""
	if req.TypeaheadActive != nil {
		tmpTypeaheadActiveValue = fmt.Sprintf("%v", req.TypeaheadActive.Value)
	}
	hydratedPath := fmt.Sprintf(
		"/subreddits/search?after=%v&before=%v&count=%v&limit=%v&q=%v&search_query_id=%v&show=%v&show_users=%v&sort=%v&typeahead_active=%v&raw_json=1",
		tmpAfterValue,
		tmpBeforeValue,
		tmpCountValue,
		tmpLimitValue,
		req.Q,
		tmpSearchQueryIdValue,
		tmpShowValue,
		tmpShowUsersValue,
		tmpSortValue,
		tmpTypeaheadActiveValue)
	err := s.doRequest(ctx, requestConfig{Method: "GET", ProtoMethod: "SubredditsSearch", Path: hydratedPath}, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (s *RedditHttpPlugin) SubredditsWhere(ctx context.Context, req *redditapi.BasicWhereRequest) (*redditapi.SubredditsSearchResponse, error) {
	resp := redditapi.SubredditsSearchResponse{}
	tmpAfterValue := ""
	if req.After != nil {
		tmpAfterValue = fmt.Sprintf("%v", req.After.Value)
	}
	tmpBeforeValue := ""
	if req.Before != nil {
		tmpBeforeValue = fmt.Sprintf("%v", req.Before.Value)
	}
	tmpCountValue := ""
	if req.Count != nil {
		tmpCountValue = fmt.Sprintf("%v", req.Count.Value)
	}
	tmpLimitValue := ""
	if req.Limit != nil {
		tmpLimitValue = fmt.Sprintf("%v", req.Limit.Value)
	}
	tmpShowValue := ""
	if req.Show != nil {
		tmpShowValue = fmt.Sprintf("%v", req.Show.Value)
	}
	hydratedPath := fmt.Sprintf(
		"/subreddits/%v?after=%v&before=%v&count=%v&limit=%v&show=%v&raw_json=1",
		req.Where,
		tmpAfterValue,
		tmpBeforeValue,
		tmpCountValue,
		tmpLimitValue,
		tmpShowValue)
	err := s.doRequest(ctx, requestConfig{Method: "GET", ProtoMethod: "SubredditsWhere", Path: hydratedPath}, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (s *RedditHttpPlugin) UsersSearch(ctx context.Context, req *redditapi.UsersSearchRequest) (*redditapi.UserSearchResponse, error) {
	resp := redditapi.UserSearchResponse{}
	tmpAfterValue := ""
	if req.After != nil {
		tmpAfterValue = fmt.Sprintf("%v", req.After.Value)
	}
	tmpBeforeValue := ""
	if req.Before != nil {
		tmpBeforeValue = fmt.Sprintf("%v", req.Before.Value)
	}
	tmpCountValue := ""
	if req.Count != nil {
		tmpCountValue = fmt.Sprintf("%v", req.Count.Value)
	}
	tmpLimitValue := ""
	if req.Limit != nil {
		tmpLimitValue = fmt.Sprintf("%v", req.Limit.Value)
	}
	tmpSearchQueryIdValue := ""
	if req.SearchQueryId != nil {
		tmpSearchQueryIdValue = fmt.Sprintf("%v", req.SearchQueryId.Value)
	}
	tmpShowValue := ""
	if req.Show != nil {
		tmpShowValue = fmt.Sprintf("%v", req.Show.Value)
	}
	tmpSortValue := ""
	if req.Sort != nil {
		tmpSortValue = fmt.Sprintf("%v", req.Sort.Value)
	}
	tmpTypeaheadActiveValue := ""
	if req.TypeaheadActive != nil {
		tmpTypeaheadActiveValue = fmt.Sprintf("%v", req.TypeaheadActive.Value)
	}
	hydratedPath := fmt.Sprintf(
		"/users/search?after=%v&before=%v&count=%v&limit=%v&q=%v&search_query_id=%v&show=%v&sort=%v&typeahead_active=%v&raw_json=1",
		tmpAfterValue,
		tmpBeforeValue,
		tmpCountValue,
		tmpLimitValue,
		req.Q,
		tmpSearchQueryIdValue,
		tmpShowValue,
		tmpSortValue,
		tmpTypeaheadActiveValue)
	err := s.doRequest(ctx, requestConfig{Method: "GET", ProtoMethod: "UsersSearch", Path: hydratedPath}, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (s *RedditHttpPlugin) UsersWhere(ctx context.Context, req *redditapi.BasicWhereRequest) (*redditapi.SubredditsSearchResponse, error) {
	resp := redditapi.SubredditsSearchResponse{}
	tmpAfterValue := ""
	if req.After != nil {
		tmpAfterValue = fmt.Sprintf("%v", req.After.Value)
	}
	tmpBeforeValue := ""
	if req.Before != nil {
		tmpBeforeValue = fmt.Sprintf("%v", req.Before.Value)
	}
	tmpCountValue := ""
	if req.Count != nil {
		tmpCountValue = fmt.Sprintf("%v", req.Count.Value)
	}
	tmpLimitValue := ""
	if req.Limit != nil {
		tmpLimitValue = fmt.Sprintf("%v", req.Limit.Value)
	}
	tmpShowValue := ""
	if req.Show != nil {
		tmpShowValue = fmt.Sprintf("%v", req.Show.Value)
	}
	hydratedPath := fmt.Sprintf(
		"/users/%v?after=%v&before=%v&count=%v&limit=%v&show=%v&raw_json=1",
		req.Where,
		tmpAfterValue,
		tmpBeforeValue,
		tmpCountValue,
		tmpLimitValue,
		tmpShowValue)
	err := s.doRequest(ctx, requestConfig{Method: "GET", ProtoMethod: "UsersWhere", Path: hydratedPath}, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (s *RedditHttpPlugin) SubredditAddRemovalReason(ctx context.Context, req *redditapi.SubredditAddRemovalReasonRequest) (*redditapi.SubredditAddRemovalReasonResponse, error) {
	resp := redditapi.SubredditAddRemovalReasonResponse{}
	hydratedPath := fmt.Sprintf(
		"/api/v1/%v/removal_reasons?raw_json=1",
		req.Subreddit)
	body := url.Values{}
	body.Add("api_type", "json")
	body.Add("message", req.Message)
	body.Add("subreddit", req.Subreddit)
	body.Add("title", req.Title)
	bodyBytes := []byte(body.Encode())
	err := s.doRequest(ctx, requestConfig{Method: "POST", ProtoMethod: "SubredditAddRemovalReason", BodyType: FORM_SNAKE, Body: bodyBytes, Path: hydratedPath}, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (s *RedditHttpPlugin) SubredditGetRemovalReasons(ctx context.Context, req *redditapi.SubredditGetRemovalReasonsRequest) (*redditapi.SubredditGetRemovalReasonsResponse, error) {
	resp := redditapi.SubredditGetRemovalReasonsResponse{}
	hydratedPath := fmt.Sprintf(
		"/api/v1/%v/removal_reasons?raw_json=1",
		req.Subreddit)
	err := s.doRequest(ctx, requestConfig{Method: "GET", ProtoMethod: "SubredditGetRemovalReasons", Path: hydratedPath}, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}
