// Code generated by protoc-gen-go-redditapi. DO NOT EDIT.

package reddithttpplugin

import (
	context "context"
	fmt "fmt"
	dlog "github.snooguts.net/reddit/reddit-devplatform-monorepo/go-common/dlog"
	redditapi "github.snooguts.net/reddit/reddit-devplatform-monorepo/go-common/generated/protos/types/devvit/plugin/redditapi"
	url "net/url"
	strconv "strconv"
)

func (s *RedditHttpPlugin) ClearFlairTemplates(ctx context.Context, req *redditapi.ClearFlairTemplatesRequest) (*redditapi.JsonStatus, error) {
	resp := redditapi.JsonStatus{}
	hydratedPath := fmt.Sprintf(
		"/r/%v/api/clearflairtemplates?raw_json=1",
		req.Subreddit)
	body := url.Values{}
	body.Add("api_type", "json")
	body.Add("flair_type", req.FlairType)
	body.Add("subreddit", req.Subreddit)
	bodyBytes := []byte(body.Encode())
	err := s.doRequest(ctx, requestConfig{Method: "POST", ProtoMethod: "ClearFlairTemplates", BodyType: FORM_SNAKE, Body: bodyBytes, Path: hydratedPath}, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (s *RedditHttpPlugin) DeleteFlair(ctx context.Context, req *redditapi.DeleteFlairRequest) (*redditapi.JsonStatus, error) {
	resp := redditapi.JsonStatus{}
	hydratedPath := fmt.Sprintf(
		"/r/%v/api/deleteflair?raw_json=1",
		req.Subreddit)
	body := url.Values{}
	body.Add("name", req.Name)
	body.Add("subreddit", req.Subreddit)
	bodyBytes := []byte(body.Encode())
	err := s.doRequest(ctx, requestConfig{Method: "POST", ProtoMethod: "DeleteFlair", BodyType: FORM_SNAKE, Body: bodyBytes, Path: hydratedPath}, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (s *RedditHttpPlugin) DeleteFlairTemplate(ctx context.Context, req *redditapi.DeleteFlairTemplateRequest) (*redditapi.JsonStatus, error) {
	resp := redditapi.JsonStatus{}
	hydratedPath := fmt.Sprintf(
		"/r/%v/api/deleteflairtemplate?raw_json=1",
		req.Subreddit)
	body := url.Values{}
	body.Add("api_type", "json")
	body.Add("flair_template_id", req.FlairTemplateId)
	body.Add("subreddit", req.Subreddit)
	bodyBytes := []byte(body.Encode())
	err := s.doRequest(ctx, requestConfig{Method: "POST", ProtoMethod: "DeleteFlairTemplate", BodyType: FORM_SNAKE, Body: bodyBytes, Path: hydratedPath}, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (s *RedditHttpPlugin) Flair(ctx context.Context, req *redditapi.FlairRequest) (*redditapi.JsonStatus, error) {
	resp := redditapi.JsonStatus{}
	hydratedPath := fmt.Sprintf(
		"/r/%v/api/flair?raw_json=1",
		req.Subreddit)
	body := url.Values{}
	body.Add("api_type", "json")
	if req.CssClass.GetValue() != "" {
		body.Add("css_class", req.CssClass.GetValue())
	}
	if req.Link.GetValue() != "" {
		body.Add("link", req.Link.GetValue())
	}
	if req.Name.GetValue() != "" {
		body.Add("name", req.Name.GetValue())
	}
	body.Add("subreddit", req.Subreddit)
	if req.Text.GetValue() != "" {
		body.Add("text", req.Text.GetValue())
	}
	bodyBytes := []byte(body.Encode())
	err := s.doRequest(ctx, requestConfig{Method: "POST", ProtoMethod: "Flair", BodyType: FORM_SNAKE, Body: bodyBytes, Path: hydratedPath}, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (s *RedditHttpPlugin) FlairConfig(ctx context.Context, req *redditapi.FlairConfigRequest) (*redditapi.JsonStatus, error) {
	resp := redditapi.JsonStatus{}
	hydratedPath := fmt.Sprintf(
		"/r/%v/api/flairconfig?raw_json=1",
		req.Subreddit)
	body := url.Values{}
	body.Add("api_type", "json")
	body.Add("flair_enabled", strconv.FormatBool(req.FlairEnabled))
	body.Add("flair_position", req.FlairPosition)
	body.Add("flair_self_assign_enabled", strconv.FormatBool(req.FlairSelfAssignEnabled))
	body.Add("link_flair_position", req.LinkFlairPosition)
	body.Add("link_flair_self_assign_enabled", strconv.FormatBool(req.LinkFlairSelfAssignEnabled))
	body.Add("subreddit", req.Subreddit)
	bodyBytes := []byte(body.Encode())
	err := s.doRequest(ctx, requestConfig{Method: "POST", ProtoMethod: "FlairConfig", BodyType: FORM_SNAKE, Body: bodyBytes, Path: hydratedPath}, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (s *RedditHttpPlugin) FlairCsv(ctx context.Context, req *redditapi.FlairCsvRequest) (*redditapi.FlairCsvResponse, error) {
	hydratedPath := fmt.Sprintf(
		"/r/%v/api/flaircsv?raw_json=1",
		req.Subreddit)
	body := url.Values{}
	body.Add("api_type", "json")
	body.Add("flair_csv", req.FlairCsv)
	body.Add("subreddit", req.Subreddit)
	bodyBytes := []byte(body.Encode())
	respBody, err := s.doRequestRaw(ctx, requestConfig{Method: "POST", ProtoMethod: "FlairCsv", BodyType: FORM_SNAKE, Body: bodyBytes, Path: hydratedPath})
	if err != nil {
		return nil, err
	}
	resp, err := fixFlairCsvResponse(respBody)
	if err != nil {
		l := dlog.WithIncomingContext(ctx)
		l.Errorf("Could not unmarshal JSON for path %s: %v", hydratedPath, err)
		l.Errorf("Body failure: %v", string(respBody))
		return nil, err
	}
	return resp, nil
}

func (s *RedditHttpPlugin) FlairList(ctx context.Context, req *redditapi.FlairListRequest) (*redditapi.FlairListResponse, error) {
	resp := redditapi.FlairListResponse{}
	tmpAfterValue := ""
	if req.After != nil {
		tmpAfterValue = fmt.Sprintf("%v", req.After.Value)
	}
	tmpBeforeValue := ""
	if req.Before != nil {
		tmpBeforeValue = fmt.Sprintf("%v", req.Before.Value)
	}
	tmpCountValue := ""
	if req.Count != nil {
		tmpCountValue = fmt.Sprintf("%v", req.Count.Value)
	}
	tmpLimitValue := ""
	if req.Limit != nil {
		tmpLimitValue = fmt.Sprintf("%v", req.Limit.Value)
	}
	tmpNameValue := ""
	if req.Name != nil {
		tmpNameValue = fmt.Sprintf("%v", req.Name.Value)
	}
	tmpShowValue := ""
	if req.Show != nil {
		tmpShowValue = fmt.Sprintf("%v", req.Show.Value)
	}
	hydratedPath := fmt.Sprintf(
		"/r/%v/api/flairlist.json?after=%v&before=%v&count=%v&limit=%v&name=%v&show=%v&raw_json=1",
		req.Subreddit,
		tmpAfterValue,
		tmpBeforeValue,
		tmpCountValue,
		tmpLimitValue,
		tmpNameValue,
		tmpShowValue)
	err := s.doRequest(ctx, requestConfig{Method: "GET", ProtoMethod: "FlairList", Path: hydratedPath}, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (s *RedditHttpPlugin) FlairSelector(ctx context.Context, req *redditapi.FlairSelectorRequest) (*redditapi.FlairSelectorResponse, error) {
	resp := redditapi.FlairSelectorResponse{}
	tmpLinkValue := ""
	if req.Link != nil {
		tmpLinkValue = fmt.Sprintf("%v", req.Link.Value)
	}
	hydratedPath := fmt.Sprintf(
		"/r/%v/api/flairselector?name=%v&link=%v&is_newlink=%v&raw_json=1",
		req.Subreddit,
		req.Name,
		tmpLinkValue,
		req.IsNewlink)
	err := s.doRequest(ctx, requestConfig{Method: "POST", ProtoMethod: "FlairSelector", Path: hydratedPath}, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (s *RedditHttpPlugin) FlairTemplate(ctx context.Context, req *redditapi.FlairTemplateRequest) (*redditapi.FlairObject, error) {
	resp := redditapi.FlairObject{}
	hydratedPath := fmt.Sprintf(
		"/r/%v/api/flairtemplate_v2?raw_json=1",
		req.Subreddit)
	body := url.Values{}
	body.Add("allowable_content", req.AllowableContent)
	body.Add("api_type", "json")
	body.Add("background_color", req.BackgroundColor)
	body.Add("css_class", req.CssClass)
	body.Add("flair_template_id", req.FlairTemplateId)
	body.Add("flair_type", req.FlairType)
	body.Add("max_emojis", strconv.Itoa(int(req.MaxEmojis)))
	body.Add("mod_only", strconv.FormatBool(req.ModOnly))
	body.Add("override_css", strconv.FormatBool(req.OverrideCss))
	body.Add("subreddit", req.Subreddit)
	body.Add("text", req.Text)
	body.Add("text_color", req.TextColor)
	body.Add("text_editable", strconv.FormatBool(req.TextEditable))
	bodyBytes := []byte(body.Encode())
	err := s.doRequest(ctx, requestConfig{Method: "POST", ProtoMethod: "FlairTemplate", BodyType: FORM_SNAKE, Body: bodyBytes, Path: hydratedPath}, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (s *RedditHttpPlugin) LinkFlair(ctx context.Context, req *redditapi.LinkFlairRequest) (*redditapi.FlairArray, error) {
	hydratedPath := fmt.Sprintf(
		"/r/%v/api/link_flair_v2?raw_json=1",
		req.Subreddit)
	respBody, err := s.doRequestRaw(ctx, requestConfig{Method: "GET", ProtoMethod: "LinkFlair", Path: hydratedPath})
	if err != nil {
		return nil, err
	}
	resp, err := fixLinkFlairResponse(respBody)
	if err != nil {
		l := dlog.WithIncomingContext(ctx)
		l.Errorf("Could not unmarshal JSON for path %s: %v", hydratedPath, err)
		l.Errorf("Body failure: %v", string(respBody))
		return nil, err
	}
	return resp, nil
}

func (s *RedditHttpPlugin) SelectFlair(ctx context.Context, req *redditapi.SelectFlairRequest) (*redditapi.JsonStatus, error) {
	resp := redditapi.JsonStatus{}
	hydratedPath := fmt.Sprintf(
		"/r/%v/api/selectflair?raw_json=1",
		req.Subreddit)
	body := url.Values{}
	body.Add("api_type", "json")
	body.Add("background_color", req.BackgroundColor)
	body.Add("css_class", req.CssClass)
	body.Add("flair_template_id", req.FlairTemplateId)
	body.Add("link", req.Link)
	body.Add("name", req.Name)
	body.Add("return_rtjson", req.ReturnRtjson)
	body.Add("subreddit", req.Subreddit)
	body.Add("text", req.Text)
	body.Add("text_color", req.TextColor)
	bodyBytes := []byte(body.Encode())
	err := s.doRequest(ctx, requestConfig{Method: "POST", ProtoMethod: "SelectFlair", BodyType: FORM_SNAKE, Body: bodyBytes, Path: hydratedPath}, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (s *RedditHttpPlugin) SetFlairEnabled(ctx context.Context, req *redditapi.SetFlairEnabledRequest) (*redditapi.JsonStatus, error) {
	resp := redditapi.JsonStatus{}
	hydratedPath := fmt.Sprintf(
		"/r/%v/api/setflairenabled?raw_json=1",
		req.Subreddit)
	body := url.Values{}
	body.Add("api_type", "json")
	body.Add("flair_enabled", strconv.FormatBool(req.FlairEnabled))
	body.Add("subreddit", req.Subreddit)
	bodyBytes := []byte(body.Encode())
	err := s.doRequest(ctx, requestConfig{Method: "POST", ProtoMethod: "SetFlairEnabled", BodyType: FORM_SNAKE, Body: bodyBytes, Path: hydratedPath}, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (s *RedditHttpPlugin) UserFlair(ctx context.Context, req *redditapi.LinkFlairRequest) (*redditapi.FlairArray, error) {
	hydratedPath := fmt.Sprintf(
		"/r/%v/api/user_flair_v2?raw_json=1",
		req.Subreddit)
	respBody, err := s.doRequestRaw(ctx, requestConfig{Method: "GET", ProtoMethod: "UserFlair", Path: hydratedPath})
	if err != nil {
		return nil, err
	}
	resp, err := fixUserFlairResponse(respBody)
	if err != nil {
		l := dlog.WithIncomingContext(ctx)
		l.Errorf("Could not unmarshal JSON for path %s: %v", hydratedPath, err)
		l.Errorf("Body failure: %v", string(respBody))
		return nil, err
	}
	return resp, nil
}
