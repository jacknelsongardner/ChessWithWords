// Code generated by protoc-gen-go-redditapi. DO NOT EDIT.

package reddithttpplugin

import (
	context "context"
	json "encoding/json"
	fmt "fmt"
	redditapi "github.snooguts.net/reddit/reddit-devplatform-monorepo/go-common/generated/protos/types/devvit/plugin/redditapi"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	url "net/url"
)

func (s *RedditHttpPlugin) GetNotes(ctx context.Context, req *redditapi.GetNotesRequest) (*redditapi.ModNotesResponse, error) {
	resp := redditapi.ModNotesResponse{}
	tmpBeforeValue := ""
	if req.Before != nil {
		tmpBeforeValue = fmt.Sprintf("%v", req.Before.Value)
	}
	tmpFilterValue := ""
	if req.Filter != nil {
		tmpFilterValue = fmt.Sprintf("%v", req.Filter.Value)
	}
	tmpLimitValue := ""
	if req.Limit != nil {
		tmpLimitValue = fmt.Sprintf("%v", req.Limit.Value)
	}
	hydratedPath := fmt.Sprintf(
		"/api/mod/notes?before=%v&filter=%v&limit=%v&subreddit=%v&user=%v&raw_json=1",
		tmpBeforeValue,
		tmpFilterValue,
		tmpLimitValue,
		req.Subreddit,
		req.User)
	err := s.doRequest(ctx, requestConfig{Method: "GET", ProtoMethod: "GetNotes", Path: hydratedPath}, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (s *RedditHttpPlugin) DeleteNotes(ctx context.Context, req *redditapi.DeleteNotesRequest) (*redditapi.DeleteNotesResponse, error) {
	resp := redditapi.DeleteNotesResponse{}
	hydratedPath := fmt.Sprintf(
		"/api/mod/notes?note_id=%v&subreddit=%v&user=%v&raw_json=1",
		req.NoteId,
		req.Subreddit,
		req.User)
	err := s.doRequest(ctx, requestConfig{Method: "DELETE", ProtoMethod: "DeleteNotes", Path: hydratedPath}, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (s *RedditHttpPlugin) PostNotes(ctx context.Context, req *redditapi.PostNotesRequest) (*redditapi.PostModNotesResponse, error) {
	resp := redditapi.PostModNotesResponse{}
	hydratedPath := `/api/mod/notes?raw_json=1`
	body := url.Values{}
	if req.Label != nil && *req.Label != "" {
		body.Add("label", *req.Label)
	}
	body.Add("note", req.Note)
	if req.RedditId.GetValue() != "" {
		body.Add("reddit_id", req.RedditId.GetValue())
	}
	body.Add("subreddit", req.Subreddit)
	body.Add("user", req.User)
	bodyBytes := []byte(body.Encode())
	err := s.doRequest(ctx, requestConfig{Method: "POST", ProtoMethod: "PostNotes", BodyType: FORM_SNAKE, Body: bodyBytes, Path: hydratedPath}, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (s *RedditHttpPlugin) PostRemovalNote(ctx context.Context, req *redditapi.PostRemovalNoteRequest) (*emptypb.Empty, error) {
	resp := emptypb.Empty{}
	hydratedPath := `/api/v1/modactions/removal_reasons?raw_json=1`
	body := make(map[string]interface{})
	body["item_ids"] = req.ItemIds
	if req.ModNote.GetValue() != "" {
		body["mod_note"] = req.ModNote.GetValue()
	}
	body["reason_id"] = req.ReasonId
	bodyBytes, _ := json.Marshal(body)
	err := s.doRequest(ctx, requestConfig{Method: "POST", ProtoMethod: "PostRemovalNote", BodyType: JSON_SNAKE, Body: bodyBytes, Path: hydratedPath}, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (s *RedditHttpPlugin) RecentNotes(ctx context.Context, req *redditapi.RecentNotesRequest) (*redditapi.ModNotesResponse, error) {
	resp := redditapi.ModNotesResponse{}
	hydratedPath := fmt.Sprintf(
		"/api/mod/notes/recent?subreddits=%v&users=%v&raw_json=1",
		req.Subreddits,
		req.Users)
	err := s.doRequest(ctx, requestConfig{Method: "GET", ProtoMethod: "RecentNotes", Path: hydratedPath}, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}
