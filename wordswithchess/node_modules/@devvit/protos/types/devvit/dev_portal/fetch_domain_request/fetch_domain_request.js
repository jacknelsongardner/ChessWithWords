/**
 * #fetch_domain_request.ts
 *
 * Code generated by ts-proto. DO NOT EDIT.
 * @packageDocumentation
 */
/* eslint-disable */
import _m0 from "protobufjs/minimal.js";
import { Timestamp } from "../../../google/protobuf/timestamp.js";
import { messageTypeRegistry } from "../../../typeRegistry.js";
import { Redditor } from "../reddit/redditor.js";
/** The status of the domain request, eg 'PENDING', 'APPROVED', 'DENIED' */
export var FetchDomainRequestStatus;
(function (FetchDomainRequestStatus) {
    FetchDomainRequestStatus[FetchDomainRequestStatus["PENDING"] = 0] = "PENDING";
    FetchDomainRequestStatus[FetchDomainRequestStatus["APPROVED"] = 1] = "APPROVED";
    FetchDomainRequestStatus[FetchDomainRequestStatus["DENIED"] = 2] = "DENIED";
    FetchDomainRequestStatus[FetchDomainRequestStatus["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(FetchDomainRequestStatus || (FetchDomainRequestStatus = {}));
export function fetchDomainRequestStatusFromJSON(object) {
    switch (object) {
        case 0:
        case "PENDING":
            return FetchDomainRequestStatus.PENDING;
        case 1:
        case "APPROVED":
            return FetchDomainRequestStatus.APPROVED;
        case 2:
        case "DENIED":
            return FetchDomainRequestStatus.DENIED;
        case -1:
        case "UNRECOGNIZED":
        default:
            return FetchDomainRequestStatus.UNRECOGNIZED;
    }
}
export function fetchDomainRequestStatusToJSON(object) {
    switch (object) {
        case FetchDomainRequestStatus.PENDING:
            return 0;
        case FetchDomainRequestStatus.APPROVED:
            return 1;
        case FetchDomainRequestStatus.DENIED:
            return 2;
        case FetchDomainRequestStatus.UNRECOGNIZED:
        default:
            return -1;
    }
}
function createBaseFetchDomainRequestInfo() {
    return {
        id: "",
        createdAt: undefined,
        updatedAt: undefined,
        domain: "",
        status: 0,
        reviewerId: undefined,
        appSlug: undefined,
        appOwnerAccount: undefined,
        reviewerAccount: undefined,
        timeInQueue: undefined,
    };
}
export const FetchDomainRequestInfo = {
    $type: "devvit.dev_portal.fetch_domain_request.FetchDomainRequestInfo",
    encode(message, writer = _m0.Writer.create()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.createdAt !== undefined) {
            Timestamp.encode(toTimestamp(message.createdAt), writer.uint32(18).fork()).ldelim();
        }
        if (message.updatedAt !== undefined) {
            Timestamp.encode(toTimestamp(message.updatedAt), writer.uint32(26).fork()).ldelim();
        }
        if (message.domain !== "") {
            writer.uint32(34).string(message.domain);
        }
        if (message.status !== 0) {
            writer.uint32(40).int32(message.status);
        }
        if (message.reviewerId !== undefined) {
            writer.uint32(50).string(message.reviewerId);
        }
        if (message.appSlug !== undefined) {
            writer.uint32(58).string(message.appSlug);
        }
        if (message.appOwnerAccount !== undefined) {
            Redditor.encode(message.appOwnerAccount, writer.uint32(66).fork()).ldelim();
        }
        if (message.reviewerAccount !== undefined) {
            Redditor.encode(message.reviewerAccount, writer.uint32(74).fork()).ldelim();
        }
        if (message.timeInQueue !== undefined) {
            writer.uint32(82).string(message.timeInQueue);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseFetchDomainRequestInfo();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.createdAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.updatedAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.domain = reader.string();
                    continue;
                case 5:
                    if (tag !== 40) {
                        break;
                    }
                    message.status = reader.int32();
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.reviewerId = reader.string();
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.appSlug = reader.string();
                    continue;
                case 8:
                    if (tag !== 66) {
                        break;
                    }
                    message.appOwnerAccount = Redditor.decode(reader, reader.uint32());
                    continue;
                case 9:
                    if (tag !== 74) {
                        break;
                    }
                    message.reviewerAccount = Redditor.decode(reader, reader.uint32());
                    continue;
                case 10:
                    if (tag !== 82) {
                        break;
                    }
                    message.timeInQueue = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            createdAt: isSet(object.createdAt) ? fromJsonTimestamp(object.createdAt) : undefined,
            updatedAt: isSet(object.updatedAt) ? fromJsonTimestamp(object.updatedAt) : undefined,
            domain: isSet(object.domain) ? globalThis.String(object.domain) : "",
            status: isSet(object.status) ? fetchDomainRequestStatusFromJSON(object.status) : 0,
            reviewerId: isSet(object.reviewerId) ? globalThis.String(object.reviewerId) : undefined,
            appSlug: isSet(object.appSlug) ? globalThis.String(object.appSlug) : undefined,
            appOwnerAccount: isSet(object.appOwnerAccount) ? Redditor.fromJSON(object.appOwnerAccount) : undefined,
            reviewerAccount: isSet(object.reviewerAccount) ? Redditor.fromJSON(object.reviewerAccount) : undefined,
            timeInQueue: isSet(object.timeInQueue) ? globalThis.String(object.timeInQueue) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.createdAt !== undefined) {
            obj.createdAt = message.createdAt.toISOString();
        }
        if (message.updatedAt !== undefined) {
            obj.updatedAt = message.updatedAt.toISOString();
        }
        if (message.domain !== "") {
            obj.domain = message.domain;
        }
        if (message.status !== 0) {
            obj.status = fetchDomainRequestStatusToJSON(message.status);
        }
        if (message.reviewerId !== undefined) {
            obj.reviewerId = message.reviewerId;
        }
        if (message.appSlug !== undefined) {
            obj.appSlug = message.appSlug;
        }
        if (message.appOwnerAccount !== undefined) {
            obj.appOwnerAccount = Redditor.toJSON(message.appOwnerAccount);
        }
        if (message.reviewerAccount !== undefined) {
            obj.reviewerAccount = Redditor.toJSON(message.reviewerAccount);
        }
        if (message.timeInQueue !== undefined) {
            obj.timeInQueue = message.timeInQueue;
        }
        return obj;
    },
    create(base) {
        return FetchDomainRequestInfo.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseFetchDomainRequestInfo();
        message.id = object.id ?? "";
        message.createdAt = object.createdAt ?? undefined;
        message.updatedAt = object.updatedAt ?? undefined;
        message.domain = object.domain ?? "";
        message.status = object.status ?? 0;
        message.reviewerId = object.reviewerId ?? undefined;
        message.appSlug = object.appSlug ?? undefined;
        message.appOwnerAccount = (object.appOwnerAccount !== undefined && object.appOwnerAccount !== null)
            ? Redditor.fromPartial(object.appOwnerAccount)
            : undefined;
        message.reviewerAccount = (object.reviewerAccount !== undefined && object.reviewerAccount !== null)
            ? Redditor.fromPartial(object.reviewerAccount)
            : undefined;
        message.timeInQueue = object.timeInQueue ?? undefined;
        return message;
    },
};
messageTypeRegistry.set(FetchDomainRequestInfo.$type, FetchDomainRequestInfo);
function createBaseGetPendingRequest() {
    return { pageSize: 0, pageNumber: 0 };
}
export const GetPendingRequest = {
    $type: "devvit.dev_portal.fetch_domain_request.GetPendingRequest",
    encode(message, writer = _m0.Writer.create()) {
        if (message.pageSize !== 0) {
            writer.uint32(8).int32(message.pageSize);
        }
        if (message.pageNumber !== 0) {
            writer.uint32(16).int32(message.pageNumber);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetPendingRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.pageSize = reader.int32();
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.pageNumber = reader.int32();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
            pageNumber: isSet(object.pageNumber) ? globalThis.Number(object.pageNumber) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.pageSize !== 0) {
            obj.pageSize = Math.round(message.pageSize);
        }
        if (message.pageNumber !== 0) {
            obj.pageNumber = Math.round(message.pageNumber);
        }
        return obj;
    },
    create(base) {
        return GetPendingRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetPendingRequest();
        message.pageSize = object.pageSize ?? 0;
        message.pageNumber = object.pageNumber ?? 0;
        return message;
    },
};
messageTypeRegistry.set(GetPendingRequest.$type, GetPendingRequest);
function createBaseGetResponse() {
    return { fetchDomainRequests: [], hasNextPage: undefined };
}
export const GetResponse = {
    $type: "devvit.dev_portal.fetch_domain_request.GetResponse",
    encode(message, writer = _m0.Writer.create()) {
        for (const v of message.fetchDomainRequests) {
            FetchDomainRequestInfo.encode(v, writer.uint32(10).fork()).ldelim();
        }
        if (message.hasNextPage !== undefined) {
            writer.uint32(16).bool(message.hasNextPage);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.fetchDomainRequests.push(FetchDomainRequestInfo.decode(reader, reader.uint32()));
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.hasNextPage = reader.bool();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            fetchDomainRequests: globalThis.Array.isArray(object?.fetchDomainRequests)
                ? object.fetchDomainRequests.map((e) => FetchDomainRequestInfo.fromJSON(e))
                : [],
            hasNextPage: isSet(object.hasNextPage) ? globalThis.Boolean(object.hasNextPage) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.fetchDomainRequests?.length) {
            obj.fetchDomainRequests = message.fetchDomainRequests.map((e) => FetchDomainRequestInfo.toJSON(e));
        }
        if (message.hasNextPage !== undefined) {
            obj.hasNextPage = message.hasNextPage;
        }
        return obj;
    },
    create(base) {
        return GetResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetResponse();
        message.fetchDomainRequests = object.fetchDomainRequests?.map((e) => FetchDomainRequestInfo.fromPartial(e)) || [];
        message.hasNextPage = object.hasNextPage ?? undefined;
        return message;
    },
};
messageTypeRegistry.set(GetResponse.$type, GetResponse);
function createBaseUpdateStatusForAppRequest() {
    return { id: "", appSlug: "", domain: "", status: 0 };
}
export const UpdateStatusForAppRequest = {
    $type: "devvit.dev_portal.fetch_domain_request.UpdateStatusForAppRequest",
    encode(message, writer = _m0.Writer.create()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.appSlug !== "") {
            writer.uint32(18).string(message.appSlug);
        }
        if (message.domain !== "") {
            writer.uint32(26).string(message.domain);
        }
        if (message.status !== 0) {
            writer.uint32(32).int32(message.status);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateStatusForAppRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.appSlug = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.domain = reader.string();
                    continue;
                case 4:
                    if (tag !== 32) {
                        break;
                    }
                    message.status = reader.int32();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            appSlug: isSet(object.appSlug) ? globalThis.String(object.appSlug) : "",
            domain: isSet(object.domain) ? globalThis.String(object.domain) : "",
            status: isSet(object.status) ? fetchDomainRequestStatusFromJSON(object.status) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.appSlug !== "") {
            obj.appSlug = message.appSlug;
        }
        if (message.domain !== "") {
            obj.domain = message.domain;
        }
        if (message.status !== 0) {
            obj.status = fetchDomainRequestStatusToJSON(message.status);
        }
        return obj;
    },
    create(base) {
        return UpdateStatusForAppRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseUpdateStatusForAppRequest();
        message.id = object.id ?? "";
        message.appSlug = object.appSlug ?? "";
        message.domain = object.domain ?? "";
        message.status = object.status ?? 0;
        return message;
    },
};
messageTypeRegistry.set(UpdateStatusForAppRequest.$type, UpdateStatusForAppRequest);
function toTimestamp(date) {
    const seconds = Math.trunc(date.getTime() / 1000);
    const nanos = (date.getTime() % 1000) * 1000000;
    return { seconds, nanos };
}
function fromTimestamp(t) {
    let millis = (t.seconds || 0) * 1000;
    millis += (t.nanos || 0) / 1000000;
    return new globalThis.Date(millis);
}
function fromJsonTimestamp(o) {
    if (o instanceof globalThis.Date) {
        return o;
    }
    else if (typeof o === "string") {
        return new globalThis.Date(o);
    }
    else {
        return fromTimestamp(Timestamp.fromJSON(o));
    }
}
function isSet(value) {
    return value !== null && value !== undefined;
}
