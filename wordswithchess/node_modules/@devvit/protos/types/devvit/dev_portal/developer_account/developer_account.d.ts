/**
 * #developer_account.ts
 *
 * Code generated by ts-proto. DO NOT EDIT.
 * @packageDocumentation
 */
import _m0 from "protobufjs/minimal.js";
export interface DeveloperAccountRegisterUserRequest {
    /** Thing ID (T2 ID with prefix. eg, t2_123abc.) */
    userId: string;
    /** Username */
    userName: string;
    doesConsentToEmail: boolean;
}
export interface GetUserAccountInfoResponse {
    /** The version of the developer terms & conditions accepted by the user upon Developer Account creation (ie, 2) */
    acceptedTermsVersion: number;
    /** The current version of the developer terms & conditions */
    currentTermsVersion: number;
    hasVerifiedEmail: boolean;
    /** User selected preferences for email communication from the Developer Platform */
    doesConsentToEmail: boolean;
    /** Thing ID (T2 ID with prefix. eg, t2_123abc.), optional because user could be logged out */
    userId?: string | undefined;
}
export interface DeveloperAccountInfo {
    /** UUID of the Developer Account, assigned in database */
    id: string;
    /** Thing I (T2 ID with prefix. eg, t2_123abc.), optional because user could be logged out */
    userId: string;
    /** User's reddit username (eg, "spez") */
    userName: string;
    createdAt?: Date | undefined;
    /** The version of the developer terms & conditions accepted by the user upon Developer Account creation (ie, 2) */
    acceptedTermsVersion: number;
    /** Timestamp of when the user accepted the current developer terms & conditions */
    acceptedTermsVersionAt?: Date | undefined;
    /** Whether the user has verified the email address associated with their Reddit Account */
    hasVerifiedEmail: boolean;
    /** User selected preferences for email communication from the Developer Platform */
    doesConsentToEmail: boolean;
}
export declare const DeveloperAccountRegisterUserRequest: {
    $type: "devvit.dev_portal.developer_account.DeveloperAccountRegisterUserRequest";
    encode(message: DeveloperAccountRegisterUserRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): DeveloperAccountRegisterUserRequest;
    fromJSON(object: any): DeveloperAccountRegisterUserRequest;
    toJSON(message: DeveloperAccountRegisterUserRequest): unknown;
    create(base?: DeepPartial<DeveloperAccountRegisterUserRequest>): DeveloperAccountRegisterUserRequest;
    fromPartial(object: DeepPartial<DeveloperAccountRegisterUserRequest>): DeveloperAccountRegisterUserRequest;
};
export declare const GetUserAccountInfoResponse: {
    $type: "devvit.dev_portal.developer_account.GetUserAccountInfoResponse";
    encode(message: GetUserAccountInfoResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GetUserAccountInfoResponse;
    fromJSON(object: any): GetUserAccountInfoResponse;
    toJSON(message: GetUserAccountInfoResponse): unknown;
    create(base?: DeepPartial<GetUserAccountInfoResponse>): GetUserAccountInfoResponse;
    fromPartial(object: DeepPartial<GetUserAccountInfoResponse>): GetUserAccountInfoResponse;
};
export declare const DeveloperAccountInfo: {
    $type: "devvit.dev_portal.developer_account.DeveloperAccountInfo";
    encode(message: DeveloperAccountInfo, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): DeveloperAccountInfo;
    fromJSON(object: any): DeveloperAccountInfo;
    toJSON(message: DeveloperAccountInfo): unknown;
    create(base?: DeepPartial<DeveloperAccountInfo>): DeveloperAccountInfo;
    fromPartial(object: DeepPartial<DeveloperAccountInfo>): DeveloperAccountInfo;
};
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
type DeepPartial<T> = T extends Builtin ? T : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export {};
//# sourceMappingURL=developer_account.d.ts.map