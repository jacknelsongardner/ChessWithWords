/**
 * #developer_account.ts
 *
 * Code generated by ts-proto. DO NOT EDIT.
 * @packageDocumentation
 */
/* eslint-disable */
import _m0 from "protobufjs/minimal.js";
import { Timestamp } from "../../../google/protobuf/timestamp.js";
import { messageTypeRegistry } from "../../../typeRegistry.js";
function createBaseDeveloperAccountRegisterUserRequest() {
    return { userId: "", userName: "", doesConsentToEmail: false };
}
export const DeveloperAccountRegisterUserRequest = {
    $type: "devvit.dev_portal.developer_account.DeveloperAccountRegisterUserRequest",
    encode(message, writer = _m0.Writer.create()) {
        if (message.userId !== "") {
            writer.uint32(10).string(message.userId);
        }
        if (message.userName !== "") {
            writer.uint32(18).string(message.userName);
        }
        if (message.doesConsentToEmail !== false) {
            writer.uint32(24).bool(message.doesConsentToEmail);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDeveloperAccountRegisterUserRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.userId = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.userName = reader.string();
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.doesConsentToEmail = reader.bool();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
            userName: isSet(object.userName) ? globalThis.String(object.userName) : "",
            doesConsentToEmail: isSet(object.doesConsentToEmail) ? globalThis.Boolean(object.doesConsentToEmail) : false,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.userId !== "") {
            obj.userId = message.userId;
        }
        if (message.userName !== "") {
            obj.userName = message.userName;
        }
        if (message.doesConsentToEmail !== false) {
            obj.doesConsentToEmail = message.doesConsentToEmail;
        }
        return obj;
    },
    create(base) {
        return DeveloperAccountRegisterUserRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseDeveloperAccountRegisterUserRequest();
        message.userId = object.userId ?? "";
        message.userName = object.userName ?? "";
        message.doesConsentToEmail = object.doesConsentToEmail ?? false;
        return message;
    },
};
messageTypeRegistry.set(DeveloperAccountRegisterUserRequest.$type, DeveloperAccountRegisterUserRequest);
function createBaseGetUserAccountInfoResponse() {
    return {
        acceptedTermsVersion: 0,
        currentTermsVersion: 0,
        hasVerifiedEmail: false,
        doesConsentToEmail: false,
        userId: undefined,
    };
}
export const GetUserAccountInfoResponse = {
    $type: "devvit.dev_portal.developer_account.GetUserAccountInfoResponse",
    encode(message, writer = _m0.Writer.create()) {
        if (message.acceptedTermsVersion !== 0) {
            writer.uint32(8).int32(message.acceptedTermsVersion);
        }
        if (message.currentTermsVersion !== 0) {
            writer.uint32(16).int32(message.currentTermsVersion);
        }
        if (message.hasVerifiedEmail !== false) {
            writer.uint32(24).bool(message.hasVerifiedEmail);
        }
        if (message.doesConsentToEmail !== false) {
            writer.uint32(32).bool(message.doesConsentToEmail);
        }
        if (message.userId !== undefined) {
            writer.uint32(42).string(message.userId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetUserAccountInfoResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.acceptedTermsVersion = reader.int32();
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.currentTermsVersion = reader.int32();
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.hasVerifiedEmail = reader.bool();
                    continue;
                case 4:
                    if (tag !== 32) {
                        break;
                    }
                    message.doesConsentToEmail = reader.bool();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.userId = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            acceptedTermsVersion: isSet(object.acceptedTermsVersion) ? globalThis.Number(object.acceptedTermsVersion) : 0,
            currentTermsVersion: isSet(object.currentTermsVersion) ? globalThis.Number(object.currentTermsVersion) : 0,
            hasVerifiedEmail: isSet(object.hasVerifiedEmail) ? globalThis.Boolean(object.hasVerifiedEmail) : false,
            doesConsentToEmail: isSet(object.doesConsentToEmail) ? globalThis.Boolean(object.doesConsentToEmail) : false,
            userId: isSet(object.userId) ? globalThis.String(object.userId) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.acceptedTermsVersion !== 0) {
            obj.acceptedTermsVersion = Math.round(message.acceptedTermsVersion);
        }
        if (message.currentTermsVersion !== 0) {
            obj.currentTermsVersion = Math.round(message.currentTermsVersion);
        }
        if (message.hasVerifiedEmail !== false) {
            obj.hasVerifiedEmail = message.hasVerifiedEmail;
        }
        if (message.doesConsentToEmail !== false) {
            obj.doesConsentToEmail = message.doesConsentToEmail;
        }
        if (message.userId !== undefined) {
            obj.userId = message.userId;
        }
        return obj;
    },
    create(base) {
        return GetUserAccountInfoResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetUserAccountInfoResponse();
        message.acceptedTermsVersion = object.acceptedTermsVersion ?? 0;
        message.currentTermsVersion = object.currentTermsVersion ?? 0;
        message.hasVerifiedEmail = object.hasVerifiedEmail ?? false;
        message.doesConsentToEmail = object.doesConsentToEmail ?? false;
        message.userId = object.userId ?? undefined;
        return message;
    },
};
messageTypeRegistry.set(GetUserAccountInfoResponse.$type, GetUserAccountInfoResponse);
function createBaseDeveloperAccountInfo() {
    return {
        id: "",
        userId: "",
        userName: "",
        createdAt: undefined,
        acceptedTermsVersion: 0,
        acceptedTermsVersionAt: undefined,
        hasVerifiedEmail: false,
        doesConsentToEmail: false,
    };
}
export const DeveloperAccountInfo = {
    $type: "devvit.dev_portal.developer_account.DeveloperAccountInfo",
    encode(message, writer = _m0.Writer.create()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.userId !== "") {
            writer.uint32(18).string(message.userId);
        }
        if (message.userName !== "") {
            writer.uint32(26).string(message.userName);
        }
        if (message.createdAt !== undefined) {
            Timestamp.encode(toTimestamp(message.createdAt), writer.uint32(34).fork()).ldelim();
        }
        if (message.acceptedTermsVersion !== 0) {
            writer.uint32(40).int32(message.acceptedTermsVersion);
        }
        if (message.acceptedTermsVersionAt !== undefined) {
            Timestamp.encode(toTimestamp(message.acceptedTermsVersionAt), writer.uint32(50).fork()).ldelim();
        }
        if (message.hasVerifiedEmail !== false) {
            writer.uint32(56).bool(message.hasVerifiedEmail);
        }
        if (message.doesConsentToEmail !== false) {
            writer.uint32(64).bool(message.doesConsentToEmail);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDeveloperAccountInfo();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.userId = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.userName = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.createdAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
                    continue;
                case 5:
                    if (tag !== 40) {
                        break;
                    }
                    message.acceptedTermsVersion = reader.int32();
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.acceptedTermsVersionAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
                    continue;
                case 7:
                    if (tag !== 56) {
                        break;
                    }
                    message.hasVerifiedEmail = reader.bool();
                    continue;
                case 8:
                    if (tag !== 64) {
                        break;
                    }
                    message.doesConsentToEmail = reader.bool();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
            userName: isSet(object.userName) ? globalThis.String(object.userName) : "",
            createdAt: isSet(object.createdAt) ? fromJsonTimestamp(object.createdAt) : undefined,
            acceptedTermsVersion: isSet(object.acceptedTermsVersion) ? globalThis.Number(object.acceptedTermsVersion) : 0,
            acceptedTermsVersionAt: isSet(object.acceptedTermsVersionAt)
                ? fromJsonTimestamp(object.acceptedTermsVersionAt)
                : undefined,
            hasVerifiedEmail: isSet(object.hasVerifiedEmail) ? globalThis.Boolean(object.hasVerifiedEmail) : false,
            doesConsentToEmail: isSet(object.doesConsentToEmail) ? globalThis.Boolean(object.doesConsentToEmail) : false,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.userId !== "") {
            obj.userId = message.userId;
        }
        if (message.userName !== "") {
            obj.userName = message.userName;
        }
        if (message.createdAt !== undefined) {
            obj.createdAt = message.createdAt.toISOString();
        }
        if (message.acceptedTermsVersion !== 0) {
            obj.acceptedTermsVersion = Math.round(message.acceptedTermsVersion);
        }
        if (message.acceptedTermsVersionAt !== undefined) {
            obj.acceptedTermsVersionAt = message.acceptedTermsVersionAt.toISOString();
        }
        if (message.hasVerifiedEmail !== false) {
            obj.hasVerifiedEmail = message.hasVerifiedEmail;
        }
        if (message.doesConsentToEmail !== false) {
            obj.doesConsentToEmail = message.doesConsentToEmail;
        }
        return obj;
    },
    create(base) {
        return DeveloperAccountInfo.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseDeveloperAccountInfo();
        message.id = object.id ?? "";
        message.userId = object.userId ?? "";
        message.userName = object.userName ?? "";
        message.createdAt = object.createdAt ?? undefined;
        message.acceptedTermsVersion = object.acceptedTermsVersion ?? 0;
        message.acceptedTermsVersionAt = object.acceptedTermsVersionAt ?? undefined;
        message.hasVerifiedEmail = object.hasVerifiedEmail ?? false;
        message.doesConsentToEmail = object.doesConsentToEmail ?? false;
        return message;
    },
};
messageTypeRegistry.set(DeveloperAccountInfo.$type, DeveloperAccountInfo);
function toTimestamp(date) {
    const seconds = Math.trunc(date.getTime() / 1000);
    const nanos = (date.getTime() % 1000) * 1000000;
    return { seconds, nanos };
}
function fromTimestamp(t) {
    let millis = (t.seconds || 0) * 1000;
    millis += (t.nanos || 0) / 1000000;
    return new globalThis.Date(millis);
}
function fromJsonTimestamp(o) {
    if (o instanceof globalThis.Date) {
        return o;
    }
    else if (typeof o === "string") {
        return new globalThis.Date(o);
    }
    else {
        return fromTimestamp(Timestamp.fromJSON(o));
    }
}
function isSet(value) {
    return value !== null && value !== undefined;
}
