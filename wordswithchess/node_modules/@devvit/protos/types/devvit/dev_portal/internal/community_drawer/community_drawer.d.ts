/**
 * #community_drawer.ts
 *
 * Code generated by ts-proto. DO NOT EDIT.
 * @packageDocumentation
 */
import _m0 from "protobufjs/minimal.js";
import { Metadata } from "../../../../../lib/Types.js";
/** Request to set the monthly players count for an app */
export interface SetMonthlyPlayersRequest {
    /** The app slug of the app to update */
    appSlug: string;
    /** The new monthly players count */
    monthlyPlayers: number;
}
/** Response for setting monthly players */
export interface SetMonthlyPlayersResponse {
    /** Whether the operation was successful */
    success: boolean;
    /** Optional message about the operation; blank if there's nothing much to say */
    message?: string | undefined;
}
export declare const SetMonthlyPlayersRequest: {
    $type: "devvit.dev_portal.internal.community_drawer.SetMonthlyPlayersRequest";
    encode(message: SetMonthlyPlayersRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): SetMonthlyPlayersRequest;
    fromJSON(object: any): SetMonthlyPlayersRequest;
    toJSON(message: SetMonthlyPlayersRequest): unknown;
    create(base?: DeepPartial<SetMonthlyPlayersRequest>): SetMonthlyPlayersRequest;
    fromPartial(object: DeepPartial<SetMonthlyPlayersRequest>): SetMonthlyPlayersRequest;
};
export declare const SetMonthlyPlayersResponse: {
    $type: "devvit.dev_portal.internal.community_drawer.SetMonthlyPlayersResponse";
    encode(message: SetMonthlyPlayersResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): SetMonthlyPlayersResponse;
    fromJSON(object: any): SetMonthlyPlayersResponse;
    toJSON(message: SetMonthlyPlayersResponse): unknown;
    create(base?: DeepPartial<SetMonthlyPlayersResponse>): SetMonthlyPlayersResponse;
    fromPartial(object: DeepPartial<SetMonthlyPlayersResponse>): SetMonthlyPlayersResponse;
};
/**
 * This is a new feature used to show featured apps in Reddit's main left nav bar
 * This service in dev portal will be used to help hydrate the monthly players and display them
 */
export interface CommunityDrawer {
    /** Set the monthly players count for a specific app */
    SetMonthlyPlayers(request: SetMonthlyPlayersRequest, metadata?: Metadata): Promise<SetMonthlyPlayersResponse>;
}
export declare const CommunityDrawerServiceName = "devvit.dev_portal.internal.community_drawer.CommunityDrawer";
export declare class CommunityDrawerClientImpl implements CommunityDrawer {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    SetMonthlyPlayers(request: SetMonthlyPlayersRequest, metadata?: Metadata): Promise<SetMonthlyPlayersResponse>;
}
/**
 * This is a new feature used to show featured apps in Reddit's main left nav bar
 * This service in dev portal will be used to help hydrate the monthly players and display them
 */
export type CommunityDrawerDefinition = typeof CommunityDrawerDefinition;
export declare const CommunityDrawerDefinition: {
    readonly name: "CommunityDrawer";
    readonly fullName: "devvit.dev_portal.internal.community_drawer.CommunityDrawer";
    readonly methods: {
        /** Set the monthly players count for a specific app */
        readonly setMonthlyPlayers: {
            readonly name: "SetMonthlyPlayers";
            readonly requestType: {
                $type: "devvit.dev_portal.internal.community_drawer.SetMonthlyPlayersRequest";
                encode(message: SetMonthlyPlayersRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): SetMonthlyPlayersRequest;
                fromJSON(object: any): SetMonthlyPlayersRequest;
                toJSON(message: SetMonthlyPlayersRequest): unknown;
                create(base?: DeepPartial<SetMonthlyPlayersRequest>): SetMonthlyPlayersRequest;
                fromPartial(object: DeepPartial<SetMonthlyPlayersRequest>): SetMonthlyPlayersRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.dev_portal.internal.community_drawer.SetMonthlyPlayersResponse";
                encode(message: SetMonthlyPlayersResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): SetMonthlyPlayersResponse;
                fromJSON(object: any): SetMonthlyPlayersResponse;
                toJSON(message: SetMonthlyPlayersResponse): unknown;
                create(base?: DeepPartial<SetMonthlyPlayersResponse>): SetMonthlyPlayersResponse;
                fromPartial(object: DeepPartial<SetMonthlyPlayersResponse>): SetMonthlyPlayersResponse;
            };
            readonly responseStream: false;
            readonly options: {};
        };
    };
};
interface Rpc {
    request(service: string, method: string, data: Uint8Array, metadata?: Metadata): Promise<Uint8Array>;
}
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
type DeepPartial<T> = T extends Builtin ? T : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export {};
//# sourceMappingURL=community_drawer.d.ts.map