import { TwirpServer, TwirpError, TwirpErrorCode, TwirpContentType, chainInterceptors, } from 'twirp-ts';
import { SetMonthlyPlayersRequest, SetMonthlyPlayersResponse, } from './community_drawer.js';
export var CommunityDrawerMethod;
(function (CommunityDrawerMethod) {
    CommunityDrawerMethod["SetMonthlyPlayers"] = "SetMonthlyPlayers";
})(CommunityDrawerMethod || (CommunityDrawerMethod = {}));
export const CommunityDrawerMethodList = [
    CommunityDrawerMethod.SetMonthlyPlayers,
];
export function createCommunityDrawerServer(service) {
    return new TwirpServer({
        service,
        packageName: 'devvit.dev_portal.internal.community_drawer',
        serviceName: 'CommunityDrawer',
        methodList: CommunityDrawerMethodList,
        matchRoute: matchCommunityDrawerRoute,
    });
}
function matchCommunityDrawerRoute(method, events) {
    switch (method) {
        case 'SetMonthlyPlayers':
            return async (ctx, service, data, interceptors) => {
                ctx = { ...ctx, methodName: 'SetMonthlyPlayers' };
                await events.onMatch(ctx);
                return handleCommunityDrawerSetMonthlyPlayersRequest(ctx, service, data, interceptors);
            };
        default:
            events.onNotFound();
            const msg = `no handler found`;
            throw new TwirpError(TwirpErrorCode.BadRoute, msg);
    }
}
function handleCommunityDrawerSetMonthlyPlayersRequest(ctx, service, data, interceptors) {
    switch (ctx.contentType) {
        case TwirpContentType.JSON:
            return handleCommunityDrawerSetMonthlyPlayersJSON(ctx, service, data, interceptors);
        case TwirpContentType.Protobuf:
            return handleCommunityDrawerSetMonthlyPlayersProtobuf(ctx, service, data, interceptors);
        default:
            const msg = 'unexpected Content-Type';
            throw new TwirpError(TwirpErrorCode.BadRoute, msg);
    }
}
async function handleCommunityDrawerSetMonthlyPlayersJSON(ctx, service, data, interceptors) {
    let request;
    let response;
    try {
        const body = JSON.parse(data.toString() || '{}');
        request = SetMonthlyPlayersRequest.fromJSON(body);
    }
    catch (e) {
        if (e instanceof Error) {
            const msg = 'the json request could not be decoded';
            throw new TwirpError(TwirpErrorCode.Malformed, msg).withCause(e, true);
        }
    }
    if (interceptors && interceptors.length > 0) {
        const interceptor = chainInterceptors(...interceptors);
        response = await interceptor(ctx, request, (ctx, inputReq) => {
            return service.SetMonthlyPlayers(ctx, inputReq);
        });
    }
    else {
        response = await service.SetMonthlyPlayers(ctx, request);
    }
    return JSON.stringify(SetMonthlyPlayersResponse.toJSON(response));
}
async function handleCommunityDrawerSetMonthlyPlayersProtobuf(ctx, service, data, interceptors) {
    let request;
    let response;
    try {
        request = SetMonthlyPlayersRequest.decode(data);
    }
    catch (e) {
        if (e instanceof Error) {
            const msg = 'the protobuf request could not be decoded';
            throw new TwirpError(TwirpErrorCode.Malformed, msg).withCause(e, true);
        }
    }
    if (interceptors && interceptors.length > 0) {
        const interceptor = chainInterceptors(...interceptors);
        response = await interceptor(ctx, request, (ctx, inputReq) => {
            return service.SetMonthlyPlayers(ctx, inputReq);
        });
    }
    else {
        response = await service.SetMonthlyPlayers(ctx, request);
    }
    return Buffer.from(SetMonthlyPlayersResponse.encode(response).finish());
}
