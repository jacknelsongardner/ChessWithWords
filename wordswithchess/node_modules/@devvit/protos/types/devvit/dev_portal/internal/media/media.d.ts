/**
 * #media.ts
 *
 * Code generated by ts-proto. DO NOT EDIT.
 * @packageDocumentation
 */
import _m0 from "protobufjs/minimal.js";
import { Metadata } from "../../../../../lib/Types.js";
import { Empty } from "../../../../google/protobuf/empty.js";
export declare enum AssetStatus {
    MISSING = 0,
    PROCESSING = 1,
    READY = 2,
    REJECTED = 3,
    ERROR = 4,
    UNRECOGNIZED = -1
}
export declare function assetStatusFromJSON(object: any): AssetStatus;
export declare function assetStatusToJSON(object: AssetStatus): number;
export interface UpdateAssetStatusRequest {
    /** The media_id for the asset, as provided by media service */
    mediaId: string;
    /** The new status to put this asset in */
    newStatus: AssetStatus;
    /** The publicly accessible URL of the asset. */
    url: string;
}
/** empty */
export interface UpdateAssetStatusResponse {
}
export interface CheckForV1AssetAndBackfillRequest {
    /** app UUID */
    appId: string;
    /** app version number (i.e. "0.0.1") */
    appVersionNumber: string;
    /** asset path, i.e. "path/to/index.html" */
    assetPath: string;
}
export declare const UpdateAssetStatusRequest: {
    $type: "devvit.dev_portal.internal.media.UpdateAssetStatusRequest";
    encode(message: UpdateAssetStatusRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): UpdateAssetStatusRequest;
    fromJSON(object: any): UpdateAssetStatusRequest;
    toJSON(message: UpdateAssetStatusRequest): unknown;
    create(base?: DeepPartial<UpdateAssetStatusRequest>): UpdateAssetStatusRequest;
    fromPartial(object: DeepPartial<UpdateAssetStatusRequest>): UpdateAssetStatusRequest;
};
export declare const UpdateAssetStatusResponse: {
    $type: "devvit.dev_portal.internal.media.UpdateAssetStatusResponse";
    encode(_: UpdateAssetStatusResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): UpdateAssetStatusResponse;
    fromJSON(_: any): UpdateAssetStatusResponse;
    toJSON(_: UpdateAssetStatusResponse): unknown;
    create(base?: DeepPartial<UpdateAssetStatusResponse>): UpdateAssetStatusResponse;
    fromPartial(_: DeepPartial<UpdateAssetStatusResponse>): UpdateAssetStatusResponse;
};
export declare const CheckForV1AssetAndBackfillRequest: {
    $type: "devvit.dev_portal.internal.media.CheckForV1AssetAndBackfillRequest";
    encode(message: CheckForV1AssetAndBackfillRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): CheckForV1AssetAndBackfillRequest;
    fromJSON(object: any): CheckForV1AssetAndBackfillRequest;
    toJSON(message: CheckForV1AssetAndBackfillRequest): unknown;
    create(base?: DeepPartial<CheckForV1AssetAndBackfillRequest>): CheckForV1AssetAndBackfillRequest;
    fromPartial(object: DeepPartial<CheckForV1AssetAndBackfillRequest>): CheckForV1AssetAndBackfillRequest;
};
export interface DevPortalMedia {
    /** Updates a media asset's status, if it's an asset dev-portal cares about */
    UpdateAssetStatus(request: UpdateAssetStatusRequest, metadata?: Metadata): Promise<UpdateAssetStatusResponse>;
    CheckForV1AssetAndBackfill(request: CheckForV1AssetAndBackfillRequest, metadata?: Metadata): Promise<Empty>;
}
export declare const DevPortalMediaServiceName = "devvit.dev_portal.internal.media.DevPortalMedia";
export declare class DevPortalMediaClientImpl implements DevPortalMedia {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    UpdateAssetStatus(request: UpdateAssetStatusRequest, metadata?: Metadata): Promise<UpdateAssetStatusResponse>;
    CheckForV1AssetAndBackfill(request: CheckForV1AssetAndBackfillRequest, metadata?: Metadata): Promise<Empty>;
}
export type DevPortalMediaDefinition = typeof DevPortalMediaDefinition;
export declare const DevPortalMediaDefinition: {
    readonly name: "DevPortalMedia";
    readonly fullName: "devvit.dev_portal.internal.media.DevPortalMedia";
    readonly methods: {
        /** Updates a media asset's status, if it's an asset dev-portal cares about */
        readonly updateAssetStatus: {
            readonly name: "UpdateAssetStatus";
            readonly requestType: {
                $type: "devvit.dev_portal.internal.media.UpdateAssetStatusRequest";
                encode(message: UpdateAssetStatusRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): UpdateAssetStatusRequest;
                fromJSON(object: any): UpdateAssetStatusRequest;
                toJSON(message: UpdateAssetStatusRequest): unknown;
                create(base?: DeepPartial<UpdateAssetStatusRequest>): UpdateAssetStatusRequest;
                fromPartial(object: DeepPartial<UpdateAssetStatusRequest>): UpdateAssetStatusRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.dev_portal.internal.media.UpdateAssetStatusResponse";
                encode(_: UpdateAssetStatusResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): UpdateAssetStatusResponse;
                fromJSON(_: any): UpdateAssetStatusResponse;
                toJSON(_: UpdateAssetStatusResponse): unknown;
                create(base?: DeepPartial<UpdateAssetStatusResponse>): UpdateAssetStatusResponse;
                fromPartial(_: DeepPartial<UpdateAssetStatusResponse>): UpdateAssetStatusResponse;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        readonly checkForV1AssetAndBackfill: {
            readonly name: "CheckForV1AssetAndBackfill";
            readonly requestType: {
                $type: "devvit.dev_portal.internal.media.CheckForV1AssetAndBackfillRequest";
                encode(message: CheckForV1AssetAndBackfillRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): CheckForV1AssetAndBackfillRequest;
                fromJSON(object: any): CheckForV1AssetAndBackfillRequest;
                toJSON(message: CheckForV1AssetAndBackfillRequest): unknown;
                create(base?: DeepPartial<CheckForV1AssetAndBackfillRequest>): CheckForV1AssetAndBackfillRequest;
                fromPartial(object: DeepPartial<CheckForV1AssetAndBackfillRequest>): CheckForV1AssetAndBackfillRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "google.protobuf.Empty";
                encode(_: Empty, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): Empty;
                fromJSON(_: any): Empty;
                toJSON(_: Empty): unknown;
                create(base?: {}): Empty;
                fromPartial(_: {}): Empty;
            };
            readonly responseStream: false;
            readonly options: {};
        };
    };
};
interface Rpc {
    request(service: string, method: string, data: Uint8Array, metadata?: Metadata): Promise<Uint8Array>;
}
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
type DeepPartial<T> = T extends Builtin ? T : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export {};
//# sourceMappingURL=media.d.ts.map