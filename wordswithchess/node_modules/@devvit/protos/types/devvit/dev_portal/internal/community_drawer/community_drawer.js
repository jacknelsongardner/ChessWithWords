/**
 * #community_drawer.ts
 *
 * Code generated by ts-proto. DO NOT EDIT.
 * @packageDocumentation
 */
/* eslint-disable */
import _m0 from "protobufjs/minimal.js";
import { messageTypeRegistry } from "../../../../typeRegistry.js";
function createBaseSetMonthlyPlayersRequest() {
    return { appSlug: "", monthlyPlayers: 0 };
}
export const SetMonthlyPlayersRequest = {
    $type: "devvit.dev_portal.internal.community_drawer.SetMonthlyPlayersRequest",
    encode(message, writer = _m0.Writer.create()) {
        if (message.appSlug !== "") {
            writer.uint32(10).string(message.appSlug);
        }
        if (message.monthlyPlayers !== 0) {
            writer.uint32(16).int32(message.monthlyPlayers);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSetMonthlyPlayersRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.appSlug = reader.string();
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.monthlyPlayers = reader.int32();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            appSlug: isSet(object.appSlug) ? globalThis.String(object.appSlug) : "",
            monthlyPlayers: isSet(object.monthlyPlayers) ? globalThis.Number(object.monthlyPlayers) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.appSlug !== "") {
            obj.appSlug = message.appSlug;
        }
        if (message.monthlyPlayers !== 0) {
            obj.monthlyPlayers = Math.round(message.monthlyPlayers);
        }
        return obj;
    },
    create(base) {
        return SetMonthlyPlayersRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseSetMonthlyPlayersRequest();
        message.appSlug = object.appSlug ?? "";
        message.monthlyPlayers = object.monthlyPlayers ?? 0;
        return message;
    },
};
messageTypeRegistry.set(SetMonthlyPlayersRequest.$type, SetMonthlyPlayersRequest);
function createBaseSetMonthlyPlayersResponse() {
    return { success: false, message: undefined };
}
export const SetMonthlyPlayersResponse = {
    $type: "devvit.dev_portal.internal.community_drawer.SetMonthlyPlayersResponse",
    encode(message, writer = _m0.Writer.create()) {
        if (message.success !== false) {
            writer.uint32(8).bool(message.success);
        }
        if (message.message !== undefined) {
            writer.uint32(18).string(message.message);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSetMonthlyPlayersResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.success = reader.bool();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.message = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            success: isSet(object.success) ? globalThis.Boolean(object.success) : false,
            message: isSet(object.message) ? globalThis.String(object.message) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.success !== false) {
            obj.success = message.success;
        }
        if (message.message !== undefined) {
            obj.message = message.message;
        }
        return obj;
    },
    create(base) {
        return SetMonthlyPlayersResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseSetMonthlyPlayersResponse();
        message.success = object.success ?? false;
        message.message = object.message ?? undefined;
        return message;
    },
};
messageTypeRegistry.set(SetMonthlyPlayersResponse.$type, SetMonthlyPlayersResponse);
export const CommunityDrawerServiceName = "devvit.dev_portal.internal.community_drawer.CommunityDrawer";
export class CommunityDrawerClientImpl {
    constructor(rpc, opts) {
        this.service = opts?.service || CommunityDrawerServiceName;
        this.rpc = rpc;
        this.SetMonthlyPlayers = this.SetMonthlyPlayers.bind(this);
    }
    SetMonthlyPlayers(request, metadata) {
        const data = SetMonthlyPlayersRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "SetMonthlyPlayers", data, metadata);
        return promise.then((data) => SetMonthlyPlayersResponse.decode(_m0.Reader.create(data)));
    }
}
export const CommunityDrawerDefinition = {
    name: "CommunityDrawer",
    fullName: "devvit.dev_portal.internal.community_drawer.CommunityDrawer",
    methods: {
        /** Set the monthly players count for a specific app */
        setMonthlyPlayers: {
            name: "SetMonthlyPlayers",
            requestType: SetMonthlyPlayersRequest,
            requestStream: false,
            responseType: SetMonthlyPlayersResponse,
            responseStream: false,
            options: {},
        },
    },
};
function isSet(value) {
    return value !== null && value !== undefined;
}
