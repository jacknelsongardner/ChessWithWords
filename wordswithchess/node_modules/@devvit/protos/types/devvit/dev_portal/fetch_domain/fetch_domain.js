/**
 * #fetch_domain.ts
 *
 * Code generated by ts-proto. DO NOT EDIT.
 * @packageDocumentation
 */
/* eslint-disable */
import _m0 from "protobufjs/minimal.js";
import { messageTypeRegistry } from "../../../typeRegistry.js";
/** Represents a domain's global status. UNDECIDED means the domain is not globally decided, ie only applies at the app level. */
export var FetchDomainGlobalStatus;
(function (FetchDomainGlobalStatus) {
    FetchDomainGlobalStatus[FetchDomainGlobalStatus["UNDECIDED"] = 0] = "UNDECIDED";
    FetchDomainGlobalStatus[FetchDomainGlobalStatus["ALLOWED"] = 1] = "ALLOWED";
    FetchDomainGlobalStatus[FetchDomainGlobalStatus["DENIED"] = 2] = "DENIED";
    FetchDomainGlobalStatus[FetchDomainGlobalStatus["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(FetchDomainGlobalStatus || (FetchDomainGlobalStatus = {}));
export function fetchDomainGlobalStatusFromJSON(object) {
    switch (object) {
        case 0:
        case "UNDECIDED":
            return FetchDomainGlobalStatus.UNDECIDED;
        case 1:
        case "ALLOWED":
            return FetchDomainGlobalStatus.ALLOWED;
        case 2:
        case "DENIED":
            return FetchDomainGlobalStatus.DENIED;
        case -1:
        case "UNRECOGNIZED":
        default:
            return FetchDomainGlobalStatus.UNRECOGNIZED;
    }
}
export function fetchDomainGlobalStatusToJSON(object) {
    switch (object) {
        case FetchDomainGlobalStatus.UNDECIDED:
            return 0;
        case FetchDomainGlobalStatus.ALLOWED:
            return 1;
        case FetchDomainGlobalStatus.DENIED:
            return 2;
        case FetchDomainGlobalStatus.UNRECOGNIZED:
        default:
            return -1;
    }
}
function createBaseFetchDomain() {
    return { domain: "", globalStatus: 0 };
}
export const FetchDomain = {
    $type: "devvit.dev_portal.fetch_domain.FetchDomain",
    encode(message, writer = _m0.Writer.create()) {
        if (message.domain !== "") {
            writer.uint32(10).string(message.domain);
        }
        if (message.globalStatus !== 0) {
            writer.uint32(16).int32(message.globalStatus);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseFetchDomain();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.domain = reader.string();
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.globalStatus = reader.int32();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            domain: isSet(object.domain) ? globalThis.String(object.domain) : "",
            globalStatus: isSet(object.globalStatus) ? fetchDomainGlobalStatusFromJSON(object.globalStatus) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.domain !== "") {
            obj.domain = message.domain;
        }
        if (message.globalStatus !== 0) {
            obj.globalStatus = fetchDomainGlobalStatusToJSON(message.globalStatus);
        }
        return obj;
    },
    create(base) {
        return FetchDomain.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseFetchDomain();
        message.domain = object.domain ?? "";
        message.globalStatus = object.globalStatus ?? 0;
        return message;
    },
};
messageTypeRegistry.set(FetchDomain.$type, FetchDomain);
function isSet(value) {
    return value !== null && value !== undefined;
}
