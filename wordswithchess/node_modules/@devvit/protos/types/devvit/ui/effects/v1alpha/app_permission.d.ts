/**
 * #app_permission.ts
 *
 * Code generated by ts-proto. DO NOT EDIT.
 * @packageDocumentation
 */
import _m0 from "protobufjs/minimal.js";
import { ConsentStatus } from "../../../../reddit/devvit/app_permission/v1/app_permission.js";
/** This effect is used to check if the app can execute some actions as the user */
export interface CanRunAsUserEffect {
}
/** This event is emitted when the user grants (allow) or rejects (deny) the app's permission request */
export interface ConsentStatusEvent {
    /** whether the user granted or rejected the app's permission request */
    consentStatus: ConsentStatus;
}
export declare const CanRunAsUserEffect: {
    $type: "devvit.ui.effects.v1alpha.CanRunAsUserEffect";
    encode(_: CanRunAsUserEffect, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): CanRunAsUserEffect;
    fromJSON(_: any): CanRunAsUserEffect;
    toJSON(_: CanRunAsUserEffect): unknown;
    create(base?: DeepPartial<CanRunAsUserEffect>): CanRunAsUserEffect;
    fromPartial(_: DeepPartial<CanRunAsUserEffect>): CanRunAsUserEffect;
};
export declare const ConsentStatusEvent: {
    $type: "devvit.ui.effects.v1alpha.ConsentStatusEvent";
    encode(message: ConsentStatusEvent, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ConsentStatusEvent;
    fromJSON(object: any): ConsentStatusEvent;
    toJSON(message: ConsentStatusEvent): unknown;
    create(base?: DeepPartial<ConsentStatusEvent>): ConsentStatusEvent;
    fromPartial(object: DeepPartial<ConsentStatusEvent>): ConsentStatusEvent;
};
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
type DeepPartial<T> = T extends Builtin ? T : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export {};
//# sourceMappingURL=app_permission.d.ts.map