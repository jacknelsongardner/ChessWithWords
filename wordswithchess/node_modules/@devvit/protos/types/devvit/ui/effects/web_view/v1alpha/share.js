/**
 * #share.ts
 *
 * Code generated by ts-proto. DO NOT EDIT.
 * @packageDocumentation
 */
/* eslint-disable */
import _m0 from "protobufjs/minimal.js";
import { messageTypeRegistry } from "../../../../../typeRegistry.js";
function createBaseWebViewShareEffect() {
    return { userData: undefined, title: undefined, text: undefined, appIconUri: undefined };
}
export const WebViewShareEffect = {
    $type: "devvit.ui.effects.web_view.v1alpha.WebViewShareEffect",
    encode(message, writer = _m0.Writer.create()) {
        if (message.userData !== undefined) {
            writer.uint32(10).string(message.userData);
        }
        if (message.title !== undefined) {
            writer.uint32(18).string(message.title);
        }
        if (message.text !== undefined) {
            writer.uint32(26).string(message.text);
        }
        if (message.appIconUri !== undefined) {
            writer.uint32(34).string(message.appIconUri);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseWebViewShareEffect();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.userData = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.title = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.text = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.appIconUri = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            userData: isSet(object.userData) ? globalThis.String(object.userData) : undefined,
            title: isSet(object.title) ? globalThis.String(object.title) : undefined,
            text: isSet(object.text) ? globalThis.String(object.text) : undefined,
            appIconUri: isSet(object.appIconUri) ? globalThis.String(object.appIconUri) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.userData !== undefined) {
            obj.userData = message.userData;
        }
        if (message.title !== undefined) {
            obj.title = message.title;
        }
        if (message.text !== undefined) {
            obj.text = message.text;
        }
        if (message.appIconUri !== undefined) {
            obj.appIconUri = message.appIconUri;
        }
        return obj;
    },
    create(base) {
        return WebViewShareEffect.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseWebViewShareEffect();
        message.userData = object.userData ?? undefined;
        message.title = object.title ?? undefined;
        message.text = object.text ?? undefined;
        message.appIconUri = object.appIconUri ?? undefined;
        return message;
    },
};
messageTypeRegistry.set(WebViewShareEffect.$type, WebViewShareEffect);
function isSet(value) {
    return value !== null && value !== undefined;
}
