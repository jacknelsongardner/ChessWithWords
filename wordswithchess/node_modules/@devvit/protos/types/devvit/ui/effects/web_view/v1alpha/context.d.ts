/**
 * #context.ts
 *
 * Code generated by ts-proto. DO NOT EDIT.
 * @packageDocumentation
 */
import _m0 from "protobufjs/minimal.js";
/** The user client hosting the web view. */
export declare enum Client {
    CLIENT_UNSPECIFIED = 0,
    ANDROID = 1,
    IOS = 2,
    SHREDDIT = 3,
    UNRECOGNIZED = -1
}
export declare function clientFromJSON(object: any): Client;
export declare function clientToJSON(object: Client): number;
/**
 * Inline height of post.
 *
 * @deprecated
 */
export declare enum Height {
    HEIGHT_UNSPECIFIED = 0,
    REGULAR = 1,
    TALL = 2,
    UNRECOGNIZED = -1
}
export declare function heightFromJSON(object: any): Height;
export declare function heightToJSON(object: Height): number;
/**
 * Initialization data sent from the client (Shreddit, Android, iOS) to the
 * web view.
 */
export interface BridgeContext {
    /**
     * to-do: use webbit_token once it is a superset of DevvitPostData and a
     *        decoder is available.
     *
     * @deprecated
     */
    postData?: DevvitPostData | undefined;
    shareParam?: ShareParam | undefined;
    /**
     * to-do: use webbit_token once it is a superset of WebViewContext.
     *
     * @deprecated
     */
    webViewContext?: WebViewContext | undefined;
    /**
     * Signed WebbitToken user JWT (header, payload, signature base64 strings
     * separated by dots). Users shouldn't share their JWTs with others, but
     * perfectly fine for a given user to see. Named WebbitToken to match GQL's
     * definition. Eg:
     *   eyJhbGciOiJIUzI1NiIsImtpZCI6ImVlYzJjOWUzLWM0NTctNTM3Zi05NThmLTI5MDg3N2U4NjNlYyIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJkZXZ2aXQtZ2F0ZXdheS5yZWRkaXQuY29tIiwiYXVkIjpbIjhlMGUwZWI3LTc0NzgtNGVmMS1hNGZmLTk5NTlmMTkzZmNkMC0wLTAtOS13ZWJ2aWV3LmRldnZpdC5uZXQiXSwiZXhwIjoxNzUzMzcxODU2LCJuYmYiOjE3NTMyODU0NTYsImlhdCI6MTc1MzI4NTQ1NiwianRpIjoiYTA5NWMyOTktOWJkNS00MGUzLWEyYTEtYzhkYTBiMDc0ZjRhIiwiZGV2dml0LXBvc3QtaWQiOiJ0M18xbTdjcHZxIiwiZGV2dml0LXBvc3QtZGF0YSI6e30sImRldnZpdC11c2VyLWlkIjoidDJfazZsZGJqaDMiLCJkZXZ2aXQtaW5zdGFsbGF0aW9uIjoiOGUwZTBlYjctNzQ3OC00ZWYxLWE0ZmYtOTk1OWYxOTNmY2QwIn0.6M4NKCUsB4kWhZmslE909IL-hf2FAVMrkjB-peaHLHc
     */
    webbitToken: string;
    /**
     * Untrusted unknown debug user data passed in the case-insensitive
     * `devvitdebug` query param of the hosting
     * window (eg, `reddit.com?devvitdebug=...`).
     */
    devvitDebug: string;
    client: Client;
    nativeVersion?: NativeClientVersion | undefined;
    /** `@devvit/ui-renderer` version. */
    shredditVersion?: SemVer | undefined;
}
/** Android or iOS client version. Unavailable for web clients. */
export interface NativeClientVersion {
    /** Year built. Eg, `2025`. */
    yyyy: number;
    /** Release number starting from 1 as the first release in January. Eg, `1`. */
    release: number;
    /** Release attempt. Eg, `0`. */
    attempt: number;
    /** Build number. Eg, `2417036`. */
    number: number;
}
/** Semantic version major, minor, and patch number. */
export interface SemVer {
    /** Major version. Eg, `1`. */
    major: number;
    /** Minor version. Eg, `2`. */
    minor: number;
    /** Patch version. Eg, `3`. */
    patch: number;
    /** Original version string. */
    version: string;
}
/** @deprecated */
export interface WebViewContext {
    /** Subreddit Thing ID (t5) */
    subredditId: string;
    subredditName: string;
    /** User Thing ID (t2) */
    userId: string;
    appName: string;
    appVersion: string;
    /** Post Thing ID (t3) */
    postId: string;
}
/**
 * DevvitPostData contains all post data set on the custom post, including internal data and developer-provided data. It originates from GraphQL as a plain JSON string.
 * Example: { "splash": { "description": "hello" } }, "developerData": { "riddle": "hello world" } }
 */
export interface DevvitPostData {
    splash?: SplashPostData | undefined;
    /** Developer-provided data on the Post, in JSON format. This is what developers set via submitPost({ postData: {...} }). Eg: { "riddle": "hello world" } */
    developerData?: {
        [key: string]: any;
    } | undefined;
}
/**
 * App deep link. Passed in case-insensitive `devvitshare` query param of the
 * hosting window (eg, `reddit.com?devvitshare=...`) as user data.
 *
 *   url.searchParams.set(
 *     'devvitshare',
 *     JSON.stringify({params: {foo: 'bar'}, path: '/a/b/c/index.html', hash: '#abc', userData: 'abc'} satisfies ShareParam) // Encodes.
 *   )
 *   const shareParam: ShareParam | undefined = JSON.parse(
 *     url.searchParams.get('devvitshare') || '{}' // Decodes.
 *   ) ?? undefined
 *   ...Verify user data...
 *
 * Links are always assumed to use PDP.
 *
 * Emitted as WebViewShareEffect.
 */
export interface ShareParam {
    /**
     * Everything after and including the first /. Aligns to
     * https://developer.mozilla.org/en-US/docs/Web/API/URL/pathname.
     *
     * @deprecated
     */
    path: string;
    /**
     * URL query parameters (key-value).
     *
     * @deprecated
     */
    params: {
        [key: string]: string;
    };
    /**
     * Everything after and including the first #. Aligns to
     * https://developer.mozilla.org/en-US/docs/Web/API/URL/hash.
     *
     * @deprecated
     */
    hash: string;
    /** User data as a string. Eg, `'abc'` or `'{"abc":"123"}'`. */
    userData?: string | undefined;
}
export interface ShareParam_ParamsEntry {
    key: string;
    value: string;
}
/**
 * Splash screen post data. Everything needed to render a `Splash` screen
 * component. The below are recorded at post creation time to allow posts to
 * differ. Defaults are not recorded for anything but the fields needed to
 * render the `Loading` component to always prefer the current entry default
 * values when unspecified for everything that can be deferred.
 */
export interface SplashPostData {
    /** Application name. Eg, `'Comment Mop'`. */
    appDisplayName?: string | undefined;
    /** Icon URL relative media directory or data URI. Eg, `'icon.png'`. */
    appIconUri?: string | undefined;
    /**
     * Media directory relative background image URL or data URI. Eg,
     * `'background.png'`.
     */
    backgroundUri?: string | undefined;
    /** The text of the web view launch button. */
    buttonLabel?: string | undefined;
    /** Secondary text describing the post. */
    description?: string | undefined;
    /**
     * The `devvit.json` `post.entrypoints` key. If not provided, defaults to
     * `defaultPostEntry`.
     */
    entry?: string | undefined;
    /** Large text naming the post. Eg. `'What is this?'`. */
    title?: string | undefined;
}
export declare const BridgeContext: {
    $type: "devvit.ui.effects.web_view.v1alpha.BridgeContext";
    encode(message: BridgeContext, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): BridgeContext;
    fromJSON(object: any): BridgeContext;
    toJSON(message: BridgeContext): unknown;
    create(base?: DeepPartial<BridgeContext>): BridgeContext;
    fromPartial(object: DeepPartial<BridgeContext>): BridgeContext;
};
export declare const NativeClientVersion: {
    $type: "devvit.ui.effects.web_view.v1alpha.NativeClientVersion";
    encode(message: NativeClientVersion, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): NativeClientVersion;
    fromJSON(object: any): NativeClientVersion;
    toJSON(message: NativeClientVersion): unknown;
    create(base?: DeepPartial<NativeClientVersion>): NativeClientVersion;
    fromPartial(object: DeepPartial<NativeClientVersion>): NativeClientVersion;
};
export declare const SemVer: {
    $type: "devvit.ui.effects.web_view.v1alpha.SemVer";
    encode(message: SemVer, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): SemVer;
    fromJSON(object: any): SemVer;
    toJSON(message: SemVer): unknown;
    create(base?: DeepPartial<SemVer>): SemVer;
    fromPartial(object: DeepPartial<SemVer>): SemVer;
};
export declare const WebViewContext: {
    $type: "devvit.ui.effects.web_view.v1alpha.WebViewContext";
    encode(message: WebViewContext, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): WebViewContext;
    fromJSON(object: any): WebViewContext;
    toJSON(message: WebViewContext): unknown;
    create(base?: DeepPartial<WebViewContext>): WebViewContext;
    fromPartial(object: DeepPartial<WebViewContext>): WebViewContext;
};
export declare const DevvitPostData: {
    $type: "devvit.ui.effects.web_view.v1alpha.DevvitPostData";
    encode(message: DevvitPostData, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): DevvitPostData;
    fromJSON(object: any): DevvitPostData;
    toJSON(message: DevvitPostData): unknown;
    create(base?: DeepPartial<DevvitPostData>): DevvitPostData;
    fromPartial(object: DeepPartial<DevvitPostData>): DevvitPostData;
};
export declare const ShareParam: {
    $type: "devvit.ui.effects.web_view.v1alpha.ShareParam";
    encode(message: ShareParam, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ShareParam;
    fromJSON(object: any): ShareParam;
    toJSON(message: ShareParam): unknown;
    create(base?: DeepPartial<ShareParam>): ShareParam;
    fromPartial(object: DeepPartial<ShareParam>): ShareParam;
};
export declare const ShareParam_ParamsEntry: {
    $type: "devvit.ui.effects.web_view.v1alpha.ShareParam.ParamsEntry";
    encode(message: ShareParam_ParamsEntry, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ShareParam_ParamsEntry;
    fromJSON(object: any): ShareParam_ParamsEntry;
    toJSON(message: ShareParam_ParamsEntry): unknown;
    create(base?: DeepPartial<ShareParam_ParamsEntry>): ShareParam_ParamsEntry;
    fromPartial(object: DeepPartial<ShareParam_ParamsEntry>): ShareParam_ParamsEntry;
};
export declare const SplashPostData: {
    $type: "devvit.ui.effects.web_view.v1alpha.SplashPostData";
    encode(message: SplashPostData, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): SplashPostData;
    fromJSON(object: any): SplashPostData;
    toJSON(message: SplashPostData): unknown;
    create(base?: DeepPartial<SplashPostData>): SplashPostData;
    fromPartial(object: DeepPartial<SplashPostData>): SplashPostData;
};
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
type DeepPartial<T> = T extends Builtin ? T : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export {};
//# sourceMappingURL=context.d.ts.map