/**
 * #context.ts
 *
 * Code generated by ts-proto. DO NOT EDIT.
 * @packageDocumentation
 */
/* eslint-disable */
import _m0 from "protobufjs/minimal.js";
import { Struct } from "../../../../../google/protobuf/struct.js";
import { messageTypeRegistry } from "../../../../../typeRegistry.js";
/** The user client hosting the web view. */
export var Client;
(function (Client) {
    Client[Client["CLIENT_UNSPECIFIED"] = 0] = "CLIENT_UNSPECIFIED";
    Client[Client["ANDROID"] = 1] = "ANDROID";
    Client[Client["IOS"] = 2] = "IOS";
    Client[Client["SHREDDIT"] = 3] = "SHREDDIT";
    Client[Client["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(Client || (Client = {}));
export function clientFromJSON(object) {
    switch (object) {
        case 0:
        case "CLIENT_UNSPECIFIED":
            return Client.CLIENT_UNSPECIFIED;
        case 1:
        case "ANDROID":
            return Client.ANDROID;
        case 2:
        case "IOS":
            return Client.IOS;
        case 3:
        case "SHREDDIT":
            return Client.SHREDDIT;
        case -1:
        case "UNRECOGNIZED":
        default:
            return Client.UNRECOGNIZED;
    }
}
export function clientToJSON(object) {
    switch (object) {
        case Client.CLIENT_UNSPECIFIED:
            return 0;
        case Client.ANDROID:
            return 1;
        case Client.IOS:
            return 2;
        case Client.SHREDDIT:
            return 3;
        case Client.UNRECOGNIZED:
        default:
            return -1;
    }
}
/**
 * Inline height of post.
 *
 * @deprecated
 */
export var Height;
(function (Height) {
    Height[Height["HEIGHT_UNSPECIFIED"] = 0] = "HEIGHT_UNSPECIFIED";
    Height[Height["REGULAR"] = 1] = "REGULAR";
    Height[Height["TALL"] = 2] = "TALL";
    Height[Height["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(Height || (Height = {}));
export function heightFromJSON(object) {
    switch (object) {
        case 0:
        case "HEIGHT_UNSPECIFIED":
            return Height.HEIGHT_UNSPECIFIED;
        case 1:
        case "REGULAR":
            return Height.REGULAR;
        case 2:
        case "TALL":
            return Height.TALL;
        case -1:
        case "UNRECOGNIZED":
        default:
            return Height.UNRECOGNIZED;
    }
}
export function heightToJSON(object) {
    switch (object) {
        case Height.HEIGHT_UNSPECIFIED:
            return 0;
        case Height.REGULAR:
            return 1;
        case Height.TALL:
            return 2;
        case Height.UNRECOGNIZED:
        default:
            return -1;
    }
}
function createBaseBridgeContext() {
    return {
        postData: undefined,
        shareParam: undefined,
        webViewContext: undefined,
        webbitToken: "",
        devvitDebug: "",
        client: 0,
        nativeVersion: undefined,
        shredditVersion: undefined,
    };
}
export const BridgeContext = {
    $type: "devvit.ui.effects.web_view.v1alpha.BridgeContext",
    encode(message, writer = _m0.Writer.create()) {
        if (message.postData !== undefined) {
            DevvitPostData.encode(message.postData, writer.uint32(10).fork()).ldelim();
        }
        if (message.shareParam !== undefined) {
            ShareParam.encode(message.shareParam, writer.uint32(18).fork()).ldelim();
        }
        if (message.webViewContext !== undefined) {
            WebViewContext.encode(message.webViewContext, writer.uint32(26).fork()).ldelim();
        }
        if (message.webbitToken !== "") {
            writer.uint32(34).string(message.webbitToken);
        }
        if (message.devvitDebug !== "") {
            writer.uint32(42).string(message.devvitDebug);
        }
        if (message.client !== 0) {
            writer.uint32(48).int32(message.client);
        }
        if (message.nativeVersion !== undefined) {
            NativeClientVersion.encode(message.nativeVersion, writer.uint32(58).fork()).ldelim();
        }
        if (message.shredditVersion !== undefined) {
            SemVer.encode(message.shredditVersion, writer.uint32(66).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBridgeContext();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.postData = DevvitPostData.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.shareParam = ShareParam.decode(reader, reader.uint32());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.webViewContext = WebViewContext.decode(reader, reader.uint32());
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.webbitToken = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.devvitDebug = reader.string();
                    continue;
                case 6:
                    if (tag !== 48) {
                        break;
                    }
                    message.client = reader.int32();
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.nativeVersion = NativeClientVersion.decode(reader, reader.uint32());
                    continue;
                case 8:
                    if (tag !== 66) {
                        break;
                    }
                    message.shredditVersion = SemVer.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            postData: isSet(object.postData) ? DevvitPostData.fromJSON(object.postData) : undefined,
            shareParam: isSet(object.shareParam) ? ShareParam.fromJSON(object.shareParam) : undefined,
            webViewContext: isSet(object.webViewContext) ? WebViewContext.fromJSON(object.webViewContext) : undefined,
            webbitToken: isSet(object.webbitToken) ? globalThis.String(object.webbitToken) : "",
            devvitDebug: isSet(object.devvitDebug) ? globalThis.String(object.devvitDebug) : "",
            client: isSet(object.client) ? clientFromJSON(object.client) : 0,
            nativeVersion: isSet(object.nativeVersion) ? NativeClientVersion.fromJSON(object.nativeVersion) : undefined,
            shredditVersion: isSet(object.shredditVersion) ? SemVer.fromJSON(object.shredditVersion) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.postData !== undefined) {
            obj.postData = DevvitPostData.toJSON(message.postData);
        }
        if (message.shareParam !== undefined) {
            obj.shareParam = ShareParam.toJSON(message.shareParam);
        }
        if (message.webViewContext !== undefined) {
            obj.webViewContext = WebViewContext.toJSON(message.webViewContext);
        }
        if (message.webbitToken !== "") {
            obj.webbitToken = message.webbitToken;
        }
        if (message.devvitDebug !== "") {
            obj.devvitDebug = message.devvitDebug;
        }
        if (message.client !== 0) {
            obj.client = clientToJSON(message.client);
        }
        if (message.nativeVersion !== undefined) {
            obj.nativeVersion = NativeClientVersion.toJSON(message.nativeVersion);
        }
        if (message.shredditVersion !== undefined) {
            obj.shredditVersion = SemVer.toJSON(message.shredditVersion);
        }
        return obj;
    },
    create(base) {
        return BridgeContext.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseBridgeContext();
        message.postData = (object.postData !== undefined && object.postData !== null)
            ? DevvitPostData.fromPartial(object.postData)
            : undefined;
        message.shareParam = (object.shareParam !== undefined && object.shareParam !== null)
            ? ShareParam.fromPartial(object.shareParam)
            : undefined;
        message.webViewContext = (object.webViewContext !== undefined && object.webViewContext !== null)
            ? WebViewContext.fromPartial(object.webViewContext)
            : undefined;
        message.webbitToken = object.webbitToken ?? "";
        message.devvitDebug = object.devvitDebug ?? "";
        message.client = object.client ?? 0;
        message.nativeVersion = (object.nativeVersion !== undefined && object.nativeVersion !== null)
            ? NativeClientVersion.fromPartial(object.nativeVersion)
            : undefined;
        message.shredditVersion = (object.shredditVersion !== undefined && object.shredditVersion !== null)
            ? SemVer.fromPartial(object.shredditVersion)
            : undefined;
        return message;
    },
};
messageTypeRegistry.set(BridgeContext.$type, BridgeContext);
function createBaseNativeClientVersion() {
    return { yyyy: 0, release: 0, attempt: 0, number: 0 };
}
export const NativeClientVersion = {
    $type: "devvit.ui.effects.web_view.v1alpha.NativeClientVersion",
    encode(message, writer = _m0.Writer.create()) {
        if (message.yyyy !== 0) {
            writer.uint32(8).int32(message.yyyy);
        }
        if (message.release !== 0) {
            writer.uint32(16).int32(message.release);
        }
        if (message.attempt !== 0) {
            writer.uint32(24).int32(message.attempt);
        }
        if (message.number !== 0) {
            writer.uint32(32).int32(message.number);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseNativeClientVersion();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.yyyy = reader.int32();
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.release = reader.int32();
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.attempt = reader.int32();
                    continue;
                case 4:
                    if (tag !== 32) {
                        break;
                    }
                    message.number = reader.int32();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            yyyy: isSet(object.yyyy) ? globalThis.Number(object.yyyy) : 0,
            release: isSet(object.release) ? globalThis.Number(object.release) : 0,
            attempt: isSet(object.attempt) ? globalThis.Number(object.attempt) : 0,
            number: isSet(object.number) ? globalThis.Number(object.number) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.yyyy !== 0) {
            obj.yyyy = Math.round(message.yyyy);
        }
        if (message.release !== 0) {
            obj.release = Math.round(message.release);
        }
        if (message.attempt !== 0) {
            obj.attempt = Math.round(message.attempt);
        }
        if (message.number !== 0) {
            obj.number = Math.round(message.number);
        }
        return obj;
    },
    create(base) {
        return NativeClientVersion.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseNativeClientVersion();
        message.yyyy = object.yyyy ?? 0;
        message.release = object.release ?? 0;
        message.attempt = object.attempt ?? 0;
        message.number = object.number ?? 0;
        return message;
    },
};
messageTypeRegistry.set(NativeClientVersion.$type, NativeClientVersion);
function createBaseSemVer() {
    return { major: 0, minor: 0, patch: 0, version: "" };
}
export const SemVer = {
    $type: "devvit.ui.effects.web_view.v1alpha.SemVer",
    encode(message, writer = _m0.Writer.create()) {
        if (message.major !== 0) {
            writer.uint32(8).int32(message.major);
        }
        if (message.minor !== 0) {
            writer.uint32(16).int32(message.minor);
        }
        if (message.patch !== 0) {
            writer.uint32(24).int32(message.patch);
        }
        if (message.version !== "") {
            writer.uint32(34).string(message.version);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSemVer();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.major = reader.int32();
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.minor = reader.int32();
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.patch = reader.int32();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.version = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            major: isSet(object.major) ? globalThis.Number(object.major) : 0,
            minor: isSet(object.minor) ? globalThis.Number(object.minor) : 0,
            patch: isSet(object.patch) ? globalThis.Number(object.patch) : 0,
            version: isSet(object.version) ? globalThis.String(object.version) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.major !== 0) {
            obj.major = Math.round(message.major);
        }
        if (message.minor !== 0) {
            obj.minor = Math.round(message.minor);
        }
        if (message.patch !== 0) {
            obj.patch = Math.round(message.patch);
        }
        if (message.version !== "") {
            obj.version = message.version;
        }
        return obj;
    },
    create(base) {
        return SemVer.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseSemVer();
        message.major = object.major ?? 0;
        message.minor = object.minor ?? 0;
        message.patch = object.patch ?? 0;
        message.version = object.version ?? "";
        return message;
    },
};
messageTypeRegistry.set(SemVer.$type, SemVer);
function createBaseWebViewContext() {
    return { subredditId: "", subredditName: "", userId: "", appName: "", appVersion: "", postId: "" };
}
export const WebViewContext = {
    $type: "devvit.ui.effects.web_view.v1alpha.WebViewContext",
    encode(message, writer = _m0.Writer.create()) {
        if (message.subredditId !== "") {
            writer.uint32(10).string(message.subredditId);
        }
        if (message.subredditName !== "") {
            writer.uint32(18).string(message.subredditName);
        }
        if (message.userId !== "") {
            writer.uint32(26).string(message.userId);
        }
        if (message.appName !== "") {
            writer.uint32(34).string(message.appName);
        }
        if (message.appVersion !== "") {
            writer.uint32(42).string(message.appVersion);
        }
        if (message.postId !== "") {
            writer.uint32(50).string(message.postId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseWebViewContext();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.subredditId = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.subredditName = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.userId = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.appName = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.appVersion = reader.string();
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.postId = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            subredditId: isSet(object.subredditId) ? globalThis.String(object.subredditId) : "",
            subredditName: isSet(object.subredditName) ? globalThis.String(object.subredditName) : "",
            userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
            appName: isSet(object.appName) ? globalThis.String(object.appName) : "",
            appVersion: isSet(object.appVersion) ? globalThis.String(object.appVersion) : "",
            postId: isSet(object.postId) ? globalThis.String(object.postId) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.subredditId !== "") {
            obj.subredditId = message.subredditId;
        }
        if (message.subredditName !== "") {
            obj.subredditName = message.subredditName;
        }
        if (message.userId !== "") {
            obj.userId = message.userId;
        }
        if (message.appName !== "") {
            obj.appName = message.appName;
        }
        if (message.appVersion !== "") {
            obj.appVersion = message.appVersion;
        }
        if (message.postId !== "") {
            obj.postId = message.postId;
        }
        return obj;
    },
    create(base) {
        return WebViewContext.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseWebViewContext();
        message.subredditId = object.subredditId ?? "";
        message.subredditName = object.subredditName ?? "";
        message.userId = object.userId ?? "";
        message.appName = object.appName ?? "";
        message.appVersion = object.appVersion ?? "";
        message.postId = object.postId ?? "";
        return message;
    },
};
messageTypeRegistry.set(WebViewContext.$type, WebViewContext);
function createBaseDevvitPostData() {
    return { splash: undefined, developerData: undefined };
}
export const DevvitPostData = {
    $type: "devvit.ui.effects.web_view.v1alpha.DevvitPostData",
    encode(message, writer = _m0.Writer.create()) {
        if (message.splash !== undefined) {
            SplashPostData.encode(message.splash, writer.uint32(26).fork()).ldelim();
        }
        if (message.developerData !== undefined) {
            Struct.encode(Struct.wrap(message.developerData), writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDevvitPostData();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.splash = SplashPostData.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.developerData = Struct.unwrap(Struct.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            splash: isSet(object.splash) ? SplashPostData.fromJSON(object.splash) : undefined,
            developerData: isObject(object.developerData) ? object.developerData : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.splash !== undefined) {
            obj.splash = SplashPostData.toJSON(message.splash);
        }
        if (message.developerData !== undefined) {
            obj.developerData = message.developerData;
        }
        return obj;
    },
    create(base) {
        return DevvitPostData.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseDevvitPostData();
        message.splash = (object.splash !== undefined && object.splash !== null)
            ? SplashPostData.fromPartial(object.splash)
            : undefined;
        message.developerData = object.developerData ?? undefined;
        return message;
    },
};
messageTypeRegistry.set(DevvitPostData.$type, DevvitPostData);
function createBaseShareParam() {
    return { path: "", params: {}, hash: "", userData: undefined };
}
export const ShareParam = {
    $type: "devvit.ui.effects.web_view.v1alpha.ShareParam",
    encode(message, writer = _m0.Writer.create()) {
        if (message.path !== "") {
            writer.uint32(10).string(message.path);
        }
        Object.entries(message.params).forEach(([key, value]) => {
            ShareParam_ParamsEntry.encode({ key: key, value }, writer.uint32(18).fork()).ldelim();
        });
        if (message.hash !== "") {
            writer.uint32(26).string(message.hash);
        }
        if (message.userData !== undefined) {
            writer.uint32(34).string(message.userData);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseShareParam();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.path = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    const entry2 = ShareParam_ParamsEntry.decode(reader, reader.uint32());
                    if (entry2.value !== undefined) {
                        message.params[entry2.key] = entry2.value;
                    }
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.hash = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.userData = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            path: isSet(object.path) ? globalThis.String(object.path) : "",
            params: isObject(object.params)
                ? Object.entries(object.params).reduce((acc, [key, value]) => {
                    acc[key] = String(value);
                    return acc;
                }, {})
                : {},
            hash: isSet(object.hash) ? globalThis.String(object.hash) : "",
            userData: isSet(object.userData) ? globalThis.String(object.userData) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.path !== "") {
            obj.path = message.path;
        }
        if (message.params) {
            const entries = Object.entries(message.params);
            if (entries.length > 0) {
                obj.params = {};
                entries.forEach(([k, v]) => {
                    obj.params[k] = v;
                });
            }
        }
        if (message.hash !== "") {
            obj.hash = message.hash;
        }
        if (message.userData !== undefined) {
            obj.userData = message.userData;
        }
        return obj;
    },
    create(base) {
        return ShareParam.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseShareParam();
        message.path = object.path ?? "";
        message.params = Object.entries(object.params ?? {}).reduce((acc, [key, value]) => {
            if (value !== undefined) {
                acc[key] = globalThis.String(value);
            }
            return acc;
        }, {});
        message.hash = object.hash ?? "";
        message.userData = object.userData ?? undefined;
        return message;
    },
};
messageTypeRegistry.set(ShareParam.$type, ShareParam);
function createBaseShareParam_ParamsEntry() {
    return { key: "", value: "" };
}
export const ShareParam_ParamsEntry = {
    $type: "devvit.ui.effects.web_view.v1alpha.ShareParam.ParamsEntry",
    encode(message, writer = _m0.Writer.create()) {
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== "") {
            writer.uint32(18).string(message.value);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseShareParam_ParamsEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.key = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.value = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            key: isSet(object.key) ? globalThis.String(object.key) : "",
            value: isSet(object.value) ? globalThis.String(object.value) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.key !== "") {
            obj.key = message.key;
        }
        if (message.value !== "") {
            obj.value = message.value;
        }
        return obj;
    },
    create(base) {
        return ShareParam_ParamsEntry.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseShareParam_ParamsEntry();
        message.key = object.key ?? "";
        message.value = object.value ?? "";
        return message;
    },
};
messageTypeRegistry.set(ShareParam_ParamsEntry.$type, ShareParam_ParamsEntry);
function createBaseSplashPostData() {
    return {
        appDisplayName: undefined,
        appIconUri: undefined,
        backgroundUri: undefined,
        buttonLabel: undefined,
        description: undefined,
        entry: undefined,
        title: undefined,
    };
}
export const SplashPostData = {
    $type: "devvit.ui.effects.web_view.v1alpha.SplashPostData",
    encode(message, writer = _m0.Writer.create()) {
        if (message.appDisplayName !== undefined) {
            writer.uint32(10).string(message.appDisplayName);
        }
        if (message.appIconUri !== undefined) {
            writer.uint32(18).string(message.appIconUri);
        }
        if (message.backgroundUri !== undefined) {
            writer.uint32(26).string(message.backgroundUri);
        }
        if (message.buttonLabel !== undefined) {
            writer.uint32(34).string(message.buttonLabel);
        }
        if (message.description !== undefined) {
            writer.uint32(42).string(message.description);
        }
        if (message.entry !== undefined) {
            writer.uint32(74).string(message.entry);
        }
        if (message.title !== undefined) {
            writer.uint32(58).string(message.title);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSplashPostData();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.appDisplayName = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.appIconUri = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.backgroundUri = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.buttonLabel = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.description = reader.string();
                    continue;
                case 9:
                    if (tag !== 74) {
                        break;
                    }
                    message.entry = reader.string();
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.title = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            appDisplayName: isSet(object.appDisplayName) ? globalThis.String(object.appDisplayName) : undefined,
            appIconUri: isSet(object.appIconUri) ? globalThis.String(object.appIconUri) : undefined,
            backgroundUri: isSet(object.backgroundUri) ? globalThis.String(object.backgroundUri) : undefined,
            buttonLabel: isSet(object.buttonLabel) ? globalThis.String(object.buttonLabel) : undefined,
            description: isSet(object.description) ? globalThis.String(object.description) : undefined,
            entry: isSet(object.entry) ? globalThis.String(object.entry) : undefined,
            title: isSet(object.title) ? globalThis.String(object.title) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.appDisplayName !== undefined) {
            obj.appDisplayName = message.appDisplayName;
        }
        if (message.appIconUri !== undefined) {
            obj.appIconUri = message.appIconUri;
        }
        if (message.backgroundUri !== undefined) {
            obj.backgroundUri = message.backgroundUri;
        }
        if (message.buttonLabel !== undefined) {
            obj.buttonLabel = message.buttonLabel;
        }
        if (message.description !== undefined) {
            obj.description = message.description;
        }
        if (message.entry !== undefined) {
            obj.entry = message.entry;
        }
        if (message.title !== undefined) {
            obj.title = message.title;
        }
        return obj;
    },
    create(base) {
        return SplashPostData.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseSplashPostData();
        message.appDisplayName = object.appDisplayName ?? undefined;
        message.appIconUri = object.appIconUri ?? undefined;
        message.backgroundUri = object.backgroundUri ?? undefined;
        message.buttonLabel = object.buttonLabel ?? undefined;
        message.description = object.description ?? undefined;
        message.entry = object.entry ?? undefined;
        message.title = object.title ?? undefined;
        return message;
    },
};
messageTypeRegistry.set(SplashPostData.$type, SplashPostData);
function isObject(value) {
    return typeof value === "object" && value !== null;
}
function isSet(value) {
    return value !== null && value !== undefined;
}
