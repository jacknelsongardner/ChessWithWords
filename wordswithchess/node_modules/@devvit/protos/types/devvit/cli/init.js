/**
 * #init.ts
 *
 * Code generated by ts-proto. DO NOT EDIT.
 * @packageDocumentation
 */
/* eslint-disable */
import _m0 from "protobufjs/minimal.js";
import { messageTypeRegistry } from "../../typeRegistry.js";
function createBaseInitAppResponse() {
    return { authCode: undefined, appName: "", templateName: undefined };
}
export const InitAppResponse = {
    $type: "devvit.cli.InitAppResponse",
    encode(message, writer = _m0.Writer.create()) {
        if (message.authCode !== undefined) {
            writer.uint32(10).string(message.authCode);
        }
        if (message.appName !== "") {
            writer.uint32(18).string(message.appName);
        }
        if (message.templateName !== undefined) {
            writer.uint32(26).string(message.templateName);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseInitAppResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.authCode = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.appName = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.templateName = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            authCode: isSet(object.authCode) ? globalThis.String(object.authCode) : undefined,
            appName: isSet(object.appName) ? globalThis.String(object.appName) : "",
            templateName: isSet(object.templateName) ? globalThis.String(object.templateName) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.authCode !== undefined) {
            obj.authCode = message.authCode;
        }
        if (message.appName !== "") {
            obj.appName = message.appName;
        }
        if (message.templateName !== undefined) {
            obj.templateName = message.templateName;
        }
        return obj;
    },
    create(base) {
        return InitAppResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseInitAppResponse();
        message.authCode = object.authCode ?? undefined;
        message.appName = object.appName ?? "";
        message.templateName = object.templateName ?? undefined;
        return message;
    },
};
messageTypeRegistry.set(InitAppResponse.$type, InitAppResponse);
function isSet(value) {
    return value !== null && value !== undefined;
}
