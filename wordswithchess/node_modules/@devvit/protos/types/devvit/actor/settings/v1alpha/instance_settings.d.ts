/**
 * #instance_settings.ts
 *
 * Code generated by ts-proto. DO NOT EDIT.
 * @packageDocumentation
 */
import _m0 from "protobufjs/minimal.js";
import { Metadata } from "../../../../../lib/Types.js";
import { GetFieldsRequest, GetFieldsResponse, ValidateFormRequest, ValidateFormResponse } from "./shared.js";
/**
 * Define settings scoped to a single instance of your app.
 * Useful for multi-instanced apps such as custom posts, where each post is configured by the user
 * when they create the post.  These values will _not_ be shared between instances.
 * Load the saved values with the Settings plugin.
 */
export interface InstanceSettings {
    /** Requested by the platform when rendering the form to configure this actor */
    GetSettingsFields(request: GetFieldsRequest, metadata?: Metadata): Promise<GetFieldsResponse>;
    /** Called by the platform to allow more advanced verification of fields */
    ValidateForm(request: ValidateFormRequest, metadata?: Metadata): Promise<ValidateFormResponse>;
}
export declare const InstanceSettingsServiceName = "devvit.actor.settings.v1alpha.InstanceSettings";
export declare class InstanceSettingsClientImpl implements InstanceSettings {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    GetSettingsFields(request: GetFieldsRequest, metadata?: Metadata): Promise<GetFieldsResponse>;
    ValidateForm(request: ValidateFormRequest, metadata?: Metadata): Promise<ValidateFormResponse>;
}
/**
 * Define settings scoped to a single instance of your app.
 * Useful for multi-instanced apps such as custom posts, where each post is configured by the user
 * when they create the post.  These values will _not_ be shared between instances.
 * Load the saved values with the Settings plugin.
 */
export type InstanceSettingsDefinition = typeof InstanceSettingsDefinition;
export declare const InstanceSettingsDefinition: {
    readonly name: "InstanceSettings";
    readonly fullName: "devvit.actor.settings.v1alpha.InstanceSettings";
    readonly methods: {
        /** Requested by the platform when rendering the form to configure this actor */
        readonly getSettingsFields: {
            readonly name: "GetSettingsFields";
            readonly requestType: {
                $type: "devvit.actor.settings.v1alpha.GetFieldsRequest";
                encode(message: GetFieldsRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): GetFieldsRequest;
                fromJSON(object: any): GetFieldsRequest;
                toJSON(message: GetFieldsRequest): unknown;
                create(base?: {
                    editing?: boolean;
                }): GetFieldsRequest;
                fromPartial(object: {
                    editing?: boolean;
                }): GetFieldsRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.actor.settings.v1alpha.GetFieldsResponse";
                encode(message: GetFieldsResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): GetFieldsResponse;
                fromJSON(object: any): GetFieldsResponse;
                toJSON(message: GetFieldsResponse): unknown;
                create(base?: {
                    fields?: {
                        fields?: {
                            fieldId?: string;
                            fieldType?: import("../../../../../community.js").FormFieldType;
                            label?: string;
                            helpText?: string | undefined | undefined;
                            defaultValue?: {
                                fieldType?: import("../../../../../community.js").FormFieldType;
                                isSecret?: boolean | undefined | undefined;
                                stringValue?: string | undefined | undefined;
                                numberValue?: number | undefined | undefined;
                                boolValue?: boolean | undefined | undefined;
                                listValue?: {
                                    itemType?: import("../../../../../community.js").FormFieldType;
                                    items?: /*elided*/ any[];
                                } | undefined;
                                selectionValue?: {
                                    values?: string[];
                                } | undefined;
                                groupValue?: {} | undefined;
                            } | undefined;
                            required?: boolean | undefined | undefined;
                            disabled?: boolean | undefined | undefined;
                            fieldConfig?: {
                                stringConfig?: {
                                    minLength?: number | undefined | undefined;
                                    maxLength?: number | undefined | undefined;
                                    placeholder?: string | undefined | undefined;
                                } | undefined;
                                paragraphConfig?: {
                                    maxCharacters?: number | undefined | undefined;
                                    lineHeight?: number | undefined | undefined;
                                    placeholder?: string | undefined | undefined;
                                } | undefined;
                                numberConfig?: {
                                    step?: number | undefined | undefined;
                                    min?: number | undefined | undefined;
                                    max?: number | undefined | undefined;
                                } | undefined;
                                booleanConfig?: {} | undefined;
                                listConfig?: {
                                    itemType?: import("../../../../../community.js").FormFieldType;
                                    itemConfig?: /*elided*/ any | undefined;
                                    minEntries?: number | undefined | undefined;
                                    maxEntries?: number | undefined | undefined;
                                    entryLabel?: string | undefined | undefined;
                                } | undefined;
                                selectionConfig?: {
                                    choices?: {
                                        label?: string;
                                        value?: string;
                                    }[];
                                    multiSelect?: boolean | undefined | undefined;
                                    minSelections?: number | undefined | undefined;
                                    maxSelections?: number | undefined | undefined;
                                    renderAsList?: boolean | undefined | undefined;
                                } | undefined;
                                groupConfig?: {
                                    fields?: /*elided*/ any[];
                                } | undefined;
                            } | undefined;
                            isSecret?: boolean | undefined | undefined;
                        }[];
                        title?: string | undefined | undefined;
                        shortDescription?: string | undefined | undefined;
                        acceptLabel?: string | undefined | undefined;
                        cancelLabel?: string | undefined | undefined;
                        id?: string | undefined | undefined;
                    } | undefined;
                }): GetFieldsResponse;
                fromPartial(object: {
                    fields?: {
                        fields?: {
                            fieldId?: string;
                            fieldType?: import("../../../../../community.js").FormFieldType;
                            label?: string;
                            helpText?: string | undefined | undefined;
                            defaultValue?: {
                                fieldType?: import("../../../../../community.js").FormFieldType;
                                isSecret?: boolean | undefined | undefined;
                                stringValue?: string | undefined | undefined;
                                numberValue?: number | undefined | undefined;
                                boolValue?: boolean | undefined | undefined;
                                listValue?: {
                                    itemType?: import("../../../../../community.js").FormFieldType;
                                    items?: /*elided*/ any[];
                                } | undefined;
                                selectionValue?: {
                                    values?: string[];
                                } | undefined;
                                groupValue?: {} | undefined;
                            } | undefined;
                            required?: boolean | undefined | undefined;
                            disabled?: boolean | undefined | undefined;
                            fieldConfig?: {
                                stringConfig?: {
                                    minLength?: number | undefined | undefined;
                                    maxLength?: number | undefined | undefined;
                                    placeholder?: string | undefined | undefined;
                                } | undefined;
                                paragraphConfig?: {
                                    maxCharacters?: number | undefined | undefined;
                                    lineHeight?: number | undefined | undefined;
                                    placeholder?: string | undefined | undefined;
                                } | undefined;
                                numberConfig?: {
                                    step?: number | undefined | undefined;
                                    min?: number | undefined | undefined;
                                    max?: number | undefined | undefined;
                                } | undefined;
                                booleanConfig?: {} | undefined;
                                listConfig?: {
                                    itemType?: import("../../../../../community.js").FormFieldType;
                                    itemConfig?: /*elided*/ any | undefined;
                                    minEntries?: number | undefined | undefined;
                                    maxEntries?: number | undefined | undefined;
                                    entryLabel?: string | undefined | undefined;
                                } | undefined;
                                selectionConfig?: {
                                    choices?: {
                                        label?: string;
                                        value?: string;
                                    }[];
                                    multiSelect?: boolean | undefined | undefined;
                                    minSelections?: number | undefined | undefined;
                                    maxSelections?: number | undefined | undefined;
                                    renderAsList?: boolean | undefined | undefined;
                                } | undefined;
                                groupConfig?: {
                                    fields?: /*elided*/ any[];
                                } | undefined;
                            } | undefined;
                            isSecret?: boolean | undefined | undefined;
                        }[];
                        title?: string | undefined | undefined;
                        shortDescription?: string | undefined | undefined;
                        acceptLabel?: string | undefined | undefined;
                        cancelLabel?: string | undefined | undefined;
                        id?: string | undefined | undefined;
                    } | undefined;
                }): GetFieldsResponse;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        /** Called by the platform to allow more advanced verification of fields */
        readonly validateForm: {
            readonly name: "ValidateForm";
            readonly requestType: {
                $type: "devvit.actor.settings.v1alpha.ValidateFormRequest";
                encode(message: ValidateFormRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): ValidateFormRequest;
                fromJSON(object: any): ValidateFormRequest;
                toJSON(message: ValidateFormRequest): unknown;
                create(base?: {
                    editing?: boolean;
                    fieldValues?: {
                        [x: string]: {
                            fieldType?: import("../../../../../community.js").FormFieldType;
                            isSecret?: boolean | undefined | undefined;
                            stringValue?: string | undefined | undefined;
                            numberValue?: number | undefined | undefined;
                            boolValue?: boolean | undefined | undefined;
                            listValue?: {
                                itemType?: import("../../../../../community.js").FormFieldType;
                                items?: /*elided*/ any[];
                            } | undefined;
                            selectionValue?: {
                                values?: string[];
                            } | undefined;
                            groupValue?: {} | undefined;
                        } | undefined;
                    };
                }): ValidateFormRequest;
                fromPartial(object: {
                    editing?: boolean;
                    fieldValues?: {
                        [x: string]: {
                            fieldType?: import("../../../../../community.js").FormFieldType;
                            isSecret?: boolean | undefined | undefined;
                            stringValue?: string | undefined | undefined;
                            numberValue?: number | undefined | undefined;
                            boolValue?: boolean | undefined | undefined;
                            listValue?: {
                                itemType?: import("../../../../../community.js").FormFieldType;
                                items?: /*elided*/ any[];
                            } | undefined;
                            selectionValue?: {
                                values?: string[];
                            } | undefined;
                            groupValue?: {} | undefined;
                        } | undefined;
                    };
                }): ValidateFormRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.actor.settings.v1alpha.ValidateFormResponse";
                encode(message: ValidateFormResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): ValidateFormResponse;
                fromJSON(object: any): ValidateFormResponse;
                toJSON(message: ValidateFormResponse): unknown;
                create(base?: {
                    success?: boolean;
                    errors?: {
                        [x: string]: string | undefined;
                    };
                }): ValidateFormResponse;
                fromPartial(object: {
                    success?: boolean;
                    errors?: {
                        [x: string]: string | undefined;
                    };
                }): ValidateFormResponse;
            };
            readonly responseStream: false;
            readonly options: {};
        };
    };
};
interface Rpc {
    request(service: string, method: string, data: Uint8Array, metadata?: Metadata): Promise<Uint8Array>;
}
export {};
//# sourceMappingURL=instance_settings.d.ts.map