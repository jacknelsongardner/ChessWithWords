/**
 * #webbit.ts
 *
 * Code generated by ts-proto. DO NOT EDIT.
 * @packageDocumentation
 */
import _m0 from "protobufjs/minimal.js";
import { Metadata } from "../../../../lib/Types.js";
export declare enum HttpMethod {
    HTTP_METHOD_UNSPECIFIED = 0,
    POST = 1,
    GET = 2,
    HEAD = 3,
    PUT = 4,
    DELETE = 5,
    PATCH = 6,
    OPTIONS = 7,
    UNRECOGNIZED = -1
}
export declare function httpMethodFromJSON(object: any): HttpMethod;
export declare function httpMethodToJSON(object: HttpMethod): number;
export interface WebbitHttpRequest {
    method: HttpMethod;
    path: string;
    headers: {
        [key: string]: string;
    };
    body: Uint8Array;
}
export interface WebbitHttpRequest_HeadersEntry {
    key: string;
    value: string;
}
export interface WebbitHttpResponse {
    statusCode: number;
    headers: {
        [key: string]: string;
    };
    body: Uint8Array;
}
export interface WebbitHttpResponse_HeadersEntry {
    key: string;
    value: string;
}
export declare const WebbitHttpRequest: {
    $type: "devvit.actor.webbit.WebbitHttpRequest";
    encode(message: WebbitHttpRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): WebbitHttpRequest;
    fromJSON(object: any): WebbitHttpRequest;
    toJSON(message: WebbitHttpRequest): unknown;
    create(base?: DeepPartial<WebbitHttpRequest>): WebbitHttpRequest;
    fromPartial(object: DeepPartial<WebbitHttpRequest>): WebbitHttpRequest;
};
export declare const WebbitHttpRequest_HeadersEntry: {
    $type: "devvit.actor.webbit.WebbitHttpRequest.HeadersEntry";
    encode(message: WebbitHttpRequest_HeadersEntry, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): WebbitHttpRequest_HeadersEntry;
    fromJSON(object: any): WebbitHttpRequest_HeadersEntry;
    toJSON(message: WebbitHttpRequest_HeadersEntry): unknown;
    create(base?: DeepPartial<WebbitHttpRequest_HeadersEntry>): WebbitHttpRequest_HeadersEntry;
    fromPartial(object: DeepPartial<WebbitHttpRequest_HeadersEntry>): WebbitHttpRequest_HeadersEntry;
};
export declare const WebbitHttpResponse: {
    $type: "devvit.actor.webbit.WebbitHttpResponse";
    encode(message: WebbitHttpResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): WebbitHttpResponse;
    fromJSON(object: any): WebbitHttpResponse;
    toJSON(message: WebbitHttpResponse): unknown;
    create(base?: DeepPartial<WebbitHttpResponse>): WebbitHttpResponse;
    fromPartial(object: DeepPartial<WebbitHttpResponse>): WebbitHttpResponse;
};
export declare const WebbitHttpResponse_HeadersEntry: {
    $type: "devvit.actor.webbit.WebbitHttpResponse.HeadersEntry";
    encode(message: WebbitHttpResponse_HeadersEntry, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): WebbitHttpResponse_HeadersEntry;
    fromJSON(object: any): WebbitHttpResponse_HeadersEntry;
    toJSON(message: WebbitHttpResponse_HeadersEntry): unknown;
    create(base?: DeepPartial<WebbitHttpResponse_HeadersEntry>): WebbitHttpResponse_HeadersEntry;
    fromPartial(object: DeepPartial<WebbitHttpResponse_HeadersEntry>): WebbitHttpResponse_HeadersEntry;
};
export interface WebbitServer {
    Request(request: WebbitHttpRequest, metadata?: Metadata): Promise<WebbitHttpResponse>;
}
export declare const WebbitServerServiceName = "devvit.actor.webbit.WebbitServer";
export declare class WebbitServerClientImpl implements WebbitServer {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    Request(request: WebbitHttpRequest, metadata?: Metadata): Promise<WebbitHttpResponse>;
}
export type WebbitServerDefinition = typeof WebbitServerDefinition;
export declare const WebbitServerDefinition: {
    readonly name: "WebbitServer";
    readonly fullName: "devvit.actor.webbit.WebbitServer";
    readonly methods: {
        readonly request: {
            readonly name: "Request";
            readonly requestType: {
                $type: "devvit.actor.webbit.WebbitHttpRequest";
                encode(message: WebbitHttpRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): WebbitHttpRequest;
                fromJSON(object: any): WebbitHttpRequest;
                toJSON(message: WebbitHttpRequest): unknown;
                create(base?: DeepPartial<WebbitHttpRequest>): WebbitHttpRequest;
                fromPartial(object: DeepPartial<WebbitHttpRequest>): WebbitHttpRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.actor.webbit.WebbitHttpResponse";
                encode(message: WebbitHttpResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): WebbitHttpResponse;
                fromJSON(object: any): WebbitHttpResponse;
                toJSON(message: WebbitHttpResponse): unknown;
                create(base?: DeepPartial<WebbitHttpResponse>): WebbitHttpResponse;
                fromPartial(object: DeepPartial<WebbitHttpResponse>): WebbitHttpResponse;
            };
            readonly responseStream: false;
            readonly options: {};
        };
    };
};
interface Rpc {
    request(service: string, method: string, data: Uint8Array, metadata?: Metadata): Promise<Uint8Array>;
}
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
type DeepPartial<T> = T extends Builtin ? T : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export {};
//# sourceMappingURL=webbit.d.ts.map