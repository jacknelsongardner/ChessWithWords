/**
 * #playtest_subreddit.ts
 *
 * Code generated by ts-proto. DO NOT EDIT.
 * @packageDocumentation
 */
import _m0 from "protobufjs/minimal.js";
import { Metadata } from "../../../../lib/Types.js";
export interface CreatePlaytestSubredditRequest {
    /** Name of the app for which to create the playtest subreddit */
    appName: string;
    /** T2 of the developer's reddit account to add them as a moderator */
    devUserId: string;
}
export interface CreatePlaytestSubredditResponse {
    /** ID of the subreddit created */
    subredditId: string;
    /** Name of the subreddit created */
    subredditName: string;
}
export declare const CreatePlaytestSubredditRequest: {
    $type: "devvit.gateway.playtest_subreddit.CreatePlaytestSubredditRequest";
    encode(message: CreatePlaytestSubredditRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): CreatePlaytestSubredditRequest;
    fromJSON(object: any): CreatePlaytestSubredditRequest;
    toJSON(message: CreatePlaytestSubredditRequest): unknown;
    create(base?: DeepPartial<CreatePlaytestSubredditRequest>): CreatePlaytestSubredditRequest;
    fromPartial(object: DeepPartial<CreatePlaytestSubredditRequest>): CreatePlaytestSubredditRequest;
};
export declare const CreatePlaytestSubredditResponse: {
    $type: "devvit.gateway.playtest_subreddit.CreatePlaytestSubredditResponse";
    encode(message: CreatePlaytestSubredditResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): CreatePlaytestSubredditResponse;
    fromJSON(object: any): CreatePlaytestSubredditResponse;
    toJSON(message: CreatePlaytestSubredditResponse): unknown;
    create(base?: DeepPartial<CreatePlaytestSubredditResponse>): CreatePlaytestSubredditResponse;
    fromPartial(object: DeepPartial<CreatePlaytestSubredditResponse>): CreatePlaytestSubredditResponse;
};
export interface PlaytestSubreddit {
    /** Create a playtest subreddit for an app */
    CreatePlaytestSubreddit(request: CreatePlaytestSubredditRequest, metadata?: Metadata): Promise<CreatePlaytestSubredditResponse>;
}
export declare const PlaytestSubredditServiceName = "devvit.gateway.playtest_subreddit.PlaytestSubreddit";
export declare class PlaytestSubredditClientImpl implements PlaytestSubreddit {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    CreatePlaytestSubreddit(request: CreatePlaytestSubredditRequest, metadata?: Metadata): Promise<CreatePlaytestSubredditResponse>;
}
export type PlaytestSubredditDefinition = typeof PlaytestSubredditDefinition;
export declare const PlaytestSubredditDefinition: {
    readonly name: "PlaytestSubreddit";
    readonly fullName: "devvit.gateway.playtest_subreddit.PlaytestSubreddit";
    readonly methods: {
        /** Create a playtest subreddit for an app */
        readonly createPlaytestSubreddit: {
            readonly name: "CreatePlaytestSubreddit";
            readonly requestType: {
                $type: "devvit.gateway.playtest_subreddit.CreatePlaytestSubredditRequest";
                encode(message: CreatePlaytestSubredditRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): CreatePlaytestSubredditRequest;
                fromJSON(object: any): CreatePlaytestSubredditRequest;
                toJSON(message: CreatePlaytestSubredditRequest): unknown;
                create(base?: DeepPartial<CreatePlaytestSubredditRequest>): CreatePlaytestSubredditRequest;
                fromPartial(object: DeepPartial<CreatePlaytestSubredditRequest>): CreatePlaytestSubredditRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.gateway.playtest_subreddit.CreatePlaytestSubredditResponse";
                encode(message: CreatePlaytestSubredditResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): CreatePlaytestSubredditResponse;
                fromJSON(object: any): CreatePlaytestSubredditResponse;
                toJSON(message: CreatePlaytestSubredditResponse): unknown;
                create(base?: DeepPartial<CreatePlaytestSubredditResponse>): CreatePlaytestSubredditResponse;
                fromPartial(object: DeepPartial<CreatePlaytestSubredditResponse>): CreatePlaytestSubredditResponse;
            };
            readonly responseStream: false;
            readonly options: {};
        };
    };
};
interface Rpc {
    request(service: string, method: string, data: Uint8Array, metadata?: Metadata): Promise<Uint8Array>;
}
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
type DeepPartial<T> = T extends Builtin ? T : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export {};
//# sourceMappingURL=playtest_subreddit.d.ts.map