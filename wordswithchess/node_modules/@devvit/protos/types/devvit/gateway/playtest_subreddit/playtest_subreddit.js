/**
 * #playtest_subreddit.ts
 *
 * Code generated by ts-proto. DO NOT EDIT.
 * @packageDocumentation
 */
/* eslint-disable */
import _m0 from "protobufjs/minimal.js";
import { messageTypeRegistry } from "../../../typeRegistry.js";
function createBaseCreatePlaytestSubredditRequest() {
    return { appName: "", devUserId: "" };
}
export const CreatePlaytestSubredditRequest = {
    $type: "devvit.gateway.playtest_subreddit.CreatePlaytestSubredditRequest",
    encode(message, writer = _m0.Writer.create()) {
        if (message.appName !== "") {
            writer.uint32(10).string(message.appName);
        }
        if (message.devUserId !== "") {
            writer.uint32(18).string(message.devUserId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCreatePlaytestSubredditRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.appName = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.devUserId = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            appName: isSet(object.appName) ? globalThis.String(object.appName) : "",
            devUserId: isSet(object.devUserId) ? globalThis.String(object.devUserId) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.appName !== "") {
            obj.appName = message.appName;
        }
        if (message.devUserId !== "") {
            obj.devUserId = message.devUserId;
        }
        return obj;
    },
    create(base) {
        return CreatePlaytestSubredditRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCreatePlaytestSubredditRequest();
        message.appName = object.appName ?? "";
        message.devUserId = object.devUserId ?? "";
        return message;
    },
};
messageTypeRegistry.set(CreatePlaytestSubredditRequest.$type, CreatePlaytestSubredditRequest);
function createBaseCreatePlaytestSubredditResponse() {
    return { subredditId: "", subredditName: "" };
}
export const CreatePlaytestSubredditResponse = {
    $type: "devvit.gateway.playtest_subreddit.CreatePlaytestSubredditResponse",
    encode(message, writer = _m0.Writer.create()) {
        if (message.subredditId !== "") {
            writer.uint32(10).string(message.subredditId);
        }
        if (message.subredditName !== "") {
            writer.uint32(18).string(message.subredditName);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCreatePlaytestSubredditResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.subredditId = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.subredditName = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            subredditId: isSet(object.subredditId) ? globalThis.String(object.subredditId) : "",
            subredditName: isSet(object.subredditName) ? globalThis.String(object.subredditName) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.subredditId !== "") {
            obj.subredditId = message.subredditId;
        }
        if (message.subredditName !== "") {
            obj.subredditName = message.subredditName;
        }
        return obj;
    },
    create(base) {
        return CreatePlaytestSubredditResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCreatePlaytestSubredditResponse();
        message.subredditId = object.subredditId ?? "";
        message.subredditName = object.subredditName ?? "";
        return message;
    },
};
messageTypeRegistry.set(CreatePlaytestSubredditResponse.$type, CreatePlaytestSubredditResponse);
export const PlaytestSubredditServiceName = "devvit.gateway.playtest_subreddit.PlaytestSubreddit";
export class PlaytestSubredditClientImpl {
    constructor(rpc, opts) {
        this.service = opts?.service || PlaytestSubredditServiceName;
        this.rpc = rpc;
        this.CreatePlaytestSubreddit = this.CreatePlaytestSubreddit.bind(this);
    }
    CreatePlaytestSubreddit(request, metadata) {
        const data = CreatePlaytestSubredditRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "CreatePlaytestSubreddit", data, metadata);
        return promise.then((data) => CreatePlaytestSubredditResponse.decode(_m0.Reader.create(data)));
    }
}
export const PlaytestSubredditDefinition = {
    name: "PlaytestSubreddit",
    fullName: "devvit.gateway.playtest_subreddit.PlaytestSubreddit",
    methods: {
        /** Create a playtest subreddit for an app */
        createPlaytestSubreddit: {
            name: "CreatePlaytestSubreddit",
            requestType: CreatePlaytestSubredditRequest,
            requestStream: false,
            responseType: CreatePlaytestSubredditResponse,
            responseStream: false,
            options: {},
        },
    },
};
function isSet(value) {
    return value !== null && value !== undefined;
}
