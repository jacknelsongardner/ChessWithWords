/**
 * #useractions.ts
 *
 * Code generated by ts-proto. DO NOT EDIT.
 * @packageDocumentation
 */
/* eslint-disable */
import _m0 from "protobufjs/minimal.js";
import { CommentRequest, JsonWrappedComment, SubmitRequest, SubmitResponse, } from "../redditapi/linksandcomments/linksandcomments_msg.js";
export const UserActionsServiceName = "devvit.plugin.useractions.UserActions";
export class UserActionsClientImpl {
    constructor(rpc, opts) {
        this.service = opts?.service || UserActionsServiceName;
        this.rpc = rpc;
        this.Comment = this.Comment.bind(this);
        this.Submit = this.Submit.bind(this);
        this.SubmitCustomPost = this.SubmitCustomPost.bind(this);
    }
    Comment(request, metadata) {
        const data = CommentRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "Comment", data, metadata);
        return promise.then((data) => JsonWrappedComment.decode(_m0.Reader.create(data)));
    }
    Submit(request, metadata) {
        const data = SubmitRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "Submit", data, metadata);
        return promise.then((data) => SubmitResponse.decode(_m0.Reader.create(data)));
    }
    SubmitCustomPost(request, metadata) {
        const data = SubmitRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "SubmitCustomPost", data, metadata);
        return promise.then((data) => SubmitResponse.decode(_m0.Reader.create(data)));
    }
}
export const UserActionsDefinition = {
    name: "UserActions",
    fullName: "devvit.plugin.useractions.UserActions",
    methods: {
        /** Submit a new Comment on behalf of the User */
        comment: {
            name: "Comment",
            requestType: CommentRequest,
            requestStream: false,
            responseType: JsonWrappedComment,
            responseStream: false,
            options: {},
        },
        /** Create a new Post on behalf of the User */
        submit: {
            name: "Submit",
            requestType: SubmitRequest,
            requestStream: false,
            responseType: SubmitResponse,
            responseStream: false,
            options: {},
        },
        /** Create a new custom Post on behalf of the User */
        submitCustomPost: {
            name: "SubmitCustomPost",
            requestType: SubmitRequest,
            requestStream: false,
            responseType: SubmitResponse,
            responseStream: false,
            options: {},
        },
    },
};
