import { TwirpServer, TwirpError, TwirpErrorCode, TwirpContentType, chainInterceptors, } from 'twirp-ts';
import { CommentRequest, JsonWrappedComment, SubmitRequest, SubmitResponse, } from '../redditapi/linksandcomments/linksandcomments_msg.js';
export var UserActionsMethod;
(function (UserActionsMethod) {
    UserActionsMethod["Comment"] = "Comment";
    UserActionsMethod["Submit"] = "Submit";
    UserActionsMethod["SubmitCustomPost"] = "SubmitCustomPost";
})(UserActionsMethod || (UserActionsMethod = {}));
export const UserActionsMethodList = [
    UserActionsMethod.Comment,
    UserActionsMethod.Submit,
    UserActionsMethod.SubmitCustomPost,
];
export function createUserActionsServer(service) {
    return new TwirpServer({
        service,
        packageName: 'devvit.plugin.useractions',
        serviceName: 'UserActions',
        methodList: UserActionsMethodList,
        matchRoute: matchUserActionsRoute,
    });
}
function matchUserActionsRoute(method, events) {
    switch (method) {
        case 'Comment':
            return async (ctx, service, data, interceptors) => {
                ctx = { ...ctx, methodName: 'Comment' };
                await events.onMatch(ctx);
                return handleUserActionsCommentRequest(ctx, service, data, interceptors);
            };
        case 'Submit':
            return async (ctx, service, data, interceptors) => {
                ctx = { ...ctx, methodName: 'Submit' };
                await events.onMatch(ctx);
                return handleUserActionsSubmitRequest(ctx, service, data, interceptors);
            };
        case 'SubmitCustomPost':
            return async (ctx, service, data, interceptors) => {
                ctx = { ...ctx, methodName: 'SubmitCustomPost' };
                await events.onMatch(ctx);
                return handleUserActionsSubmitCustomPostRequest(ctx, service, data, interceptors);
            };
        default:
            events.onNotFound();
            const msg = `no handler found`;
            throw new TwirpError(TwirpErrorCode.BadRoute, msg);
    }
}
function handleUserActionsCommentRequest(ctx, service, data, interceptors) {
    switch (ctx.contentType) {
        case TwirpContentType.JSON:
            return handleUserActionsCommentJSON(ctx, service, data, interceptors);
        case TwirpContentType.Protobuf:
            return handleUserActionsCommentProtobuf(ctx, service, data, interceptors);
        default:
            const msg = 'unexpected Content-Type';
            throw new TwirpError(TwirpErrorCode.BadRoute, msg);
    }
}
function handleUserActionsSubmitRequest(ctx, service, data, interceptors) {
    switch (ctx.contentType) {
        case TwirpContentType.JSON:
            return handleUserActionsSubmitJSON(ctx, service, data, interceptors);
        case TwirpContentType.Protobuf:
            return handleUserActionsSubmitProtobuf(ctx, service, data, interceptors);
        default:
            const msg = 'unexpected Content-Type';
            throw new TwirpError(TwirpErrorCode.BadRoute, msg);
    }
}
function handleUserActionsSubmitCustomPostRequest(ctx, service, data, interceptors) {
    switch (ctx.contentType) {
        case TwirpContentType.JSON:
            return handleUserActionsSubmitCustomPostJSON(ctx, service, data, interceptors);
        case TwirpContentType.Protobuf:
            return handleUserActionsSubmitCustomPostProtobuf(ctx, service, data, interceptors);
        default:
            const msg = 'unexpected Content-Type';
            throw new TwirpError(TwirpErrorCode.BadRoute, msg);
    }
}
async function handleUserActionsCommentJSON(ctx, service, data, interceptors) {
    let request;
    let response;
    try {
        const body = JSON.parse(data.toString() || '{}');
        request = CommentRequest.fromJSON(body);
    }
    catch (e) {
        if (e instanceof Error) {
            const msg = 'the json request could not be decoded';
            throw new TwirpError(TwirpErrorCode.Malformed, msg).withCause(e, true);
        }
    }
    if (interceptors && interceptors.length > 0) {
        const interceptor = chainInterceptors(...interceptors);
        response = await interceptor(ctx, request, (ctx, inputReq) => {
            return service.Comment(ctx, inputReq);
        });
    }
    else {
        response = await service.Comment(ctx, request);
    }
    return JSON.stringify(JsonWrappedComment.toJSON(response));
}
async function handleUserActionsSubmitJSON(ctx, service, data, interceptors) {
    let request;
    let response;
    try {
        const body = JSON.parse(data.toString() || '{}');
        request = SubmitRequest.fromJSON(body);
    }
    catch (e) {
        if (e instanceof Error) {
            const msg = 'the json request could not be decoded';
            throw new TwirpError(TwirpErrorCode.Malformed, msg).withCause(e, true);
        }
    }
    if (interceptors && interceptors.length > 0) {
        const interceptor = chainInterceptors(...interceptors);
        response = await interceptor(ctx, request, (ctx, inputReq) => {
            return service.Submit(ctx, inputReq);
        });
    }
    else {
        response = await service.Submit(ctx, request);
    }
    return JSON.stringify(SubmitResponse.toJSON(response));
}
async function handleUserActionsSubmitCustomPostJSON(ctx, service, data, interceptors) {
    let request;
    let response;
    try {
        const body = JSON.parse(data.toString() || '{}');
        request = SubmitRequest.fromJSON(body);
    }
    catch (e) {
        if (e instanceof Error) {
            const msg = 'the json request could not be decoded';
            throw new TwirpError(TwirpErrorCode.Malformed, msg).withCause(e, true);
        }
    }
    if (interceptors && interceptors.length > 0) {
        const interceptor = chainInterceptors(...interceptors);
        response = await interceptor(ctx, request, (ctx, inputReq) => {
            return service.SubmitCustomPost(ctx, inputReq);
        });
    }
    else {
        response = await service.SubmitCustomPost(ctx, request);
    }
    return JSON.stringify(SubmitResponse.toJSON(response));
}
async function handleUserActionsCommentProtobuf(ctx, service, data, interceptors) {
    let request;
    let response;
    try {
        request = CommentRequest.decode(data);
    }
    catch (e) {
        if (e instanceof Error) {
            const msg = 'the protobuf request could not be decoded';
            throw new TwirpError(TwirpErrorCode.Malformed, msg).withCause(e, true);
        }
    }
    if (interceptors && interceptors.length > 0) {
        const interceptor = chainInterceptors(...interceptors);
        response = await interceptor(ctx, request, (ctx, inputReq) => {
            return service.Comment(ctx, inputReq);
        });
    }
    else {
        response = await service.Comment(ctx, request);
    }
    return Buffer.from(JsonWrappedComment.encode(response).finish());
}
async function handleUserActionsSubmitProtobuf(ctx, service, data, interceptors) {
    let request;
    let response;
    try {
        request = SubmitRequest.decode(data);
    }
    catch (e) {
        if (e instanceof Error) {
            const msg = 'the protobuf request could not be decoded';
            throw new TwirpError(TwirpErrorCode.Malformed, msg).withCause(e, true);
        }
    }
    if (interceptors && interceptors.length > 0) {
        const interceptor = chainInterceptors(...interceptors);
        response = await interceptor(ctx, request, (ctx, inputReq) => {
            return service.Submit(ctx, inputReq);
        });
    }
    else {
        response = await service.Submit(ctx, request);
    }
    return Buffer.from(SubmitResponse.encode(response).finish());
}
async function handleUserActionsSubmitCustomPostProtobuf(ctx, service, data, interceptors) {
    let request;
    let response;
    try {
        request = SubmitRequest.decode(data);
    }
    catch (e) {
        if (e instanceof Error) {
            const msg = 'the protobuf request could not be decoded';
            throw new TwirpError(TwirpErrorCode.Malformed, msg).withCause(e, true);
        }
    }
    if (interceptors && interceptors.length > 0) {
        const interceptor = chainInterceptors(...interceptors);
        response = await interceptor(ctx, request, (ctx, inputReq) => {
            return service.SubmitCustomPost(ctx, inputReq);
        });
    }
    else {
        response = await service.SubmitCustomPost(ctx, request);
    }
    return Buffer.from(SubmitResponse.encode(response).finish());
}
