/**
 * #useractions.ts
 *
 * Code generated by ts-proto. DO NOT EDIT.
 * @packageDocumentation
 */
import _m0 from "protobufjs/minimal.js";
import { Metadata } from "../../../../lib/Types.js";
import { CommentRequest, JsonWrappedComment, SubmitRequest, SubmitResponse } from "../redditapi/linksandcomments/linksandcomments_msg.js";
/** Service for performing actions on behalf of the User. */
export interface UserActions {
    /** Submit a new Comment on behalf of the User */
    Comment(request: CommentRequest, metadata?: Metadata): Promise<JsonWrappedComment>;
    /** Create a new Post on behalf of the User */
    Submit(request: SubmitRequest, metadata?: Metadata): Promise<SubmitResponse>;
    /** Create a new custom Post on behalf of the User */
    SubmitCustomPost(request: SubmitRequest, metadata?: Metadata): Promise<SubmitResponse>;
}
export declare const UserActionsServiceName = "devvit.plugin.useractions.UserActions";
export declare class UserActionsClientImpl implements UserActions {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    Comment(request: CommentRequest, metadata?: Metadata): Promise<JsonWrappedComment>;
    Submit(request: SubmitRequest, metadata?: Metadata): Promise<SubmitResponse>;
    SubmitCustomPost(request: SubmitRequest, metadata?: Metadata): Promise<SubmitResponse>;
}
/** Service for performing actions on behalf of the User. */
export type UserActionsDefinition = typeof UserActionsDefinition;
export declare const UserActionsDefinition: {
    readonly name: "UserActions";
    readonly fullName: "devvit.plugin.useractions.UserActions";
    readonly methods: {
        /** Submit a new Comment on behalf of the User */
        readonly comment: {
            readonly name: "Comment";
            readonly requestType: {
                $type: "devvit.plugin.redditapi.linksandcomments.CommentRequest";
                encode(message: CommentRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): CommentRequest;
                fromJSON(object: any): CommentRequest;
                toJSON(message: CommentRequest): unknown;
                create(base?: {
                    richtextJson?: string | undefined | undefined;
                    text?: string;
                    thingId?: string;
                    runAs?: import("../redditapi/common/common_msg.js").RunAs;
                }): CommentRequest;
                fromPartial(object: {
                    richtextJson?: string | undefined | undefined;
                    text?: string;
                    thingId?: string;
                    runAs?: import("../redditapi/common/common_msg.js").RunAs;
                }): CommentRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.plugin.redditapi.linksandcomments.JsonWrappedComment";
                encode(message: JsonWrappedComment, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): JsonWrappedComment;
                fromJSON(object: any): JsonWrappedComment;
                toJSON(message: JsonWrappedComment): unknown;
                create(base?: {
                    json?: {
                        errors?: string[];
                        data?: {
                            things?: {
                                kind?: string;
                                data?: {
                                    allAwardings?: {
                                        awardSubType?: string | undefined | undefined;
                                        awardType?: string | undefined | undefined;
                                        awardingsRequiredToGrantBenefits?: number | undefined | undefined;
                                        coinPrice?: number | undefined | undefined;
                                        coinReward?: number | undefined | undefined;
                                        count?: number | undefined | undefined;
                                        daysOfDripExtension?: number | undefined | undefined;
                                        daysOfPremium?: number | undefined | undefined;
                                        description?: string | undefined | undefined;
                                        endDate?: string | undefined | undefined;
                                        giverCoinReward?: number | undefined | undefined;
                                        iconFormat?: string | undefined | undefined;
                                        iconHeight?: number | undefined | undefined;
                                        iconUrl?: string | undefined | undefined;
                                        iconWidth?: number | undefined | undefined;
                                        id?: string | undefined | undefined;
                                        isEnabled?: boolean | undefined | undefined;
                                        isNew?: boolean | undefined | undefined;
                                        name?: string | undefined | undefined;
                                        pennyDonate?: number | undefined | undefined;
                                        pennyPrice?: number | undefined | undefined;
                                        resizedIcons?: {
                                            height?: number | undefined | undefined;
                                            url?: string | undefined | undefined;
                                            width?: number | undefined | undefined;
                                        }[];
                                        resizedStaticIcons?: {
                                            height?: number | undefined | undefined;
                                            url?: string | undefined | undefined;
                                            width?: number | undefined | undefined;
                                        }[];
                                        startDate?: string | undefined | undefined;
                                        staticIconHeight?: number | undefined | undefined;
                                        staticIconUrl?: string | undefined | undefined;
                                        staticIconWidth?: number | undefined | undefined;
                                        stickyDurationSeconds?: number | undefined | undefined;
                                        subredditCoinReward?: number | undefined | undefined;
                                        subredditId?: string | undefined | undefined;
                                        tiersByRequiredAwardings?: string | undefined | undefined;
                                    }[];
                                    approved?: boolean | undefined | undefined;
                                    approvedAtUtc?: number | undefined | undefined;
                                    approvedBy?: string | undefined | undefined;
                                    archived?: boolean | undefined | undefined;
                                    associatedAward?: string | undefined | undefined;
                                    author?: string | undefined | undefined;
                                    authorFlairBackgroundColor?: string | undefined | undefined;
                                    authorFlairCssClass?: string | undefined | undefined;
                                    authorFlairRichtext?: {
                                        e?: string | undefined | undefined;
                                        t?: string | undefined | undefined;
                                    }[];
                                    authorFlairTemplateId?: string | undefined | undefined;
                                    authorFlairText?: string | undefined | undefined;
                                    authorFlairTextColor?: string | undefined | undefined;
                                    authorFlairType?: string | undefined | undefined;
                                    authorFullname?: string | undefined | undefined;
                                    authorIsBlocked?: boolean | undefined | undefined;
                                    authorPatreonFlair?: boolean | undefined | undefined;
                                    authorPremium?: boolean | undefined | undefined;
                                    awarders?: string[];
                                    bannedAtUtc?: number | undefined | undefined;
                                    bannedBy?: string | undefined | undefined;
                                    body?: string | undefined | undefined;
                                    bodyHtml?: string | undefined | undefined;
                                    canGild?: boolean | undefined | undefined;
                                    canModPost?: boolean | undefined | undefined;
                                    collapsed?: boolean | undefined | undefined;
                                    collapsedBecauseCrowdControl?: boolean | undefined | undefined;
                                    collapsedReason?: string | undefined | undefined;
                                    collapsedReasonCode?: string | undefined | undefined;
                                    commentType?: string | undefined | undefined;
                                    controversiality?: number | undefined | undefined;
                                    created?: number | undefined | undefined;
                                    createdUtc?: number | undefined | undefined;
                                    depth?: number | undefined | undefined;
                                    distinguished?: string | undefined | undefined;
                                    downs?: number | undefined | undefined;
                                    edited?: boolean | undefined | undefined;
                                    gilded?: number | undefined | undefined;
                                    gildings?: {
                                        gid1?: number | undefined | undefined;
                                        gid2?: number | undefined | undefined;
                                        gid3?: number | undefined | undefined;
                                    } | undefined;
                                    id?: string | undefined | undefined;
                                    ignoreReports?: boolean | undefined | undefined;
                                    isSubmitter?: boolean | undefined | undefined;
                                    likes?: boolean | undefined | undefined;
                                    linkId?: string | undefined | undefined;
                                    locked?: boolean | undefined | undefined;
                                    modNote?: string | undefined | undefined;
                                    modReasonBy?: string | undefined | undefined;
                                    modReasonTitle?: string | undefined | undefined;
                                    modReports?: any[][];
                                    name?: string | undefined | undefined;
                                    noFollow?: boolean | undefined | undefined;
                                    numReports?: number | undefined | undefined;
                                    parentId?: string | undefined | undefined;
                                    permalink?: string | undefined | undefined;
                                    removalReason?: string | undefined | undefined;
                                    removed?: boolean | undefined | undefined;
                                    replies?: string | undefined | undefined;
                                    reportReasons?: string[];
                                    rteMode?: string | undefined | undefined;
                                    saved?: boolean | undefined | undefined;
                                    score?: number | undefined | undefined;
                                    scoreHidden?: boolean | undefined | undefined;
                                    sendReplies?: boolean | undefined | undefined;
                                    spam?: boolean | undefined | undefined;
                                    stickied?: boolean | undefined | undefined;
                                    subreddit?: string | undefined | undefined;
                                    subredditId?: string | undefined | undefined;
                                    subredditNamePrefixed?: string | undefined | undefined;
                                    subredditType?: string | undefined | undefined;
                                    topAwardedType?: string | undefined | undefined;
                                    totalAwardsReceived?: number | undefined | undefined;
                                    treatmentTags?: string[];
                                    unrepliableReason?: string | undefined | undefined;
                                    ups?: number | undefined | undefined;
                                    userReports?: any[][];
                                    count?: number | undefined | undefined;
                                    children?: string[];
                                    banInfo?: {
                                        auto?: boolean | undefined | undefined;
                                        bannedAt?: number | undefined | undefined;
                                        banner?: string | undefined | undefined;
                                        moderatorBanned?: boolean | undefined | undefined;
                                        note?: string | undefined | undefined;
                                        unbanner?: string | undefined | undefined;
                                        unbannedAt?: number | undefined | undefined;
                                        resetUsed?: boolean | undefined | undefined;
                                        reasonId?: string | undefined | undefined;
                                        reasonTitle?: string | undefined | undefined;
                                        reasonMessage?: string | undefined | undefined;
                                        reasonBy?: string | undefined | undefined;
                                        modNote?: string | undefined | undefined;
                                        banAllTriggered?: boolean | undefined | undefined;
                                        subredditMessage?: string | undefined | undefined;
                                        removeAction?: import("../../reddit/common.js").BanInfo_BanInfoAction;
                                    } | undefined;
                                    markedSpam?: boolean | undefined | undefined;
                                    verdict?: string | undefined | undefined;
                                } | undefined;
                            }[];
                        } | undefined;
                    } | undefined;
                }): JsonWrappedComment;
                fromPartial(object: {
                    json?: {
                        errors?: string[];
                        data?: {
                            things?: {
                                kind?: string;
                                data?: {
                                    allAwardings?: {
                                        awardSubType?: string | undefined | undefined;
                                        awardType?: string | undefined | undefined;
                                        awardingsRequiredToGrantBenefits?: number | undefined | undefined;
                                        coinPrice?: number | undefined | undefined;
                                        coinReward?: number | undefined | undefined;
                                        count?: number | undefined | undefined;
                                        daysOfDripExtension?: number | undefined | undefined;
                                        daysOfPremium?: number | undefined | undefined;
                                        description?: string | undefined | undefined;
                                        endDate?: string | undefined | undefined;
                                        giverCoinReward?: number | undefined | undefined;
                                        iconFormat?: string | undefined | undefined;
                                        iconHeight?: number | undefined | undefined;
                                        iconUrl?: string | undefined | undefined;
                                        iconWidth?: number | undefined | undefined;
                                        id?: string | undefined | undefined;
                                        isEnabled?: boolean | undefined | undefined;
                                        isNew?: boolean | undefined | undefined;
                                        name?: string | undefined | undefined;
                                        pennyDonate?: number | undefined | undefined;
                                        pennyPrice?: number | undefined | undefined;
                                        resizedIcons?: {
                                            height?: number | undefined | undefined;
                                            url?: string | undefined | undefined;
                                            width?: number | undefined | undefined;
                                        }[];
                                        resizedStaticIcons?: {
                                            height?: number | undefined | undefined;
                                            url?: string | undefined | undefined;
                                            width?: number | undefined | undefined;
                                        }[];
                                        startDate?: string | undefined | undefined;
                                        staticIconHeight?: number | undefined | undefined;
                                        staticIconUrl?: string | undefined | undefined;
                                        staticIconWidth?: number | undefined | undefined;
                                        stickyDurationSeconds?: number | undefined | undefined;
                                        subredditCoinReward?: number | undefined | undefined;
                                        subredditId?: string | undefined | undefined;
                                        tiersByRequiredAwardings?: string | undefined | undefined;
                                    }[];
                                    approved?: boolean | undefined | undefined;
                                    approvedAtUtc?: number | undefined | undefined;
                                    approvedBy?: string | undefined | undefined;
                                    archived?: boolean | undefined | undefined;
                                    associatedAward?: string | undefined | undefined;
                                    author?: string | undefined | undefined;
                                    authorFlairBackgroundColor?: string | undefined | undefined;
                                    authorFlairCssClass?: string | undefined | undefined;
                                    authorFlairRichtext?: {
                                        e?: string | undefined | undefined;
                                        t?: string | undefined | undefined;
                                    }[];
                                    authorFlairTemplateId?: string | undefined | undefined;
                                    authorFlairText?: string | undefined | undefined;
                                    authorFlairTextColor?: string | undefined | undefined;
                                    authorFlairType?: string | undefined | undefined;
                                    authorFullname?: string | undefined | undefined;
                                    authorIsBlocked?: boolean | undefined | undefined;
                                    authorPatreonFlair?: boolean | undefined | undefined;
                                    authorPremium?: boolean | undefined | undefined;
                                    awarders?: string[];
                                    bannedAtUtc?: number | undefined | undefined;
                                    bannedBy?: string | undefined | undefined;
                                    body?: string | undefined | undefined;
                                    bodyHtml?: string | undefined | undefined;
                                    canGild?: boolean | undefined | undefined;
                                    canModPost?: boolean | undefined | undefined;
                                    collapsed?: boolean | undefined | undefined;
                                    collapsedBecauseCrowdControl?: boolean | undefined | undefined;
                                    collapsedReason?: string | undefined | undefined;
                                    collapsedReasonCode?: string | undefined | undefined;
                                    commentType?: string | undefined | undefined;
                                    controversiality?: number | undefined | undefined;
                                    created?: number | undefined | undefined;
                                    createdUtc?: number | undefined | undefined;
                                    depth?: number | undefined | undefined;
                                    distinguished?: string | undefined | undefined;
                                    downs?: number | undefined | undefined;
                                    edited?: boolean | undefined | undefined;
                                    gilded?: number | undefined | undefined;
                                    gildings?: {
                                        gid1?: number | undefined | undefined;
                                        gid2?: number | undefined | undefined;
                                        gid3?: number | undefined | undefined;
                                    } | undefined;
                                    id?: string | undefined | undefined;
                                    ignoreReports?: boolean | undefined | undefined;
                                    isSubmitter?: boolean | undefined | undefined;
                                    likes?: boolean | undefined | undefined;
                                    linkId?: string | undefined | undefined;
                                    locked?: boolean | undefined | undefined;
                                    modNote?: string | undefined | undefined;
                                    modReasonBy?: string | undefined | undefined;
                                    modReasonTitle?: string | undefined | undefined;
                                    modReports?: any[][];
                                    name?: string | undefined | undefined;
                                    noFollow?: boolean | undefined | undefined;
                                    numReports?: number | undefined | undefined;
                                    parentId?: string | undefined | undefined;
                                    permalink?: string | undefined | undefined;
                                    removalReason?: string | undefined | undefined;
                                    removed?: boolean | undefined | undefined;
                                    replies?: string | undefined | undefined;
                                    reportReasons?: string[];
                                    rteMode?: string | undefined | undefined;
                                    saved?: boolean | undefined | undefined;
                                    score?: number | undefined | undefined;
                                    scoreHidden?: boolean | undefined | undefined;
                                    sendReplies?: boolean | undefined | undefined;
                                    spam?: boolean | undefined | undefined;
                                    stickied?: boolean | undefined | undefined;
                                    subreddit?: string | undefined | undefined;
                                    subredditId?: string | undefined | undefined;
                                    subredditNamePrefixed?: string | undefined | undefined;
                                    subredditType?: string | undefined | undefined;
                                    topAwardedType?: string | undefined | undefined;
                                    totalAwardsReceived?: number | undefined | undefined;
                                    treatmentTags?: string[];
                                    unrepliableReason?: string | undefined | undefined;
                                    ups?: number | undefined | undefined;
                                    userReports?: any[][];
                                    count?: number | undefined | undefined;
                                    children?: string[];
                                    banInfo?: {
                                        auto?: boolean | undefined | undefined;
                                        bannedAt?: number | undefined | undefined;
                                        banner?: string | undefined | undefined;
                                        moderatorBanned?: boolean | undefined | undefined;
                                        note?: string | undefined | undefined;
                                        unbanner?: string | undefined | undefined;
                                        unbannedAt?: number | undefined | undefined;
                                        resetUsed?: boolean | undefined | undefined;
                                        reasonId?: string | undefined | undefined;
                                        reasonTitle?: string | undefined | undefined;
                                        reasonMessage?: string | undefined | undefined;
                                        reasonBy?: string | undefined | undefined;
                                        modNote?: string | undefined | undefined;
                                        banAllTriggered?: boolean | undefined | undefined;
                                        subredditMessage?: string | undefined | undefined;
                                        removeAction?: import("../../reddit/common.js").BanInfo_BanInfoAction;
                                    } | undefined;
                                    markedSpam?: boolean | undefined | undefined;
                                    verdict?: string | undefined | undefined;
                                } | undefined;
                            }[];
                        } | undefined;
                    } | undefined;
                }): JsonWrappedComment;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        /** Create a new Post on behalf of the User */
        readonly submit: {
            readonly name: "Submit";
            readonly requestType: {
                $type: "devvit.plugin.redditapi.linksandcomments.SubmitRequest";
                encode(message: SubmitRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): SubmitRequest;
                fromJSON(object: any): SubmitRequest;
                toJSON(message: SubmitRequest): unknown;
                create(base?: {
                    collectionId?: string | undefined | undefined;
                    flairId?: string | undefined | undefined;
                    flairText?: string | undefined | undefined;
                    kind?: string;
                    nsfw?: boolean | undefined | undefined;
                    richtextJson?: string | undefined | undefined;
                    sendreplies?: boolean | undefined | undefined;
                    spoiler?: boolean | undefined | undefined;
                    sr?: string;
                    text?: string | undefined | undefined;
                    title?: string;
                    url?: string | undefined | undefined;
                    videoPosterUrl?: string | undefined | undefined;
                    crosspostFullname?: string | undefined | undefined;
                    richtextFallback?: string | undefined | undefined;
                    imageUrls?: any[] | undefined;
                    runAs?: import("../redditapi/common/common_msg.js").RunAs;
                    userGeneratedContent?: {
                        text?: string;
                        imageUrls?: string[];
                    } | undefined;
                    postData?: {
                        splash?: {
                            appDisplayName?: string | undefined | undefined;
                            appIconUri?: string | undefined | undefined;
                            backgroundUri?: string | undefined | undefined;
                            buttonLabel?: string | undefined | undefined;
                            description?: string | undefined | undefined;
                            entry?: string | undefined | undefined;
                            title?: string | undefined | undefined;
                        } | undefined;
                        developerData?: {
                            [x: string]: any;
                        } | undefined;
                    } | undefined;
                }): SubmitRequest;
                fromPartial(object: {
                    collectionId?: string | undefined | undefined;
                    flairId?: string | undefined | undefined;
                    flairText?: string | undefined | undefined;
                    kind?: string;
                    nsfw?: boolean | undefined | undefined;
                    richtextJson?: string | undefined | undefined;
                    sendreplies?: boolean | undefined | undefined;
                    spoiler?: boolean | undefined | undefined;
                    sr?: string;
                    text?: string | undefined | undefined;
                    title?: string;
                    url?: string | undefined | undefined;
                    videoPosterUrl?: string | undefined | undefined;
                    crosspostFullname?: string | undefined | undefined;
                    richtextFallback?: string | undefined | undefined;
                    imageUrls?: any[] | undefined;
                    runAs?: import("../redditapi/common/common_msg.js").RunAs;
                    userGeneratedContent?: {
                        text?: string;
                        imageUrls?: string[];
                    } | undefined;
                    postData?: {
                        splash?: {
                            appDisplayName?: string | undefined | undefined;
                            appIconUri?: string | undefined | undefined;
                            backgroundUri?: string | undefined | undefined;
                            buttonLabel?: string | undefined | undefined;
                            description?: string | undefined | undefined;
                            entry?: string | undefined | undefined;
                            title?: string | undefined | undefined;
                        } | undefined;
                        developerData?: {
                            [x: string]: any;
                        } | undefined;
                    } | undefined;
                }): SubmitRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.plugin.redditapi.linksandcomments.SubmitResponse";
                encode(message: SubmitResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): SubmitResponse;
                fromJSON(object: any): SubmitResponse;
                toJSON(message: SubmitResponse): unknown;
                create(base?: {
                    json?: {
                        errors?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        }[];
                        data?: {
                            url?: string | undefined | undefined;
                            draftsCount?: number | undefined | undefined;
                            id?: string | undefined | undefined;
                            name?: string | undefined | undefined;
                        } | undefined;
                    } | undefined;
                }): SubmitResponse;
                fromPartial(object: {
                    json?: {
                        errors?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        }[];
                        data?: {
                            url?: string | undefined | undefined;
                            draftsCount?: number | undefined | undefined;
                            id?: string | undefined | undefined;
                            name?: string | undefined | undefined;
                        } | undefined;
                    } | undefined;
                }): SubmitResponse;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        /** Create a new custom Post on behalf of the User */
        readonly submitCustomPost: {
            readonly name: "SubmitCustomPost";
            readonly requestType: {
                $type: "devvit.plugin.redditapi.linksandcomments.SubmitRequest";
                encode(message: SubmitRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): SubmitRequest;
                fromJSON(object: any): SubmitRequest;
                toJSON(message: SubmitRequest): unknown;
                create(base?: {
                    collectionId?: string | undefined | undefined;
                    flairId?: string | undefined | undefined;
                    flairText?: string | undefined | undefined;
                    kind?: string;
                    nsfw?: boolean | undefined | undefined;
                    richtextJson?: string | undefined | undefined;
                    sendreplies?: boolean | undefined | undefined;
                    spoiler?: boolean | undefined | undefined;
                    sr?: string;
                    text?: string | undefined | undefined;
                    title?: string;
                    url?: string | undefined | undefined;
                    videoPosterUrl?: string | undefined | undefined;
                    crosspostFullname?: string | undefined | undefined;
                    richtextFallback?: string | undefined | undefined;
                    imageUrls?: any[] | undefined;
                    runAs?: import("../redditapi/common/common_msg.js").RunAs;
                    userGeneratedContent?: {
                        text?: string;
                        imageUrls?: string[];
                    } | undefined;
                    postData?: {
                        splash?: {
                            appDisplayName?: string | undefined | undefined;
                            appIconUri?: string | undefined | undefined;
                            backgroundUri?: string | undefined | undefined;
                            buttonLabel?: string | undefined | undefined;
                            description?: string | undefined | undefined;
                            entry?: string | undefined | undefined;
                            title?: string | undefined | undefined;
                        } | undefined;
                        developerData?: {
                            [x: string]: any;
                        } | undefined;
                    } | undefined;
                }): SubmitRequest;
                fromPartial(object: {
                    collectionId?: string | undefined | undefined;
                    flairId?: string | undefined | undefined;
                    flairText?: string | undefined | undefined;
                    kind?: string;
                    nsfw?: boolean | undefined | undefined;
                    richtextJson?: string | undefined | undefined;
                    sendreplies?: boolean | undefined | undefined;
                    spoiler?: boolean | undefined | undefined;
                    sr?: string;
                    text?: string | undefined | undefined;
                    title?: string;
                    url?: string | undefined | undefined;
                    videoPosterUrl?: string | undefined | undefined;
                    crosspostFullname?: string | undefined | undefined;
                    richtextFallback?: string | undefined | undefined;
                    imageUrls?: any[] | undefined;
                    runAs?: import("../redditapi/common/common_msg.js").RunAs;
                    userGeneratedContent?: {
                        text?: string;
                        imageUrls?: string[];
                    } | undefined;
                    postData?: {
                        splash?: {
                            appDisplayName?: string | undefined | undefined;
                            appIconUri?: string | undefined | undefined;
                            backgroundUri?: string | undefined | undefined;
                            buttonLabel?: string | undefined | undefined;
                            description?: string | undefined | undefined;
                            entry?: string | undefined | undefined;
                            title?: string | undefined | undefined;
                        } | undefined;
                        developerData?: {
                            [x: string]: any;
                        } | undefined;
                    } | undefined;
                }): SubmitRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.plugin.redditapi.linksandcomments.SubmitResponse";
                encode(message: SubmitResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): SubmitResponse;
                fromJSON(object: any): SubmitResponse;
                toJSON(message: SubmitResponse): unknown;
                create(base?: {
                    json?: {
                        errors?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        }[];
                        data?: {
                            url?: string | undefined | undefined;
                            draftsCount?: number | undefined | undefined;
                            id?: string | undefined | undefined;
                            name?: string | undefined | undefined;
                        } | undefined;
                    } | undefined;
                }): SubmitResponse;
                fromPartial(object: {
                    json?: {
                        errors?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        }[];
                        data?: {
                            url?: string | undefined | undefined;
                            draftsCount?: number | undefined | undefined;
                            id?: string | undefined | undefined;
                            name?: string | undefined | undefined;
                        } | undefined;
                    } | undefined;
                }): SubmitResponse;
            };
            readonly responseStream: false;
            readonly options: {};
        };
    };
};
interface Rpc {
    request(service: string, method: string, data: Uint8Array, metadata?: Metadata): Promise<Uint8Array>;
}
export {};
//# sourceMappingURL=useractions.d.ts.map