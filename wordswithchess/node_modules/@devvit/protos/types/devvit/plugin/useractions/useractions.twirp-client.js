import { CommentRequest, JsonWrappedComment, SubmitRequest, SubmitResponse, } from '../redditapi/linksandcomments/linksandcomments_msg.js';
export class UserActionsClientJSON {
    constructor(rpc) {
        this.rpc = rpc;
        this.Comment.bind(this);
        this.Submit.bind(this);
        this.SubmitCustomPost.bind(this);
    }
    Comment(request) {
        const data = CommentRequest.toJSON(request);
        const promise = this.rpc.request('devvit.plugin.useractions.UserActions', 'Comment', 'application/json', data);
        return promise.then((data) => JsonWrappedComment.fromJSON(data));
    }
    Submit(request) {
        const data = SubmitRequest.toJSON(request);
        const promise = this.rpc.request('devvit.plugin.useractions.UserActions', 'Submit', 'application/json', data);
        return promise.then((data) => SubmitResponse.fromJSON(data));
    }
    SubmitCustomPost(request) {
        const data = SubmitRequest.toJSON(request);
        const promise = this.rpc.request('devvit.plugin.useractions.UserActions', 'SubmitCustomPost', 'application/json', data);
        return promise.then((data) => SubmitResponse.fromJSON(data));
    }
}
export class UserActionsClientProtobuf {
    constructor(rpc) {
        this.rpc = rpc;
        this.Comment.bind(this);
        this.Submit.bind(this);
        this.SubmitCustomPost.bind(this);
    }
    Comment(request) {
        const data = CommentRequest.encode(request).finish();
        const promise = this.rpc.request('devvit.plugin.useractions.UserActions', 'Comment', 'application/protobuf', data);
        return promise.then((data) => JsonWrappedComment.decode(data));
    }
    Submit(request) {
        const data = SubmitRequest.encode(request).finish();
        const promise = this.rpc.request('devvit.plugin.useractions.UserActions', 'Submit', 'application/protobuf', data);
        return promise.then((data) => SubmitResponse.decode(data));
    }
    SubmitCustomPost(request) {
        const data = SubmitRequest.encode(request).finish();
        const promise = this.rpc.request('devvit.plugin.useractions.UserActions', 'SubmitCustomPost', 'application/protobuf', data);
        return promise.then((data) => SubmitResponse.decode(data));
    }
}
