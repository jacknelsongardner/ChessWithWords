/**
 * #inspector.ts
 *
 * Code generated by ts-proto. DO NOT EDIT.
 * @packageDocumentation
 */
/* eslint-disable */
import _m0 from "protobufjs/minimal.js";
import { messageTypeRegistry } from "../../../typeRegistry.js";
import { SerializableServiceDefinition } from "../../runtime/serializable.js";
function createBaseInspectorDescription() {
    return { provides: [], hostname: "" };
}
export const InspectorDescription = {
    $type: "devvit.plugin.inspector.InspectorDescription",
    encode(message, writer = _m0.Writer.create()) {
        for (const v of message.provides) {
            SerializableServiceDefinition.encode(v, writer.uint32(10).fork()).ldelim();
        }
        if (message.hostname !== "") {
            writer.uint32(18).string(message.hostname);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseInspectorDescription();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.provides.push(SerializableServiceDefinition.decode(reader, reader.uint32()));
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.hostname = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            provides: globalThis.Array.isArray(object?.provides)
                ? object.provides.map((e) => SerializableServiceDefinition.fromJSON(e))
                : [],
            hostname: isSet(object.hostname) ? globalThis.String(object.hostname) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.provides?.length) {
            obj.provides = message.provides.map((e) => SerializableServiceDefinition.toJSON(e));
        }
        if (message.hostname !== "") {
            obj.hostname = message.hostname;
        }
        return obj;
    },
    create(base) {
        return InspectorDescription.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseInspectorDescription();
        message.provides = object.provides?.map((e) => SerializableServiceDefinition.fromPartial(e)) || [];
        message.hostname = object.hostname ?? "";
        return message;
    },
};
messageTypeRegistry.set(InspectorDescription.$type, InspectorDescription);
function createBaseInspectorDescriptions() {
    return { descriptions: [] };
}
export const InspectorDescriptions = {
    $type: "devvit.plugin.inspector.InspectorDescriptions",
    encode(message, writer = _m0.Writer.create()) {
        for (const v of message.descriptions) {
            InspectorDescription.encode(v, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseInspectorDescriptions();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.descriptions.push(InspectorDescription.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            descriptions: globalThis.Array.isArray(object?.descriptions)
                ? object.descriptions.map((e) => InspectorDescription.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.descriptions?.length) {
            obj.descriptions = message.descriptions.map((e) => InspectorDescription.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return InspectorDescriptions.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseInspectorDescriptions();
        message.descriptions = object.descriptions?.map((e) => InspectorDescription.fromPartial(e)) || [];
        return message;
    },
};
messageTypeRegistry.set(InspectorDescriptions.$type, InspectorDescriptions);
function isSet(value) {
    return value !== null && value !== undefined;
}
