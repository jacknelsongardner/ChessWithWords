/**
 * #privatemessages_svc.ts
 *
 * Code generated by ts-proto. DO NOT EDIT.
 * @packageDocumentation
 */
import _m0 from "protobufjs/minimal.js";
import { Metadata } from "../../../../../lib/Types.js";
import { Empty } from "../../../../google/protobuf/empty.js";
import { Listing } from "../common/common_msg.js";
import { ComposeRequest, GenericPrivateMessagesRequest, MessageWhereRequest, ReadAllMessagesRequest } from "./privatemessages_msg.js";
/**
 * PRIVATE MESSAGES - https://www.reddit.com/dev/api#section_messages
 * Note: all endpoints require oauth
 */
export interface PrivateMessages {
    /** https://www.reddit.com/dev/api#POST_api_block */
    Block(request: GenericPrivateMessagesRequest, metadata?: Metadata): Promise<Empty>;
    /** https://www.reddit.com/dev/api#POST_api_collapse_message */
    CollapseMessage(request: GenericPrivateMessagesRequest, metadata?: Metadata): Promise<Empty>;
    /** https://www.reddit.com/dev/api#POST_api_compose */
    Compose(request: ComposeRequest, metadata?: Metadata): Promise<Empty>;
    /** https://www.reddit.com/dev/api#POST_api_del_msg */
    DelMsg(request: GenericPrivateMessagesRequest, metadata?: Metadata): Promise<Empty>;
    /** https://www.reddit.com/dev/api#POST_api_read_all_messages */
    ReadAllMessages(request: ReadAllMessagesRequest, metadata?: Metadata): Promise<Empty>;
    /** https://www.reddit.com/dev/api#POST_api_read_message */
    ReadMessage(request: GenericPrivateMessagesRequest, metadata?: Metadata): Promise<Empty>;
    /** https://www.reddit.com/dev/api#POST_api_unblock_subreddit */
    UnblockSubreddit(request: GenericPrivateMessagesRequest, metadata?: Metadata): Promise<Empty>;
    /** https://www.reddit.com/dev/api#POST_api_uncollapse_message */
    UncollapseMessage(request: GenericPrivateMessagesRequest, metadata?: Metadata): Promise<Empty>;
    /** https://www.reddit.com/dev/api#POST_api_unread_message */
    UnreadMessage(request: GenericPrivateMessagesRequest, metadata?: Metadata): Promise<Empty>;
    /** https://www.reddit.com/dev/api#GET_message_where */
    MessageWhere(request: MessageWhereRequest, metadata?: Metadata): Promise<Listing>;
}
export declare const PrivateMessagesServiceName = "devvit.plugin.redditapi.privatemessages.PrivateMessages";
export declare class PrivateMessagesClientImpl implements PrivateMessages {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    Block(request: GenericPrivateMessagesRequest, metadata?: Metadata): Promise<Empty>;
    CollapseMessage(request: GenericPrivateMessagesRequest, metadata?: Metadata): Promise<Empty>;
    Compose(request: ComposeRequest, metadata?: Metadata): Promise<Empty>;
    DelMsg(request: GenericPrivateMessagesRequest, metadata?: Metadata): Promise<Empty>;
    ReadAllMessages(request: ReadAllMessagesRequest, metadata?: Metadata): Promise<Empty>;
    ReadMessage(request: GenericPrivateMessagesRequest, metadata?: Metadata): Promise<Empty>;
    UnblockSubreddit(request: GenericPrivateMessagesRequest, metadata?: Metadata): Promise<Empty>;
    UncollapseMessage(request: GenericPrivateMessagesRequest, metadata?: Metadata): Promise<Empty>;
    UnreadMessage(request: GenericPrivateMessagesRequest, metadata?: Metadata): Promise<Empty>;
    MessageWhere(request: MessageWhereRequest, metadata?: Metadata): Promise<Listing>;
}
/**
 * PRIVATE MESSAGES - https://www.reddit.com/dev/api#section_messages
 * Note: all endpoints require oauth
 */
export type PrivateMessagesDefinition = typeof PrivateMessagesDefinition;
export declare const PrivateMessagesDefinition: {
    readonly name: "PrivateMessages";
    readonly fullName: "devvit.plugin.redditapi.privatemessages.PrivateMessages";
    readonly methods: {
        /** https://www.reddit.com/dev/api#POST_api_block */
        readonly block: {
            readonly name: "Block";
            readonly requestType: {
                $type: "devvit.plugin.redditapi.privatemessages.GenericPrivateMessagesRequest";
                encode(message: GenericPrivateMessagesRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): GenericPrivateMessagesRequest;
                fromJSON(object: any): GenericPrivateMessagesRequest;
                toJSON(message: GenericPrivateMessagesRequest): unknown;
                create(base?: {
                    id?: string;
                }): GenericPrivateMessagesRequest;
                fromPartial(object: {
                    id?: string;
                }): GenericPrivateMessagesRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "google.protobuf.Empty";
                encode(_: Empty, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): Empty;
                fromJSON(_: any): Empty;
                toJSON(_: Empty): unknown;
                create(base?: {}): Empty;
                fromPartial(_: {}): Empty;
            };
            readonly responseStream: false;
            readonly options: {
                readonly _unknownFields: {
                    readonly 480010: readonly [Uint8Array<ArrayBuffer>, Uint8Array<ArrayBuffer>, Uint8Array<ArrayBuffer>];
                };
            };
        };
        /** https://www.reddit.com/dev/api#POST_api_collapse_message */
        readonly collapseMessage: {
            readonly name: "CollapseMessage";
            readonly requestType: {
                $type: "devvit.plugin.redditapi.privatemessages.GenericPrivateMessagesRequest";
                encode(message: GenericPrivateMessagesRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): GenericPrivateMessagesRequest;
                fromJSON(object: any): GenericPrivateMessagesRequest;
                toJSON(message: GenericPrivateMessagesRequest): unknown;
                create(base?: {
                    id?: string;
                }): GenericPrivateMessagesRequest;
                fromPartial(object: {
                    id?: string;
                }): GenericPrivateMessagesRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "google.protobuf.Empty";
                encode(_: Empty, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): Empty;
                fromJSON(_: any): Empty;
                toJSON(_: Empty): unknown;
                create(base?: {}): Empty;
                fromPartial(_: {}): Empty;
            };
            readonly responseStream: false;
            readonly options: {
                readonly _unknownFields: {
                    readonly 480010: readonly [Uint8Array<ArrayBuffer>, Uint8Array<ArrayBuffer>, Uint8Array<ArrayBuffer>];
                };
            };
        };
        /** https://www.reddit.com/dev/api#POST_api_compose */
        readonly compose: {
            readonly name: "Compose";
            readonly requestType: {
                $type: "devvit.plugin.redditapi.privatemessages.ComposeRequest";
                encode(message: ComposeRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): ComposeRequest;
                fromJSON(object: any): ComposeRequest;
                toJSON(message: ComposeRequest): unknown;
                create(base?: {
                    to?: string;
                    subject?: string;
                    text?: string;
                    fromSr?: string;
                }): ComposeRequest;
                fromPartial(object: {
                    to?: string;
                    subject?: string;
                    text?: string;
                    fromSr?: string;
                }): ComposeRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "google.protobuf.Empty";
                encode(_: Empty, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): Empty;
                fromJSON(_: any): Empty;
                toJSON(_: Empty): unknown;
                create(base?: {}): Empty;
                fromPartial(_: {}): Empty;
            };
            readonly responseStream: false;
            readonly options: {
                readonly _unknownFields: {
                    readonly 480010: readonly [Uint8Array<ArrayBuffer>, Uint8Array<ArrayBuffer>, Uint8Array<ArrayBuffer>, Uint8Array<ArrayBuffer>];
                };
            };
        };
        /** https://www.reddit.com/dev/api#POST_api_del_msg */
        readonly delMsg: {
            readonly name: "DelMsg";
            readonly requestType: {
                $type: "devvit.plugin.redditapi.privatemessages.GenericPrivateMessagesRequest";
                encode(message: GenericPrivateMessagesRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): GenericPrivateMessagesRequest;
                fromJSON(object: any): GenericPrivateMessagesRequest;
                toJSON(message: GenericPrivateMessagesRequest): unknown;
                create(base?: {
                    id?: string;
                }): GenericPrivateMessagesRequest;
                fromPartial(object: {
                    id?: string;
                }): GenericPrivateMessagesRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "google.protobuf.Empty";
                encode(_: Empty, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): Empty;
                fromJSON(_: any): Empty;
                toJSON(_: Empty): unknown;
                create(base?: {}): Empty;
                fromPartial(_: {}): Empty;
            };
            readonly responseStream: false;
            readonly options: {
                readonly _unknownFields: {
                    readonly 480010: readonly [Uint8Array<ArrayBuffer>, Uint8Array<ArrayBuffer>, Uint8Array<ArrayBuffer>];
                };
            };
        };
        /** https://www.reddit.com/dev/api#POST_api_read_all_messages */
        readonly readAllMessages: {
            readonly name: "ReadAllMessages";
            readonly requestType: {
                $type: "devvit.plugin.redditapi.privatemessages.ReadAllMessagesRequest";
                encode(message: ReadAllMessagesRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): ReadAllMessagesRequest;
                fromJSON(object: any): ReadAllMessagesRequest;
                toJSON(message: ReadAllMessagesRequest): unknown;
                create(base?: {
                    filterTypes?: string;
                }): ReadAllMessagesRequest;
                fromPartial(object: {
                    filterTypes?: string;
                }): ReadAllMessagesRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "google.protobuf.Empty";
                encode(_: Empty, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): Empty;
                fromJSON(_: any): Empty;
                toJSON(_: Empty): unknown;
                create(base?: {}): Empty;
                fromPartial(_: {}): Empty;
            };
            readonly responseStream: false;
            readonly options: {
                readonly _unknownFields: {
                    readonly 480010: readonly [Uint8Array<ArrayBuffer>, Uint8Array<ArrayBuffer>, Uint8Array<ArrayBuffer>];
                };
            };
        };
        /** https://www.reddit.com/dev/api#POST_api_read_message */
        readonly readMessage: {
            readonly name: "ReadMessage";
            readonly requestType: {
                $type: "devvit.plugin.redditapi.privatemessages.GenericPrivateMessagesRequest";
                encode(message: GenericPrivateMessagesRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): GenericPrivateMessagesRequest;
                fromJSON(object: any): GenericPrivateMessagesRequest;
                toJSON(message: GenericPrivateMessagesRequest): unknown;
                create(base?: {
                    id?: string;
                }): GenericPrivateMessagesRequest;
                fromPartial(object: {
                    id?: string;
                }): GenericPrivateMessagesRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "google.protobuf.Empty";
                encode(_: Empty, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): Empty;
                fromJSON(_: any): Empty;
                toJSON(_: Empty): unknown;
                create(base?: {}): Empty;
                fromPartial(_: {}): Empty;
            };
            readonly responseStream: false;
            readonly options: {
                readonly _unknownFields: {
                    readonly 480010: readonly [Uint8Array<ArrayBuffer>, Uint8Array<ArrayBuffer>, Uint8Array<ArrayBuffer>];
                };
            };
        };
        /** https://www.reddit.com/dev/api#POST_api_unblock_subreddit */
        readonly unblockSubreddit: {
            readonly name: "UnblockSubreddit";
            readonly requestType: {
                $type: "devvit.plugin.redditapi.privatemessages.GenericPrivateMessagesRequest";
                encode(message: GenericPrivateMessagesRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): GenericPrivateMessagesRequest;
                fromJSON(object: any): GenericPrivateMessagesRequest;
                toJSON(message: GenericPrivateMessagesRequest): unknown;
                create(base?: {
                    id?: string;
                }): GenericPrivateMessagesRequest;
                fromPartial(object: {
                    id?: string;
                }): GenericPrivateMessagesRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "google.protobuf.Empty";
                encode(_: Empty, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): Empty;
                fromJSON(_: any): Empty;
                toJSON(_: Empty): unknown;
                create(base?: {}): Empty;
                fromPartial(_: {}): Empty;
            };
            readonly responseStream: false;
            readonly options: {
                readonly _unknownFields: {
                    readonly 480010: readonly [Uint8Array<ArrayBuffer>, Uint8Array<ArrayBuffer>, Uint8Array<ArrayBuffer>];
                };
            };
        };
        /** https://www.reddit.com/dev/api#POST_api_uncollapse_message */
        readonly uncollapseMessage: {
            readonly name: "UncollapseMessage";
            readonly requestType: {
                $type: "devvit.plugin.redditapi.privatemessages.GenericPrivateMessagesRequest";
                encode(message: GenericPrivateMessagesRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): GenericPrivateMessagesRequest;
                fromJSON(object: any): GenericPrivateMessagesRequest;
                toJSON(message: GenericPrivateMessagesRequest): unknown;
                create(base?: {
                    id?: string;
                }): GenericPrivateMessagesRequest;
                fromPartial(object: {
                    id?: string;
                }): GenericPrivateMessagesRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "google.protobuf.Empty";
                encode(_: Empty, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): Empty;
                fromJSON(_: any): Empty;
                toJSON(_: Empty): unknown;
                create(base?: {}): Empty;
                fromPartial(_: {}): Empty;
            };
            readonly responseStream: false;
            readonly options: {
                readonly _unknownFields: {
                    readonly 480010: readonly [Uint8Array<ArrayBuffer>, Uint8Array<ArrayBuffer>, Uint8Array<ArrayBuffer>];
                };
            };
        };
        /** https://www.reddit.com/dev/api#POST_api_unread_message */
        readonly unreadMessage: {
            readonly name: "UnreadMessage";
            readonly requestType: {
                $type: "devvit.plugin.redditapi.privatemessages.GenericPrivateMessagesRequest";
                encode(message: GenericPrivateMessagesRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): GenericPrivateMessagesRequest;
                fromJSON(object: any): GenericPrivateMessagesRequest;
                toJSON(message: GenericPrivateMessagesRequest): unknown;
                create(base?: {
                    id?: string;
                }): GenericPrivateMessagesRequest;
                fromPartial(object: {
                    id?: string;
                }): GenericPrivateMessagesRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "google.protobuf.Empty";
                encode(_: Empty, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): Empty;
                fromJSON(_: any): Empty;
                toJSON(_: Empty): unknown;
                create(base?: {}): Empty;
                fromPartial(_: {}): Empty;
            };
            readonly responseStream: false;
            readonly options: {
                readonly _unknownFields: {
                    readonly 480010: readonly [Uint8Array<ArrayBuffer>, Uint8Array<ArrayBuffer>, Uint8Array<ArrayBuffer>];
                };
            };
        };
        /** https://www.reddit.com/dev/api#GET_message_where */
        readonly messageWhere: {
            readonly name: "MessageWhere";
            readonly requestType: {
                $type: "devvit.plugin.redditapi.privatemessages.MessageWhereRequest";
                encode(message: MessageWhereRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): MessageWhereRequest;
                fromJSON(object: any): MessageWhereRequest;
                toJSON(message: MessageWhereRequest): unknown;
                create(base?: {
                    where?: string;
                    mark?: boolean | undefined | undefined;
                    mid?: string | undefined | undefined;
                    after?: string | undefined | undefined;
                    before?: string | undefined | undefined;
                    count?: number | undefined | undefined;
                    limit?: number | undefined | undefined;
                    show?: string | undefined | undefined;
                }): MessageWhereRequest;
                fromPartial(object: {
                    where?: string;
                    mark?: boolean | undefined | undefined;
                    mid?: string | undefined | undefined;
                    after?: string | undefined | undefined;
                    before?: string | undefined | undefined;
                    count?: number | undefined | undefined;
                    limit?: number | undefined | undefined;
                    show?: string | undefined | undefined;
                }): MessageWhereRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.plugin.redditapi.common.Listing";
                encode(message: Listing, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): Listing;
                fromJSON(object: any): Listing;
                toJSON(message: Listing): unknown;
                create(base?: {
                    kind?: string;
                    data?: {
                        after?: string | undefined | undefined;
                        before?: string | undefined | undefined;
                        children?: {
                            kind?: string;
                            data?: {
                                allAwardings?: {
                                    typeUrl?: string;
                                    value?: Uint8Array;
                                }[];
                                approved?: boolean | undefined | undefined;
                                approvedAtUtc?: number | undefined | undefined;
                                approvedBy?: string | undefined | undefined;
                                archived?: boolean | undefined | undefined;
                                associatedAward?: string | undefined | undefined;
                                author?: string | undefined | undefined;
                                authorFlairBackgroundColor?: string | undefined | undefined;
                                authorFlairCssClass?: string | undefined | undefined;
                                authorFlairRichtext?: {
                                    e?: string | undefined | undefined;
                                    t?: string | undefined | undefined;
                                    a?: string | undefined | undefined;
                                    u?: string | undefined | undefined;
                                }[];
                                authorFlairTemplateId?: string | undefined | undefined;
                                authorFlairText?: string | undefined | undefined;
                                authorFlairTextColor?: string | undefined | undefined;
                                authorFlairType?: string | undefined | undefined;
                                authorFullname?: string | undefined | undefined;
                                authorIsBlocked?: boolean | undefined | undefined;
                                authorPatreonFlair?: boolean | undefined | undefined;
                                authorPremium?: boolean | undefined | undefined;
                                awarders?: string[];
                                bannedAtUtc?: number | undefined | undefined;
                                bannedBy?: string | undefined | undefined;
                                body?: string | undefined | undefined;
                                bodyHtml?: string | undefined | undefined;
                                canGild?: boolean | undefined | undefined;
                                canModPost?: boolean | undefined | undefined;
                                collapsed?: boolean | undefined | undefined;
                                collapsedBecauseCrowdControl?: boolean | undefined | undefined;
                                collapsedReason?: string | undefined | undefined;
                                collapsedReasonCode?: string | undefined | undefined;
                                commentType?: string | undefined | undefined;
                                controversiality?: number | undefined | undefined;
                                created?: number | undefined | undefined;
                                createdUtc?: number | undefined | undefined;
                                distinguished?: string | undefined | undefined;
                                downs?: number | undefined | undefined;
                                edited?: boolean | undefined | undefined;
                                gilded?: number | undefined | undefined;
                                gildings?: {
                                    typeUrl?: string;
                                    value?: Uint8Array;
                                } | undefined;
                                id?: string | undefined | undefined;
                                ignoreReports?: boolean | undefined | undefined;
                                isSubmitter?: boolean | undefined | undefined;
                                likes?: boolean | undefined | undefined;
                                linkId?: string | undefined | undefined;
                                locked?: boolean | undefined | undefined;
                                modNote?: string | undefined | undefined;
                                modReasonBy?: string | undefined | undefined;
                                modReasonTitle?: string | undefined | undefined;
                                name?: string | undefined | undefined;
                                noFollow?: boolean | undefined | undefined;
                                numReports?: number | undefined | undefined;
                                parentId?: string | undefined | undefined;
                                permalink?: string | undefined | undefined;
                                removalReason?: string | undefined | undefined;
                                removed?: boolean | undefined | undefined;
                                replies?: string | undefined | undefined;
                                reportReasons?: any[] | undefined;
                                rteMode?: string | undefined | undefined;
                                saved?: boolean | undefined | undefined;
                                score?: number | undefined | undefined;
                                scoreHidden?: boolean | undefined | undefined;
                                sendReplies?: boolean | undefined | undefined;
                                spam?: boolean | undefined | undefined;
                                stickied?: boolean | undefined | undefined;
                                subreddit?: string | undefined | undefined;
                                subredditId?: string | undefined | undefined;
                                subredditNamePrefixed?: string | undefined | undefined;
                                subredditType?: string | undefined | undefined;
                                topAwardedType?: string | undefined | undefined;
                                totalAwardsReceived?: number | undefined | undefined;
                                treatmentTags?: {
                                    typeUrl?: string;
                                    value?: Uint8Array;
                                }[];
                                unrepliableReason?: string | undefined | undefined;
                                ups?: number | undefined | undefined;
                                depth?: number | undefined | undefined;
                                linkTitle?: string | undefined | undefined;
                                linkAuthor?: string | undefined | undefined;
                                numComments?: number | undefined | undefined;
                                over18?: boolean | undefined | undefined;
                                linkPermalink?: string | undefined | undefined;
                                quarantine?: boolean | undefined | undefined;
                                linkUrl?: string | undefined | undefined;
                                selftext?: string | undefined | undefined;
                                selftextHtml?: string | undefined | undefined;
                                thumbnail?: string | undefined | undefined;
                                thumbnailWidth?: number | undefined | undefined;
                                thumbnailHeight?: number | undefined | undefined;
                                title?: string | undefined | undefined;
                                url?: string | undefined | undefined;
                                displayName?: string | undefined | undefined;
                                modPermissions?: string[];
                                count?: number | undefined | undefined;
                                children?: any[] | undefined;
                                replyList?: /*elided*/ any | undefined;
                                hidden?: boolean | undefined | undefined;
                                linkFlairBackgroundColor?: string | undefined | undefined;
                                linkFlairCssClass?: string | undefined | undefined;
                                linkFlairRichtext?: {
                                    e?: string | undefined | undefined;
                                    t?: string | undefined | undefined;
                                    a?: string | undefined | undefined;
                                    u?: string | undefined | undefined;
                                }[];
                                linkFlairTemplateId?: string | undefined | undefined;
                                linkFlairText?: string | undefined | undefined;
                                linkFlairTextColor?: string | undefined | undefined;
                                linkFlairType?: string | undefined | undefined;
                                secureMedia?: {
                                    type?: string;
                                    oembed?: {
                                        type?: string;
                                        title?: string | undefined | undefined;
                                        providerName?: string | undefined | undefined;
                                        providerUrl?: string | undefined | undefined;
                                        version?: string;
                                        thumbnailWidth?: number | undefined | undefined;
                                        thumbnailHeight?: number | undefined | undefined;
                                        thumbnailUrl?: string | undefined | undefined;
                                        html?: string;
                                        height?: number | undefined | undefined;
                                        width?: number | undefined | undefined;
                                        authorUrl?: string | undefined | undefined;
                                        authorName?: string | undefined | undefined;
                                    } | undefined;
                                    redditVideo?: {
                                        bitrateKbps?: number | undefined | undefined;
                                        dashUrl?: string | undefined | undefined;
                                        duration?: number | undefined | undefined;
                                        fallbackUrl?: string | undefined | undefined;
                                        height?: number | undefined | undefined;
                                        hlsUrl?: string | undefined | undefined;
                                        isGif?: boolean | undefined | undefined;
                                        scrubberMediaUrl?: string | undefined | undefined;
                                        transcodingStatus?: string | undefined | undefined;
                                        width?: number | undefined | undefined;
                                    } | undefined;
                                } | undefined;
                                spoiler?: boolean;
                                modReports?: any[][];
                                userReports?: any[][];
                                removedBy?: string | undefined | undefined;
                                removedByCategory?: string | undefined | undefined;
                                gallery?: {
                                    url?: string;
                                    width?: number;
                                    height?: number;
                                    status?: import("../common/common_msg.js").GalleryMediaStatus;
                                }[];
                            } | undefined;
                        }[];
                        dist?: number | undefined | undefined;
                    } | undefined;
                }): Listing;
                fromPartial(object: {
                    kind?: string;
                    data?: {
                        after?: string | undefined | undefined;
                        before?: string | undefined | undefined;
                        children?: {
                            kind?: string;
                            data?: {
                                allAwardings?: {
                                    typeUrl?: string;
                                    value?: Uint8Array;
                                }[];
                                approved?: boolean | undefined | undefined;
                                approvedAtUtc?: number | undefined | undefined;
                                approvedBy?: string | undefined | undefined;
                                archived?: boolean | undefined | undefined;
                                associatedAward?: string | undefined | undefined;
                                author?: string | undefined | undefined;
                                authorFlairBackgroundColor?: string | undefined | undefined;
                                authorFlairCssClass?: string | undefined | undefined;
                                authorFlairRichtext?: {
                                    e?: string | undefined | undefined;
                                    t?: string | undefined | undefined;
                                    a?: string | undefined | undefined;
                                    u?: string | undefined | undefined;
                                }[];
                                authorFlairTemplateId?: string | undefined | undefined;
                                authorFlairText?: string | undefined | undefined;
                                authorFlairTextColor?: string | undefined | undefined;
                                authorFlairType?: string | undefined | undefined;
                                authorFullname?: string | undefined | undefined;
                                authorIsBlocked?: boolean | undefined | undefined;
                                authorPatreonFlair?: boolean | undefined | undefined;
                                authorPremium?: boolean | undefined | undefined;
                                awarders?: string[];
                                bannedAtUtc?: number | undefined | undefined;
                                bannedBy?: string | undefined | undefined;
                                body?: string | undefined | undefined;
                                bodyHtml?: string | undefined | undefined;
                                canGild?: boolean | undefined | undefined;
                                canModPost?: boolean | undefined | undefined;
                                collapsed?: boolean | undefined | undefined;
                                collapsedBecauseCrowdControl?: boolean | undefined | undefined;
                                collapsedReason?: string | undefined | undefined;
                                collapsedReasonCode?: string | undefined | undefined;
                                commentType?: string | undefined | undefined;
                                controversiality?: number | undefined | undefined;
                                created?: number | undefined | undefined;
                                createdUtc?: number | undefined | undefined;
                                distinguished?: string | undefined | undefined;
                                downs?: number | undefined | undefined;
                                edited?: boolean | undefined | undefined;
                                gilded?: number | undefined | undefined;
                                gildings?: {
                                    typeUrl?: string;
                                    value?: Uint8Array;
                                } | undefined;
                                id?: string | undefined | undefined;
                                ignoreReports?: boolean | undefined | undefined;
                                isSubmitter?: boolean | undefined | undefined;
                                likes?: boolean | undefined | undefined;
                                linkId?: string | undefined | undefined;
                                locked?: boolean | undefined | undefined;
                                modNote?: string | undefined | undefined;
                                modReasonBy?: string | undefined | undefined;
                                modReasonTitle?: string | undefined | undefined;
                                name?: string | undefined | undefined;
                                noFollow?: boolean | undefined | undefined;
                                numReports?: number | undefined | undefined;
                                parentId?: string | undefined | undefined;
                                permalink?: string | undefined | undefined;
                                removalReason?: string | undefined | undefined;
                                removed?: boolean | undefined | undefined;
                                replies?: string | undefined | undefined;
                                reportReasons?: any[] | undefined;
                                rteMode?: string | undefined | undefined;
                                saved?: boolean | undefined | undefined;
                                score?: number | undefined | undefined;
                                scoreHidden?: boolean | undefined | undefined;
                                sendReplies?: boolean | undefined | undefined;
                                spam?: boolean | undefined | undefined;
                                stickied?: boolean | undefined | undefined;
                                subreddit?: string | undefined | undefined;
                                subredditId?: string | undefined | undefined;
                                subredditNamePrefixed?: string | undefined | undefined;
                                subredditType?: string | undefined | undefined;
                                topAwardedType?: string | undefined | undefined;
                                totalAwardsReceived?: number | undefined | undefined;
                                treatmentTags?: {
                                    typeUrl?: string;
                                    value?: Uint8Array;
                                }[];
                                unrepliableReason?: string | undefined | undefined;
                                ups?: number | undefined | undefined;
                                depth?: number | undefined | undefined;
                                linkTitle?: string | undefined | undefined;
                                linkAuthor?: string | undefined | undefined;
                                numComments?: number | undefined | undefined;
                                over18?: boolean | undefined | undefined;
                                linkPermalink?: string | undefined | undefined;
                                quarantine?: boolean | undefined | undefined;
                                linkUrl?: string | undefined | undefined;
                                selftext?: string | undefined | undefined;
                                selftextHtml?: string | undefined | undefined;
                                thumbnail?: string | undefined | undefined;
                                thumbnailWidth?: number | undefined | undefined;
                                thumbnailHeight?: number | undefined | undefined;
                                title?: string | undefined | undefined;
                                url?: string | undefined | undefined;
                                displayName?: string | undefined | undefined;
                                modPermissions?: string[];
                                count?: number | undefined | undefined;
                                children?: any[] | undefined;
                                replyList?: /*elided*/ any | undefined;
                                hidden?: boolean | undefined | undefined;
                                linkFlairBackgroundColor?: string | undefined | undefined;
                                linkFlairCssClass?: string | undefined | undefined;
                                linkFlairRichtext?: {
                                    e?: string | undefined | undefined;
                                    t?: string | undefined | undefined;
                                    a?: string | undefined | undefined;
                                    u?: string | undefined | undefined;
                                }[];
                                linkFlairTemplateId?: string | undefined | undefined;
                                linkFlairText?: string | undefined | undefined;
                                linkFlairTextColor?: string | undefined | undefined;
                                linkFlairType?: string | undefined | undefined;
                                secureMedia?: {
                                    type?: string;
                                    oembed?: {
                                        type?: string;
                                        title?: string | undefined | undefined;
                                        providerName?: string | undefined | undefined;
                                        providerUrl?: string | undefined | undefined;
                                        version?: string;
                                        thumbnailWidth?: number | undefined | undefined;
                                        thumbnailHeight?: number | undefined | undefined;
                                        thumbnailUrl?: string | undefined | undefined;
                                        html?: string;
                                        height?: number | undefined | undefined;
                                        width?: number | undefined | undefined;
                                        authorUrl?: string | undefined | undefined;
                                        authorName?: string | undefined | undefined;
                                    } | undefined;
                                    redditVideo?: {
                                        bitrateKbps?: number | undefined | undefined;
                                        dashUrl?: string | undefined | undefined;
                                        duration?: number | undefined | undefined;
                                        fallbackUrl?: string | undefined | undefined;
                                        height?: number | undefined | undefined;
                                        hlsUrl?: string | undefined | undefined;
                                        isGif?: boolean | undefined | undefined;
                                        scrubberMediaUrl?: string | undefined | undefined;
                                        transcodingStatus?: string | undefined | undefined;
                                        width?: number | undefined | undefined;
                                    } | undefined;
                                } | undefined;
                                spoiler?: boolean;
                                modReports?: any[][];
                                userReports?: any[][];
                                removedBy?: string | undefined | undefined;
                                removedByCategory?: string | undefined | undefined;
                                gallery?: {
                                    url?: string;
                                    width?: number;
                                    height?: number;
                                    status?: import("../common/common_msg.js").GalleryMediaStatus;
                                }[];
                            } | undefined;
                        }[];
                        dist?: number | undefined | undefined;
                    } | undefined;
                }): Listing;
            };
            readonly responseStream: false;
            readonly options: {
                readonly _unknownFields: {
                    readonly 480010: readonly [Uint8Array<ArrayBuffer>, Uint8Array<ArrayBuffer>];
                };
            };
        };
    };
};
interface Rpc {
    request(service: string, method: string, data: Uint8Array, metadata?: Metadata): Promise<Uint8Array>;
}
export {};
//# sourceMappingURL=privatemessages_svc.d.ts.map