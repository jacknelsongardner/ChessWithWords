/**
 * #flair_svc.ts
 *
 * Code generated by ts-proto. DO NOT EDIT.
 * @packageDocumentation
 */
import _m0 from "protobufjs/minimal.js";
import { Metadata } from "../../../../../lib/Types.js";
import { Empty } from "../../../../google/protobuf/empty.js";
import { JsonStatus } from "../common/common_msg.js";
import { ClearFlairTemplatesRequest, DeleteFlairRequest, DeleteFlairTemplateRequest, FlairArray, FlairConfigRequest, FlairCsvRequest, FlairCsvResponse, FlairListRequest, FlairListResponse, FlairObject, FlairRequest, FlairSelectorRequest, FlairSelectorResponse, FlairTemplateOrderRequest, FlairTemplateRequest, LinkFlairRequest, SelectFlairRequest, SetFlairEnabledRequest } from "./flair_msg.js";
/** FLAIR - https://www.reddit.com/dev/api#section_flair */
export interface Flair {
    /** https://www.reddit.com/dev/api#POST_api_clearflairtemplates */
    ClearFlairTemplates(request: ClearFlairTemplatesRequest, metadata?: Metadata): Promise<JsonStatus>;
    /** https://www.reddit.com/dev/api#POST_api_deleteflair */
    DeleteFlair(request: DeleteFlairRequest, metadata?: Metadata): Promise<JsonStatus>;
    /** https://www.reddit.com/dev/api#POST_api_deleteflairtemplate */
    DeleteFlairTemplate(request: DeleteFlairTemplateRequest, metadata?: Metadata): Promise<JsonStatus>;
    /** https://www.reddit.com/dev/api#POST_api_flair */
    Flair(request: FlairRequest, metadata?: Metadata): Promise<JsonStatus>;
    /**
     * https://www.reddit.com/dev/api#PATCH_api_flair_template_order
     * Note: Endpoint expects body as raw array of flair id's
     */
    FlairTemplateOrder(request: FlairTemplateOrderRequest, metadata?: Metadata): Promise<Empty>;
    /** https://www.reddit.com/dev/api#POST_api_flairconfig */
    FlairConfig(request: FlairConfigRequest, metadata?: Metadata): Promise<JsonStatus>;
    /** https://www.reddit.com/dev/api#POST_api_flaircsv */
    FlairCsv(request: FlairCsvRequest, metadata?: Metadata): Promise<FlairCsvResponse>;
    /** https://www.reddit.com/dev/api#GET_api_flairlist */
    FlairList(request: FlairListRequest, metadata?: Metadata): Promise<FlairListResponse>;
    /** https://www.reddit.com/dev/api#POST_api_flairselector */
    FlairSelector(request: FlairSelectorRequest, metadata?: Metadata): Promise<FlairSelectorResponse>;
    /**
     * https://www.reddit.com/dev/api#POST_api_flairtemplate_v2
     * Note: We ignore the "v1" implementation of this method
     * Beware: The JSON response to this endpoint is a FlairObject in camelCase, not snake_case
     * like the other responses.
     */
    FlairTemplate(request: FlairTemplateRequest, metadata?: Metadata): Promise<FlairObject>;
    /**
     * https://www.reddit.com/dev/api#GET_api_link_flair_v2
     * Note: We ignore the "v1" implementation of this method
     */
    LinkFlair(request: LinkFlairRequest, metadata?: Metadata): Promise<FlairArray>;
    /** https://www.reddit.com/dev/api#POST_api_selectflair */
    SelectFlair(request: SelectFlairRequest, metadata?: Metadata): Promise<JsonStatus>;
    /** https://www.reddit.com/dev/api#POST_api_setflairenabled */
    SetFlairEnabled(request: SetFlairEnabledRequest, metadata?: Metadata): Promise<JsonStatus>;
    /**
     * https://www.reddit.com/dev/api#GET_api_user_flair_v2
     * Note: We ignore the "v1" implementation of this method
     */
    UserFlair(request: LinkFlairRequest, metadata?: Metadata): Promise<FlairArray>;
}
export declare const FlairServiceName = "devvit.plugin.redditapi.flair.Flair";
export declare class FlairClientImpl implements Flair {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    ClearFlairTemplates(request: ClearFlairTemplatesRequest, metadata?: Metadata): Promise<JsonStatus>;
    DeleteFlair(request: DeleteFlairRequest, metadata?: Metadata): Promise<JsonStatus>;
    DeleteFlairTemplate(request: DeleteFlairTemplateRequest, metadata?: Metadata): Promise<JsonStatus>;
    Flair(request: FlairRequest, metadata?: Metadata): Promise<JsonStatus>;
    FlairTemplateOrder(request: FlairTemplateOrderRequest, metadata?: Metadata): Promise<Empty>;
    FlairConfig(request: FlairConfigRequest, metadata?: Metadata): Promise<JsonStatus>;
    FlairCsv(request: FlairCsvRequest, metadata?: Metadata): Promise<FlairCsvResponse>;
    FlairList(request: FlairListRequest, metadata?: Metadata): Promise<FlairListResponse>;
    FlairSelector(request: FlairSelectorRequest, metadata?: Metadata): Promise<FlairSelectorResponse>;
    FlairTemplate(request: FlairTemplateRequest, metadata?: Metadata): Promise<FlairObject>;
    LinkFlair(request: LinkFlairRequest, metadata?: Metadata): Promise<FlairArray>;
    SelectFlair(request: SelectFlairRequest, metadata?: Metadata): Promise<JsonStatus>;
    SetFlairEnabled(request: SetFlairEnabledRequest, metadata?: Metadata): Promise<JsonStatus>;
    UserFlair(request: LinkFlairRequest, metadata?: Metadata): Promise<FlairArray>;
}
/** FLAIR - https://www.reddit.com/dev/api#section_flair */
export type FlairDefinition = typeof FlairDefinition;
export declare const FlairDefinition: {
    readonly name: "Flair";
    readonly fullName: "devvit.plugin.redditapi.flair.Flair";
    readonly methods: {
        /** https://www.reddit.com/dev/api#POST_api_clearflairtemplates */
        readonly clearFlairTemplates: {
            readonly name: "ClearFlairTemplates";
            readonly requestType: {
                $type: "devvit.plugin.redditapi.flair.ClearFlairTemplatesRequest";
                encode(message: ClearFlairTemplatesRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): ClearFlairTemplatesRequest;
                fromJSON(object: any): ClearFlairTemplatesRequest;
                toJSON(message: ClearFlairTemplatesRequest): unknown;
                create(base?: {
                    subreddit?: string;
                    flairType?: string;
                }): ClearFlairTemplatesRequest;
                fromPartial(object: {
                    subreddit?: string;
                    flairType?: string;
                }): ClearFlairTemplatesRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.plugin.redditapi.common.JsonStatus";
                encode(message: JsonStatus, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): JsonStatus;
                fromJSON(object: any): JsonStatus;
                toJSON(message: JsonStatus): unknown;
                create(base?: {
                    json?: {
                        errors?: string[];
                    } | undefined;
                }): JsonStatus;
                fromPartial(object: {
                    json?: {
                        errors?: string[];
                    } | undefined;
                }): JsonStatus;
            };
            readonly responseStream: false;
            readonly options: {
                readonly _unknownFields: {
                    readonly 480010: readonly [Uint8Array<ArrayBuffer>, Uint8Array<ArrayBuffer>, Uint8Array<ArrayBuffer>, Uint8Array<ArrayBuffer>];
                };
            };
        };
        /** https://www.reddit.com/dev/api#POST_api_deleteflair */
        readonly deleteFlair: {
            readonly name: "DeleteFlair";
            readonly requestType: {
                $type: "devvit.plugin.redditapi.flair.DeleteFlairRequest";
                encode(message: DeleteFlairRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): DeleteFlairRequest;
                fromJSON(object: any): DeleteFlairRequest;
                toJSON(message: DeleteFlairRequest): unknown;
                create(base?: {
                    subreddit?: string;
                    name?: string;
                }): DeleteFlairRequest;
                fromPartial(object: {
                    subreddit?: string;
                    name?: string;
                }): DeleteFlairRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.plugin.redditapi.common.JsonStatus";
                encode(message: JsonStatus, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): JsonStatus;
                fromJSON(object: any): JsonStatus;
                toJSON(message: JsonStatus): unknown;
                create(base?: {
                    json?: {
                        errors?: string[];
                    } | undefined;
                }): JsonStatus;
                fromPartial(object: {
                    json?: {
                        errors?: string[];
                    } | undefined;
                }): JsonStatus;
            };
            readonly responseStream: false;
            readonly options: {
                readonly _unknownFields: {
                    readonly 480010: readonly [Uint8Array<ArrayBuffer>, Uint8Array<ArrayBuffer>, Uint8Array<ArrayBuffer>];
                };
            };
        };
        /** https://www.reddit.com/dev/api#POST_api_deleteflairtemplate */
        readonly deleteFlairTemplate: {
            readonly name: "DeleteFlairTemplate";
            readonly requestType: {
                $type: "devvit.plugin.redditapi.flair.DeleteFlairTemplateRequest";
                encode(message: DeleteFlairTemplateRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): DeleteFlairTemplateRequest;
                fromJSON(object: any): DeleteFlairTemplateRequest;
                toJSON(message: DeleteFlairTemplateRequest): unknown;
                create(base?: {
                    subreddit?: string;
                    flairTemplateId?: string;
                }): DeleteFlairTemplateRequest;
                fromPartial(object: {
                    subreddit?: string;
                    flairTemplateId?: string;
                }): DeleteFlairTemplateRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.plugin.redditapi.common.JsonStatus";
                encode(message: JsonStatus, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): JsonStatus;
                fromJSON(object: any): JsonStatus;
                toJSON(message: JsonStatus): unknown;
                create(base?: {
                    json?: {
                        errors?: string[];
                    } | undefined;
                }): JsonStatus;
                fromPartial(object: {
                    json?: {
                        errors?: string[];
                    } | undefined;
                }): JsonStatus;
            };
            readonly responseStream: false;
            readonly options: {
                readonly _unknownFields: {
                    readonly 480010: readonly [Uint8Array<ArrayBuffer>, Uint8Array<ArrayBuffer>, Uint8Array<ArrayBuffer>, Uint8Array<ArrayBuffer>];
                };
            };
        };
        /** https://www.reddit.com/dev/api#POST_api_flair */
        readonly flair: {
            readonly name: "Flair";
            readonly requestType: {
                $type: "devvit.plugin.redditapi.flair.FlairRequest";
                encode(message: FlairRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): FlairRequest;
                fromJSON(object: any): FlairRequest;
                toJSON(message: FlairRequest): unknown;
                create(base?: {
                    subreddit?: string;
                    cssClass?: string | undefined | undefined;
                    link?: string | undefined | undefined;
                    name?: string | undefined | undefined;
                    text?: string | undefined | undefined;
                }): FlairRequest;
                fromPartial(object: {
                    subreddit?: string;
                    cssClass?: string | undefined | undefined;
                    link?: string | undefined | undefined;
                    name?: string | undefined | undefined;
                    text?: string | undefined | undefined;
                }): FlairRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.plugin.redditapi.common.JsonStatus";
                encode(message: JsonStatus, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): JsonStatus;
                fromJSON(object: any): JsonStatus;
                toJSON(message: JsonStatus): unknown;
                create(base?: {
                    json?: {
                        errors?: string[];
                    } | undefined;
                }): JsonStatus;
                fromPartial(object: {
                    json?: {
                        errors?: string[];
                    } | undefined;
                }): JsonStatus;
            };
            readonly responseStream: false;
            readonly options: {
                readonly _unknownFields: {
                    readonly 480010: readonly [Uint8Array<ArrayBuffer>, Uint8Array<ArrayBuffer>, Uint8Array<ArrayBuffer>, Uint8Array<ArrayBuffer>];
                };
            };
        };
        /**
         * https://www.reddit.com/dev/api#PATCH_api_flair_template_order
         * Note: Endpoint expects body as raw array of flair id's
         */
        readonly flairTemplateOrder: {
            readonly name: "FlairTemplateOrder";
            readonly requestType: {
                $type: "devvit.plugin.redditapi.flair.FlairTemplateOrderRequest";
                encode(message: FlairTemplateOrderRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): FlairTemplateOrderRequest;
                fromJSON(object: any): FlairTemplateOrderRequest;
                toJSON(message: FlairTemplateOrderRequest): unknown;
                create(base?: {
                    subreddit?: string;
                    flairType?: string;
                    order?: string[];
                }): FlairTemplateOrderRequest;
                fromPartial(object: {
                    subreddit?: string;
                    flairType?: string;
                    order?: string[];
                }): FlairTemplateOrderRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "google.protobuf.Empty";
                encode(_: Empty, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): Empty;
                fromJSON(_: any): Empty;
                toJSON(_: Empty): unknown;
                create(base?: {}): Empty;
                fromPartial(_: {}): Empty;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        /** https://www.reddit.com/dev/api#POST_api_flairconfig */
        readonly flairConfig: {
            readonly name: "FlairConfig";
            readonly requestType: {
                $type: "devvit.plugin.redditapi.flair.FlairConfigRequest";
                encode(message: FlairConfigRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): FlairConfigRequest;
                fromJSON(object: any): FlairConfigRequest;
                toJSON(message: FlairConfigRequest): unknown;
                create(base?: {
                    subreddit?: string;
                    flairEnabled?: boolean;
                    flairPosition?: string;
                    flairSelfAssignEnabled?: boolean;
                    linkFlairPosition?: string;
                    linkFlairSelfAssignEnabled?: boolean;
                }): FlairConfigRequest;
                fromPartial(object: {
                    subreddit?: string;
                    flairEnabled?: boolean;
                    flairPosition?: string;
                    flairSelfAssignEnabled?: boolean;
                    linkFlairPosition?: string;
                    linkFlairSelfAssignEnabled?: boolean;
                }): FlairConfigRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.plugin.redditapi.common.JsonStatus";
                encode(message: JsonStatus, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): JsonStatus;
                fromJSON(object: any): JsonStatus;
                toJSON(message: JsonStatus): unknown;
                create(base?: {
                    json?: {
                        errors?: string[];
                    } | undefined;
                }): JsonStatus;
                fromPartial(object: {
                    json?: {
                        errors?: string[];
                    } | undefined;
                }): JsonStatus;
            };
            readonly responseStream: false;
            readonly options: {
                readonly _unknownFields: {
                    readonly 480010: readonly [Uint8Array<ArrayBuffer>, Uint8Array<ArrayBuffer>, Uint8Array<ArrayBuffer>, Uint8Array<ArrayBuffer>];
                };
            };
        };
        /** https://www.reddit.com/dev/api#POST_api_flaircsv */
        readonly flairCsv: {
            readonly name: "FlairCsv";
            readonly requestType: {
                $type: "devvit.plugin.redditapi.flair.FlairCsvRequest";
                encode(message: FlairCsvRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): FlairCsvRequest;
                fromJSON(object: any): FlairCsvRequest;
                toJSON(message: FlairCsvRequest): unknown;
                create(base?: {
                    subreddit?: string;
                    flairCsv?: string;
                }): FlairCsvRequest;
                fromPartial(object: {
                    subreddit?: string;
                    flairCsv?: string;
                }): FlairCsvRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.plugin.redditapi.flair.FlairCsvResponse";
                encode(message: FlairCsvResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): FlairCsvResponse;
                fromJSON(object: any): FlairCsvResponse;
                toJSON(message: FlairCsvResponse): unknown;
                create(base?: {
                    result?: {
                        status?: string | undefined | undefined;
                        ok?: boolean | undefined | undefined;
                        errors?: {
                            css?: string | undefined | undefined;
                            row?: string | undefined | undefined;
                            user?: string | undefined | undefined;
                        } | undefined;
                        warnings?: {
                            text?: string | undefined | undefined;
                        } | undefined;
                    }[];
                }): FlairCsvResponse;
                fromPartial(object: {
                    result?: {
                        status?: string | undefined | undefined;
                        ok?: boolean | undefined | undefined;
                        errors?: {
                            css?: string | undefined | undefined;
                            row?: string | undefined | undefined;
                            user?: string | undefined | undefined;
                        } | undefined;
                        warnings?: {
                            text?: string | undefined | undefined;
                        } | undefined;
                    }[];
                }): FlairCsvResponse;
            };
            readonly responseStream: false;
            readonly options: {
                readonly _unknownFields: {
                    readonly 480010: readonly [Uint8Array<ArrayBuffer>, Uint8Array<ArrayBuffer>, Uint8Array<ArrayBuffer>, Uint8Array<ArrayBuffer>, Uint8Array<ArrayBuffer>];
                };
            };
        };
        /** https://www.reddit.com/dev/api#GET_api_flairlist */
        readonly flairList: {
            readonly name: "FlairList";
            readonly requestType: {
                $type: "devvit.plugin.redditapi.flair.FlairListRequest";
                encode(message: FlairListRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): FlairListRequest;
                fromJSON(object: any): FlairListRequest;
                toJSON(message: FlairListRequest): unknown;
                create(base?: {
                    subreddit?: string;
                    after?: string | undefined | undefined;
                    before?: string | undefined | undefined;
                    count?: number | undefined | undefined;
                    limit?: number | undefined | undefined;
                    name?: string | undefined | undefined;
                    show?: string | undefined | undefined;
                }): FlairListRequest;
                fromPartial(object: {
                    subreddit?: string;
                    after?: string | undefined | undefined;
                    before?: string | undefined | undefined;
                    count?: number | undefined | undefined;
                    limit?: number | undefined | undefined;
                    name?: string | undefined | undefined;
                    show?: string | undefined | undefined;
                }): FlairListRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.plugin.redditapi.flair.FlairListResponse";
                encode(message: FlairListResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): FlairListResponse;
                fromJSON(object: any): FlairListResponse;
                toJSON(message: FlairListResponse): unknown;
                create(base?: {
                    users?: {
                        flairCssClass?: string | undefined | undefined;
                        user?: string | undefined | undefined;
                        flairText?: string | undefined | undefined;
                    }[];
                    next?: string | undefined | undefined;
                    prev?: string | undefined | undefined;
                }): FlairListResponse;
                fromPartial(object: {
                    users?: {
                        flairCssClass?: string | undefined | undefined;
                        user?: string | undefined | undefined;
                        flairText?: string | undefined | undefined;
                    }[];
                    next?: string | undefined | undefined;
                    prev?: string | undefined | undefined;
                }): FlairListResponse;
            };
            readonly responseStream: false;
            readonly options: {
                readonly _unknownFields: {
                    readonly 480010: readonly [Uint8Array<ArrayBuffer>, Uint8Array<ArrayBuffer>];
                };
            };
        };
        /** https://www.reddit.com/dev/api#POST_api_flairselector */
        readonly flairSelector: {
            readonly name: "FlairSelector";
            readonly requestType: {
                $type: "devvit.plugin.redditapi.flair.FlairSelectorRequest";
                encode(message: FlairSelectorRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): FlairSelectorRequest;
                fromJSON(object: any): FlairSelectorRequest;
                toJSON(message: FlairSelectorRequest): unknown;
                create(base?: {
                    subreddit?: string;
                    isNewlink?: boolean;
                    link?: string | undefined | undefined;
                    name?: string;
                }): FlairSelectorRequest;
                fromPartial(object: {
                    subreddit?: string;
                    isNewlink?: boolean;
                    link?: string | undefined | undefined;
                    name?: string;
                }): FlairSelectorRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.plugin.redditapi.flair.FlairSelectorResponse";
                encode(message: FlairSelectorResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): FlairSelectorResponse;
                fromJSON(object: any): FlairSelectorResponse;
                toJSON(message: FlairSelectorResponse): unknown;
                create(base?: {
                    current?: {
                        flairCssClass?: string | undefined | undefined;
                        flairTemplateId?: string | undefined | undefined;
                        flairText?: string | undefined | undefined;
                        flairTextEditable?: boolean | undefined | undefined;
                        flairPosition?: string | undefined | undefined;
                    } | undefined;
                    choices?: {
                        flairCssClass?: string | undefined | undefined;
                        flairTemplateId?: string | undefined | undefined;
                        flairText?: string | undefined | undefined;
                        flairTextEditable?: boolean | undefined | undefined;
                        flairPosition?: string | undefined | undefined;
                    }[];
                }): FlairSelectorResponse;
                fromPartial(object: {
                    current?: {
                        flairCssClass?: string | undefined | undefined;
                        flairTemplateId?: string | undefined | undefined;
                        flairText?: string | undefined | undefined;
                        flairTextEditable?: boolean | undefined | undefined;
                        flairPosition?: string | undefined | undefined;
                    } | undefined;
                    choices?: {
                        flairCssClass?: string | undefined | undefined;
                        flairTemplateId?: string | undefined | undefined;
                        flairText?: string | undefined | undefined;
                        flairTextEditable?: boolean | undefined | undefined;
                        flairPosition?: string | undefined | undefined;
                    }[];
                }): FlairSelectorResponse;
            };
            readonly responseStream: false;
            readonly options: {
                readonly _unknownFields: {
                    readonly 480010: readonly [Uint8Array<ArrayBuffer>, Uint8Array<ArrayBuffer>];
                };
            };
        };
        /**
         * https://www.reddit.com/dev/api#POST_api_flairtemplate_v2
         * Note: We ignore the "v1" implementation of this method
         * Beware: The JSON response to this endpoint is a FlairObject in camelCase, not snake_case
         * like the other responses.
         */
        readonly flairTemplate: {
            readonly name: "FlairTemplate";
            readonly requestType: {
                $type: "devvit.plugin.redditapi.flair.FlairTemplateRequest";
                encode(message: FlairTemplateRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): FlairTemplateRequest;
                fromJSON(object: any): FlairTemplateRequest;
                toJSON(message: FlairTemplateRequest): unknown;
                create(base?: {
                    subreddit?: string;
                    allowableContent?: string;
                    backgroundColor?: string;
                    cssClass?: string;
                    flairTemplateId?: string;
                    flairType?: string;
                    maxEmojis?: number;
                    modOnly?: boolean;
                    overrideCss?: boolean;
                    text?: string;
                    textColor?: string;
                    textEditable?: boolean;
                }): FlairTemplateRequest;
                fromPartial(object: {
                    subreddit?: string;
                    allowableContent?: string;
                    backgroundColor?: string;
                    cssClass?: string;
                    flairTemplateId?: string;
                    flairType?: string;
                    maxEmojis?: number;
                    modOnly?: boolean;
                    overrideCss?: boolean;
                    text?: string;
                    textColor?: string;
                    textEditable?: boolean;
                }): FlairTemplateRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.plugin.redditapi.flair.FlairObject";
                encode(message: FlairObject, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): FlairObject;
                fromJSON(object: any): FlairObject;
                toJSON(message: FlairObject): unknown;
                create(base?: {
                    allowableContent?: string | undefined | undefined;
                    text?: string | undefined | undefined;
                    textColor?: string | undefined | undefined;
                    modOnly?: boolean;
                    backgroundColor?: string | undefined | undefined;
                    id?: string | undefined | undefined;
                    cssClass?: string | undefined | undefined;
                    maxEmojis?: number;
                    textEditable?: boolean;
                    overrideCss?: boolean;
                    type?: string | undefined | undefined;
                    flairType?: string | undefined | undefined;
                    richtext?: {
                        e?: string | undefined | undefined;
                        t?: string | undefined | undefined;
                        a?: string | undefined | undefined;
                        u?: string | undefined | undefined;
                    }[];
                }): FlairObject;
                fromPartial(object: {
                    allowableContent?: string | undefined | undefined;
                    text?: string | undefined | undefined;
                    textColor?: string | undefined | undefined;
                    modOnly?: boolean;
                    backgroundColor?: string | undefined | undefined;
                    id?: string | undefined | undefined;
                    cssClass?: string | undefined | undefined;
                    maxEmojis?: number;
                    textEditable?: boolean;
                    overrideCss?: boolean;
                    type?: string | undefined | undefined;
                    flairType?: string | undefined | undefined;
                    richtext?: {
                        e?: string | undefined | undefined;
                        t?: string | undefined | undefined;
                        a?: string | undefined | undefined;
                        u?: string | undefined | undefined;
                    }[];
                }): FlairObject;
            };
            readonly responseStream: false;
            readonly options: {
                readonly _unknownFields: {
                    readonly 480010: readonly [Uint8Array<ArrayBuffer>, Uint8Array<ArrayBuffer>, Uint8Array<ArrayBuffer>, Uint8Array<ArrayBuffer>];
                };
            };
        };
        /**
         * https://www.reddit.com/dev/api#GET_api_link_flair_v2
         * Note: We ignore the "v1" implementation of this method
         */
        readonly linkFlair: {
            readonly name: "LinkFlair";
            readonly requestType: {
                $type: "devvit.plugin.redditapi.flair.LinkFlairRequest";
                encode(message: LinkFlairRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): LinkFlairRequest;
                fromJSON(object: any): LinkFlairRequest;
                toJSON(message: LinkFlairRequest): unknown;
                create(base?: {
                    subreddit?: string;
                }): LinkFlairRequest;
                fromPartial(object: {
                    subreddit?: string;
                }): LinkFlairRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.plugin.redditapi.flair.FlairArray";
                encode(message: FlairArray, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): FlairArray;
                fromJSON(object: any): FlairArray;
                toJSON(message: FlairArray): unknown;
                create(base?: {
                    flair?: {
                        allowableContent?: string | undefined | undefined;
                        text?: string | undefined | undefined;
                        textColor?: string | undefined | undefined;
                        modOnly?: boolean;
                        backgroundColor?: string | undefined | undefined;
                        id?: string | undefined | undefined;
                        cssClass?: string | undefined | undefined;
                        maxEmojis?: number;
                        textEditable?: boolean;
                        overrideCss?: boolean;
                        type?: string | undefined | undefined;
                        flairType?: string | undefined | undefined;
                        richtext?: {
                            e?: string | undefined | undefined;
                            t?: string | undefined | undefined;
                            a?: string | undefined | undefined;
                            u?: string | undefined | undefined;
                        }[];
                    }[];
                }): FlairArray;
                fromPartial(object: {
                    flair?: {
                        allowableContent?: string | undefined | undefined;
                        text?: string | undefined | undefined;
                        textColor?: string | undefined | undefined;
                        modOnly?: boolean;
                        backgroundColor?: string | undefined | undefined;
                        id?: string | undefined | undefined;
                        cssClass?: string | undefined | undefined;
                        maxEmojis?: number;
                        textEditable?: boolean;
                        overrideCss?: boolean;
                        type?: string | undefined | undefined;
                        flairType?: string | undefined | undefined;
                        richtext?: {
                            e?: string | undefined | undefined;
                            t?: string | undefined | undefined;
                            a?: string | undefined | undefined;
                            u?: string | undefined | undefined;
                        }[];
                    }[];
                }): FlairArray;
            };
            readonly responseStream: false;
            readonly options: {
                readonly _unknownFields: {
                    readonly 480010: readonly [Uint8Array<ArrayBuffer>, Uint8Array<ArrayBuffer>, Uint8Array<ArrayBuffer>];
                };
            };
        };
        /** https://www.reddit.com/dev/api#POST_api_selectflair */
        readonly selectFlair: {
            readonly name: "SelectFlair";
            readonly requestType: {
                $type: "devvit.plugin.redditapi.flair.SelectFlairRequest";
                encode(message: SelectFlairRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): SelectFlairRequest;
                fromJSON(object: any): SelectFlairRequest;
                toJSON(message: SelectFlairRequest): unknown;
                create(base?: {
                    subreddit?: string;
                    backgroundColor?: string;
                    cssClass?: string;
                    flairTemplateId?: string;
                    link?: string;
                    name?: string;
                    returnRtjson?: string;
                    text?: string;
                    textColor?: string;
                }): SelectFlairRequest;
                fromPartial(object: {
                    subreddit?: string;
                    backgroundColor?: string;
                    cssClass?: string;
                    flairTemplateId?: string;
                    link?: string;
                    name?: string;
                    returnRtjson?: string;
                    text?: string;
                    textColor?: string;
                }): SelectFlairRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.plugin.redditapi.common.JsonStatus";
                encode(message: JsonStatus, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): JsonStatus;
                fromJSON(object: any): JsonStatus;
                toJSON(message: JsonStatus): unknown;
                create(base?: {
                    json?: {
                        errors?: string[];
                    } | undefined;
                }): JsonStatus;
                fromPartial(object: {
                    json?: {
                        errors?: string[];
                    } | undefined;
                }): JsonStatus;
            };
            readonly responseStream: false;
            readonly options: {
                readonly _unknownFields: {
                    readonly 480010: readonly [Uint8Array<ArrayBuffer>, Uint8Array<ArrayBuffer>, Uint8Array<ArrayBuffer>, Uint8Array<ArrayBuffer>];
                };
            };
        };
        /** https://www.reddit.com/dev/api#POST_api_setflairenabled */
        readonly setFlairEnabled: {
            readonly name: "SetFlairEnabled";
            readonly requestType: {
                $type: "devvit.plugin.redditapi.flair.SetFlairEnabledRequest";
                encode(message: SetFlairEnabledRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): SetFlairEnabledRequest;
                fromJSON(object: any): SetFlairEnabledRequest;
                toJSON(message: SetFlairEnabledRequest): unknown;
                create(base?: {
                    subreddit?: string;
                    flairEnabled?: boolean;
                }): SetFlairEnabledRequest;
                fromPartial(object: {
                    subreddit?: string;
                    flairEnabled?: boolean;
                }): SetFlairEnabledRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.plugin.redditapi.common.JsonStatus";
                encode(message: JsonStatus, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): JsonStatus;
                fromJSON(object: any): JsonStatus;
                toJSON(message: JsonStatus): unknown;
                create(base?: {
                    json?: {
                        errors?: string[];
                    } | undefined;
                }): JsonStatus;
                fromPartial(object: {
                    json?: {
                        errors?: string[];
                    } | undefined;
                }): JsonStatus;
            };
            readonly responseStream: false;
            readonly options: {
                readonly _unknownFields: {
                    readonly 480010: readonly [Uint8Array<ArrayBuffer>, Uint8Array<ArrayBuffer>, Uint8Array<ArrayBuffer>, Uint8Array<ArrayBuffer>];
                };
            };
        };
        /**
         * https://www.reddit.com/dev/api#GET_api_user_flair_v2
         * Note: We ignore the "v1" implementation of this method
         */
        readonly userFlair: {
            readonly name: "UserFlair";
            readonly requestType: {
                $type: "devvit.plugin.redditapi.flair.LinkFlairRequest";
                encode(message: LinkFlairRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): LinkFlairRequest;
                fromJSON(object: any): LinkFlairRequest;
                toJSON(message: LinkFlairRequest): unknown;
                create(base?: {
                    subreddit?: string;
                }): LinkFlairRequest;
                fromPartial(object: {
                    subreddit?: string;
                }): LinkFlairRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.plugin.redditapi.flair.FlairArray";
                encode(message: FlairArray, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): FlairArray;
                fromJSON(object: any): FlairArray;
                toJSON(message: FlairArray): unknown;
                create(base?: {
                    flair?: {
                        allowableContent?: string | undefined | undefined;
                        text?: string | undefined | undefined;
                        textColor?: string | undefined | undefined;
                        modOnly?: boolean;
                        backgroundColor?: string | undefined | undefined;
                        id?: string | undefined | undefined;
                        cssClass?: string | undefined | undefined;
                        maxEmojis?: number;
                        textEditable?: boolean;
                        overrideCss?: boolean;
                        type?: string | undefined | undefined;
                        flairType?: string | undefined | undefined;
                        richtext?: {
                            e?: string | undefined | undefined;
                            t?: string | undefined | undefined;
                            a?: string | undefined | undefined;
                            u?: string | undefined | undefined;
                        }[];
                    }[];
                }): FlairArray;
                fromPartial(object: {
                    flair?: {
                        allowableContent?: string | undefined | undefined;
                        text?: string | undefined | undefined;
                        textColor?: string | undefined | undefined;
                        modOnly?: boolean;
                        backgroundColor?: string | undefined | undefined;
                        id?: string | undefined | undefined;
                        cssClass?: string | undefined | undefined;
                        maxEmojis?: number;
                        textEditable?: boolean;
                        overrideCss?: boolean;
                        type?: string | undefined | undefined;
                        flairType?: string | undefined | undefined;
                        richtext?: {
                            e?: string | undefined | undefined;
                            t?: string | undefined | undefined;
                            a?: string | undefined | undefined;
                            u?: string | undefined | undefined;
                        }[];
                    }[];
                }): FlairArray;
            };
            readonly responseStream: false;
            readonly options: {
                readonly _unknownFields: {
                    readonly 480010: readonly [Uint8Array<ArrayBuffer>, Uint8Array<ArrayBuffer>, Uint8Array<ArrayBuffer>];
                };
            };
        };
    };
};
interface Rpc {
    request(service: string, method: string, data: Uint8Array, metadata?: Metadata): Promise<Uint8Array>;
}
export {};
//# sourceMappingURL=flair_svc.d.ts.map