/**
 * #widgets_svc.ts
 *
 * Code generated by ts-proto. DO NOT EDIT.
 * @packageDocumentation
 */
import _m0 from "protobufjs/minimal.js";
import { Metadata } from "../../../../../lib/Types.js";
import { Empty } from "../../../../google/protobuf/empty.js";
import { AddButtonWidgetRequest, AddCalendarWidgetRequest, AddCommunityListWidgetRequest, AddCustomWidgetRequest, AddImageWidgetRequest, AddPostFlairWidgetRequest, AddTextAreaWidgetRequest, ButtonWidget, CalendarWidget, CommunityListWidget, CustomWidget, DeleteWidgetRequest, GetWidgetImageUploadLeaseRequest, GetWidgetImageUploadLeaseResponse, GetWidgetsRequest, GetWidgetsResponse, ImageWidget, OrderWidgetsRequest, PostFlairWidget, TextAreaWidget, UpdateButtonWidgetRequest, UpdateCalendarWidgetRequest, UpdateCommunityListWidgetRequest, UpdateCommunityListWidgetResponse, UpdateCustomWidgetRequest, UpdateImageWidgetRequest, UpdatePostFlairWidgetRequest, UpdateTextAreaWidgetRequest } from "./widgets_msg.js";
/** WIDGETS - https://www.reddit.com/dev/api#section_widgets */
export interface Widgets {
    /**
     * Add a button widget to a subreddit.
     *
     * @see {@link https://www.reddit.com/dev/api#POST_api_widget}
     */
    AddButtonWidget(request: AddButtonWidgetRequest, metadata?: Metadata): Promise<ButtonWidget>;
    /**
     * Add an image widget to a subreddit.
     *
     * @see {@link https://www.reddit.com/dev/api#POST_api_widget}
     */
    AddImageWidget(request: AddImageWidgetRequest, metadata?: Metadata): Promise<ImageWidget>;
    /**
     * Add a calendar widget to a subreddit.
     *
     * @see {@link https://www.reddit.com/dev/api#POST_api_widget}
     */
    AddCalendarWidget(request: AddCalendarWidgetRequest, metadata?: Metadata): Promise<CalendarWidget>;
    /**
     * Add a text widget to a subreddit.
     *
     * @see {@link https://www.reddit.com/dev/api#POST_api_widget}
     */
    AddTextAreaWidget(request: AddTextAreaWidgetRequest, metadata?: Metadata): Promise<TextAreaWidget>;
    /**
     * Add a community list widget to a subreddit.
     *
     * @see {@link https://www.reddit.com/dev/api#POST_api_widget}
     */
    AddCommunityListWidget(request: AddCommunityListWidgetRequest, metadata?: Metadata): Promise<CommunityListWidget>;
    /**
     * Add a post flair widget to a subreddit.
     *
     * @see {@link https://www.reddit.com/dev/api#POST_api_widget}
     */
    AddPostFlairWidget(request: AddPostFlairWidgetRequest, metadata?: Metadata): Promise<PostFlairWidget>;
    /**
     * Add a custom widget to a subreddit. This is an experimental feature.
     * Custom widgets don't display on mobile devices. Customizations can break at any time
     *
     * @see {@link https://www.reddit.com/dev/api#POST_api_widget}
     */
    AddCustomWidget(request: AddCustomWidgetRequest, metadata?: Metadata): Promise<CustomWidget>;
    /**
     * Delete a widget from a subreddit.
     *
     * @see {@link https://www.reddit.com/dev/api#DELETE_api_widget_\{widget_id\}}
     */
    DeleteWidget(request: DeleteWidgetRequest, metadata?: Metadata): Promise<Empty>;
    /**
     * Update a button widget on a subreddit.
     *
     * @see {@link https://www.reddit.com/dev/api#PUT_api_widget_\{widget_id\}}
     */
    UpdateButtonWidget(request: UpdateButtonWidgetRequest, metadata?: Metadata): Promise<ButtonWidget>;
    /**
     * Update an image widget on a subreddit.
     *
     * @see {@link https://www.reddit.com/dev/api#PUT_api_widget_\{widget_id\}}
     */
    UpdateImageWidget(request: UpdateImageWidgetRequest, metadata?: Metadata): Promise<ImageWidget>;
    /**
     * Update a calendar widget on a subreddit.
     *
     * @see {@link https://www.reddit.com/dev/api#PUT_api_widget_\{widget_id\}}
     */
    UpdateCalendarWidget(request: UpdateCalendarWidgetRequest, metadata?: Metadata): Promise<CalendarWidget>;
    /**
     * Update a text widget on a subreddit.
     *
     * @see {@link https://www.reddit.com/dev/api#PUT_api_widget_\{widget_id\}}
     */
    UpdateTextAreaWidget(request: UpdateTextAreaWidgetRequest, metadata?: Metadata): Promise<TextAreaWidget>;
    /**
     * Update a community list widget on a subreddit.
     *
     * @see {@link https://www.reddit.com/dev/api#PUT_api_widget_\{widget_id\}}
     */
    UpdateCommunityListWidget(request: UpdateCommunityListWidgetRequest, metadata?: Metadata): Promise<UpdateCommunityListWidgetResponse>;
    /**
     * Update a post flair widget on a subreddit.
     *
     * @see {@link https://www.reddit.com/dev/api#PUT_api_widget_\{widget_id\}}
     */
    UpdatePostFlairWidget(request: UpdatePostFlairWidgetRequest, metadata?: Metadata): Promise<PostFlairWidget>;
    /**
     * Update a custom widget on a subreddit.
     *
     * @see {@link https://www.reddit.com/dev/api#PUT_api_widget_\{widget_id\}}
     */
    UpdateCustomWidget(request: UpdateCustomWidgetRequest, metadata?: Metadata): Promise<CustomWidget>;
    /**
     * Get an S3 upload lease for a widget image. This is used to upload images for image widgets.
     *
     * @see {@link https://www.reddit.com/dev/api#POST_api_widget_image_upload_s3}
     */
    GetWidgetImageUploadLease(request: GetWidgetImageUploadLeaseRequest, metadata?: Metadata): Promise<GetWidgetImageUploadLeaseResponse>;
    /**
     * Update the order of widgets on a subreddit.
     *
     * @see {@link https://www.reddit.com/dev/api#PATCH_api_widget_order_\{section\}}
     */
    OrderWidgets(request: OrderWidgetsRequest, metadata?: Metadata): Promise<Empty>;
    /**
     * Get a list of widgets on a subreddit.
     *
     * @see {@link https://www.reddit.com/dev/api#GET_api_widgets}
     */
    GetWidgets(request: GetWidgetsRequest, metadata?: Metadata): Promise<GetWidgetsResponse>;
}
export declare const WidgetsServiceName = "devvit.plugin.redditapi.widgets.Widgets";
export declare class WidgetsClientImpl implements Widgets {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    AddButtonWidget(request: AddButtonWidgetRequest, metadata?: Metadata): Promise<ButtonWidget>;
    AddImageWidget(request: AddImageWidgetRequest, metadata?: Metadata): Promise<ImageWidget>;
    AddCalendarWidget(request: AddCalendarWidgetRequest, metadata?: Metadata): Promise<CalendarWidget>;
    AddTextAreaWidget(request: AddTextAreaWidgetRequest, metadata?: Metadata): Promise<TextAreaWidget>;
    AddCommunityListWidget(request: AddCommunityListWidgetRequest, metadata?: Metadata): Promise<CommunityListWidget>;
    AddPostFlairWidget(request: AddPostFlairWidgetRequest, metadata?: Metadata): Promise<PostFlairWidget>;
    AddCustomWidget(request: AddCustomWidgetRequest, metadata?: Metadata): Promise<CustomWidget>;
    DeleteWidget(request: DeleteWidgetRequest, metadata?: Metadata): Promise<Empty>;
    UpdateButtonWidget(request: UpdateButtonWidgetRequest, metadata?: Metadata): Promise<ButtonWidget>;
    UpdateImageWidget(request: UpdateImageWidgetRequest, metadata?: Metadata): Promise<ImageWidget>;
    UpdateCalendarWidget(request: UpdateCalendarWidgetRequest, metadata?: Metadata): Promise<CalendarWidget>;
    UpdateTextAreaWidget(request: UpdateTextAreaWidgetRequest, metadata?: Metadata): Promise<TextAreaWidget>;
    UpdateCommunityListWidget(request: UpdateCommunityListWidgetRequest, metadata?: Metadata): Promise<UpdateCommunityListWidgetResponse>;
    UpdatePostFlairWidget(request: UpdatePostFlairWidgetRequest, metadata?: Metadata): Promise<PostFlairWidget>;
    UpdateCustomWidget(request: UpdateCustomWidgetRequest, metadata?: Metadata): Promise<CustomWidget>;
    GetWidgetImageUploadLease(request: GetWidgetImageUploadLeaseRequest, metadata?: Metadata): Promise<GetWidgetImageUploadLeaseResponse>;
    OrderWidgets(request: OrderWidgetsRequest, metadata?: Metadata): Promise<Empty>;
    GetWidgets(request: GetWidgetsRequest, metadata?: Metadata): Promise<GetWidgetsResponse>;
}
/** WIDGETS - https://www.reddit.com/dev/api#section_widgets */
export type WidgetsDefinition = typeof WidgetsDefinition;
export declare const WidgetsDefinition: {
    readonly name: "Widgets";
    readonly fullName: "devvit.plugin.redditapi.widgets.Widgets";
    readonly methods: {
        /**
         * Add a button widget to a subreddit.
         *
         * @see {@link https://www.reddit.com/dev/api#POST_api_widget}
         */
        readonly addButtonWidget: {
            readonly name: "AddButtonWidget";
            readonly requestType: {
                $type: "devvit.plugin.redditapi.widgets.AddButtonWidgetRequest";
                encode(message: AddButtonWidgetRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): AddButtonWidgetRequest;
                fromJSON(object: any): AddButtonWidgetRequest;
                toJSON(message: AddButtonWidgetRequest): unknown;
                create(base?: {
                    subreddit?: string;
                    shortName?: string;
                    description?: string;
                    buttons?: {
                        kind?: string;
                        text?: string;
                        url?: string | undefined | undefined;
                        imageUrl?: string | undefined | undefined;
                        linkUrl?: string | undefined | undefined;
                        color?: string | undefined | undefined;
                        fillColor?: string | undefined | undefined;
                        textColor?: string | undefined | undefined;
                        height?: number | undefined | undefined;
                        width?: number | undefined | undefined;
                        hoverState?: {
                            kind?: string;
                            color?: string | undefined | undefined;
                            fillColor?: string | undefined | undefined;
                            text?: string | undefined | undefined;
                            textColor?: string | undefined | undefined;
                            imageUrl?: string | undefined | undefined;
                            height?: number | undefined | undefined;
                            width?: number | undefined | undefined;
                        } | undefined;
                    }[];
                    styles?: {
                        backgroundColor?: string | undefined | undefined;
                        headerColor?: string | undefined | undefined;
                    } | undefined;
                }): AddButtonWidgetRequest;
                fromPartial(object: {
                    subreddit?: string;
                    shortName?: string;
                    description?: string;
                    buttons?: {
                        kind?: string;
                        text?: string;
                        url?: string | undefined | undefined;
                        imageUrl?: string | undefined | undefined;
                        linkUrl?: string | undefined | undefined;
                        color?: string | undefined | undefined;
                        fillColor?: string | undefined | undefined;
                        textColor?: string | undefined | undefined;
                        height?: number | undefined | undefined;
                        width?: number | undefined | undefined;
                        hoverState?: {
                            kind?: string;
                            color?: string | undefined | undefined;
                            fillColor?: string | undefined | undefined;
                            text?: string | undefined | undefined;
                            textColor?: string | undefined | undefined;
                            imageUrl?: string | undefined | undefined;
                            height?: number | undefined | undefined;
                            width?: number | undefined | undefined;
                        } | undefined;
                    }[];
                    styles?: {
                        backgroundColor?: string | undefined | undefined;
                        headerColor?: string | undefined | undefined;
                    } | undefined;
                }): AddButtonWidgetRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.plugin.redditapi.widgets.ButtonWidget";
                encode(message: ButtonWidget, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): ButtonWidget;
                fromJSON(object: any): ButtonWidget;
                toJSON(message: ButtonWidget): unknown;
                create(base?: {
                    id?: string;
                    kind?: string;
                    shortName?: string;
                    description?: string;
                    buttons?: {
                        kind?: string;
                        text?: string;
                        url?: string | undefined | undefined;
                        imageUrl?: string | undefined | undefined;
                        linkUrl?: string | undefined | undefined;
                        color?: string | undefined | undefined;
                        fillColor?: string | undefined | undefined;
                        textColor?: string | undefined | undefined;
                        height?: number | undefined | undefined;
                        width?: number | undefined | undefined;
                        hoverState?: {
                            kind?: string;
                            color?: string | undefined | undefined;
                            fillColor?: string | undefined | undefined;
                            text?: string | undefined | undefined;
                            textColor?: string | undefined | undefined;
                            imageUrl?: string | undefined | undefined;
                            height?: number | undefined | undefined;
                            width?: number | undefined | undefined;
                        } | undefined;
                    }[];
                    styles?: {
                        backgroundColor?: string | undefined | undefined;
                        headerColor?: string | undefined | undefined;
                    } | undefined;
                }): ButtonWidget;
                fromPartial(object: {
                    id?: string;
                    kind?: string;
                    shortName?: string;
                    description?: string;
                    buttons?: {
                        kind?: string;
                        text?: string;
                        url?: string | undefined | undefined;
                        imageUrl?: string | undefined | undefined;
                        linkUrl?: string | undefined | undefined;
                        color?: string | undefined | undefined;
                        fillColor?: string | undefined | undefined;
                        textColor?: string | undefined | undefined;
                        height?: number | undefined | undefined;
                        width?: number | undefined | undefined;
                        hoverState?: {
                            kind?: string;
                            color?: string | undefined | undefined;
                            fillColor?: string | undefined | undefined;
                            text?: string | undefined | undefined;
                            textColor?: string | undefined | undefined;
                            imageUrl?: string | undefined | undefined;
                            height?: number | undefined | undefined;
                            width?: number | undefined | undefined;
                        } | undefined;
                    }[];
                    styles?: {
                        backgroundColor?: string | undefined | undefined;
                        headerColor?: string | undefined | undefined;
                    } | undefined;
                }): ButtonWidget;
            };
            readonly responseStream: false;
            readonly options: {
                readonly _unknownFields: {
                    readonly 480010: readonly [Uint8Array<ArrayBuffer>, Uint8Array<ArrayBuffer>, Uint8Array<ArrayBuffer>, Uint8Array<ArrayBuffer>];
                };
            };
        };
        /**
         * Add an image widget to a subreddit.
         *
         * @see {@link https://www.reddit.com/dev/api#POST_api_widget}
         */
        readonly addImageWidget: {
            readonly name: "AddImageWidget";
            readonly requestType: {
                $type: "devvit.plugin.redditapi.widgets.AddImageWidgetRequest";
                encode(message: AddImageWidgetRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): AddImageWidgetRequest;
                fromJSON(object: any): AddImageWidgetRequest;
                toJSON(message: AddImageWidgetRequest): unknown;
                create(base?: {
                    subreddit?: string;
                    data?: {
                        url?: string;
                        linkUrl?: string;
                        height?: number;
                        width?: number;
                    }[];
                    shortName?: string;
                    styles?: {
                        backgroundColor?: string | undefined | undefined;
                        headerColor?: string | undefined | undefined;
                    } | undefined;
                }): AddImageWidgetRequest;
                fromPartial(object: {
                    subreddit?: string;
                    data?: {
                        url?: string;
                        linkUrl?: string;
                        height?: number;
                        width?: number;
                    }[];
                    shortName?: string;
                    styles?: {
                        backgroundColor?: string | undefined | undefined;
                        headerColor?: string | undefined | undefined;
                    } | undefined;
                }): AddImageWidgetRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.plugin.redditapi.widgets.ImageWidget";
                encode(message: ImageWidget, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): ImageWidget;
                fromJSON(object: any): ImageWidget;
                toJSON(message: ImageWidget): unknown;
                create(base?: {
                    id?: string;
                    kind?: string;
                    data?: {
                        url?: string;
                        linkUrl?: string;
                        height?: number;
                        width?: number;
                    }[];
                    shortName?: string;
                    styles?: {
                        backgroundColor?: string | undefined | undefined;
                        headerColor?: string | undefined | undefined;
                    } | undefined;
                    subreddit?: string | undefined | undefined;
                }): ImageWidget;
                fromPartial(object: {
                    id?: string;
                    kind?: string;
                    data?: {
                        url?: string;
                        linkUrl?: string;
                        height?: number;
                        width?: number;
                    }[];
                    shortName?: string;
                    styles?: {
                        backgroundColor?: string | undefined | undefined;
                        headerColor?: string | undefined | undefined;
                    } | undefined;
                    subreddit?: string | undefined | undefined;
                }): ImageWidget;
            };
            readonly responseStream: false;
            readonly options: {
                readonly _unknownFields: {
                    readonly 480010: readonly [Uint8Array<ArrayBuffer>, Uint8Array<ArrayBuffer>, Uint8Array<ArrayBuffer>, Uint8Array<ArrayBuffer>];
                };
            };
        };
        /**
         * Add a calendar widget to a subreddit.
         *
         * @see {@link https://www.reddit.com/dev/api#POST_api_widget}
         */
        readonly addCalendarWidget: {
            readonly name: "AddCalendarWidget";
            readonly requestType: {
                $type: "devvit.plugin.redditapi.widgets.AddCalendarWidgetRequest";
                encode(message: AddCalendarWidgetRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): AddCalendarWidgetRequest;
                fromJSON(object: any): AddCalendarWidgetRequest;
                toJSON(message: AddCalendarWidgetRequest): unknown;
                create(base?: {
                    subreddit?: string;
                    configuration?: {
                        numEvents?: number;
                        showDate?: boolean;
                        showDescription?: boolean;
                        showLocation?: boolean;
                        showTime?: boolean;
                        showTitle?: boolean;
                    } | undefined;
                    googleCalendarId?: string;
                    requiresSync?: boolean;
                    shortName?: string;
                    styles?: {
                        backgroundColor?: string | undefined | undefined;
                        headerColor?: string | undefined | undefined;
                    } | undefined;
                }): AddCalendarWidgetRequest;
                fromPartial(object: {
                    subreddit?: string;
                    configuration?: {
                        numEvents?: number;
                        showDate?: boolean;
                        showDescription?: boolean;
                        showLocation?: boolean;
                        showTime?: boolean;
                        showTitle?: boolean;
                    } | undefined;
                    googleCalendarId?: string;
                    requiresSync?: boolean;
                    shortName?: string;
                    styles?: {
                        backgroundColor?: string | undefined | undefined;
                        headerColor?: string | undefined | undefined;
                    } | undefined;
                }): AddCalendarWidgetRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.plugin.redditapi.widgets.CalendarWidget";
                encode(message: CalendarWidget, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): CalendarWidget;
                fromJSON(object: any): CalendarWidget;
                toJSON(message: CalendarWidget): unknown;
                create(base?: {
                    id?: string;
                    kind?: string;
                    configuration?: {
                        numEvents?: number;
                        showDate?: boolean;
                        showDescription?: boolean;
                        showLocation?: boolean;
                        showTime?: boolean;
                        showTitle?: boolean;
                    } | undefined;
                    googleCalendarId?: string;
                    requiresSync?: boolean;
                    shortName?: string;
                    styles?: {
                        backgroundColor?: string | undefined | undefined;
                        headerColor?: string | undefined | undefined;
                    } | undefined;
                }): CalendarWidget;
                fromPartial(object: {
                    id?: string;
                    kind?: string;
                    configuration?: {
                        numEvents?: number;
                        showDate?: boolean;
                        showDescription?: boolean;
                        showLocation?: boolean;
                        showTime?: boolean;
                        showTitle?: boolean;
                    } | undefined;
                    googleCalendarId?: string;
                    requiresSync?: boolean;
                    shortName?: string;
                    styles?: {
                        backgroundColor?: string | undefined | undefined;
                        headerColor?: string | undefined | undefined;
                    } | undefined;
                }): CalendarWidget;
            };
            readonly responseStream: false;
            readonly options: {
                readonly _unknownFields: {
                    readonly 480010: readonly [Uint8Array<ArrayBuffer>, Uint8Array<ArrayBuffer>, Uint8Array<ArrayBuffer>, Uint8Array<ArrayBuffer>];
                };
            };
        };
        /**
         * Add a text widget to a subreddit.
         *
         * @see {@link https://www.reddit.com/dev/api#POST_api_widget}
         */
        readonly addTextAreaWidget: {
            readonly name: "AddTextAreaWidget";
            readonly requestType: {
                $type: "devvit.plugin.redditapi.widgets.AddTextAreaWidgetRequest";
                encode(message: AddTextAreaWidgetRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): AddTextAreaWidgetRequest;
                fromJSON(object: any): AddTextAreaWidgetRequest;
                toJSON(message: AddTextAreaWidgetRequest): unknown;
                create(base?: {
                    subreddit?: string;
                    shortName?: string;
                    text?: string;
                    styles?: {
                        backgroundColor?: string | undefined | undefined;
                        headerColor?: string | undefined | undefined;
                    } | undefined;
                }): AddTextAreaWidgetRequest;
                fromPartial(object: {
                    subreddit?: string;
                    shortName?: string;
                    text?: string;
                    styles?: {
                        backgroundColor?: string | undefined | undefined;
                        headerColor?: string | undefined | undefined;
                    } | undefined;
                }): AddTextAreaWidgetRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.plugin.redditapi.widgets.TextAreaWidget";
                encode(message: TextAreaWidget, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): TextAreaWidget;
                fromJSON(object: any): TextAreaWidget;
                toJSON(message: TextAreaWidget): unknown;
                create(base?: {
                    id?: string;
                    kind?: string;
                    shortName?: string;
                    text?: string;
                    styles?: {
                        backgroundColor?: string | undefined | undefined;
                        headerColor?: string | undefined | undefined;
                    } | undefined;
                }): TextAreaWidget;
                fromPartial(object: {
                    id?: string;
                    kind?: string;
                    shortName?: string;
                    text?: string;
                    styles?: {
                        backgroundColor?: string | undefined | undefined;
                        headerColor?: string | undefined | undefined;
                    } | undefined;
                }): TextAreaWidget;
            };
            readonly responseStream: false;
            readonly options: {
                readonly _unknownFields: {
                    readonly 480010: readonly [Uint8Array<ArrayBuffer>, Uint8Array<ArrayBuffer>, Uint8Array<ArrayBuffer>, Uint8Array<ArrayBuffer>];
                };
            };
        };
        /**
         * Add a community list widget to a subreddit.
         *
         * @see {@link https://www.reddit.com/dev/api#POST_api_widget}
         */
        readonly addCommunityListWidget: {
            readonly name: "AddCommunityListWidget";
            readonly requestType: {
                $type: "devvit.plugin.redditapi.widgets.AddCommunityListWidgetRequest";
                encode(message: AddCommunityListWidgetRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): AddCommunityListWidgetRequest;
                fromJSON(object: any): AddCommunityListWidgetRequest;
                toJSON(message: AddCommunityListWidgetRequest): unknown;
                create(base?: {
                    subreddit?: string;
                    shortName?: string;
                    data?: string[];
                    styles?: {
                        backgroundColor?: string | undefined | undefined;
                        headerColor?: string | undefined | undefined;
                    } | undefined;
                }): AddCommunityListWidgetRequest;
                fromPartial(object: {
                    subreddit?: string;
                    shortName?: string;
                    data?: string[];
                    styles?: {
                        backgroundColor?: string | undefined | undefined;
                        headerColor?: string | undefined | undefined;
                    } | undefined;
                }): AddCommunityListWidgetRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.plugin.redditapi.widgets.CommunityListWidget";
                encode(message: CommunityListWidget, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): CommunityListWidget;
                fromJSON(object: any): CommunityListWidget;
                toJSON(message: CommunityListWidget): unknown;
                create(base?: {
                    id?: string;
                    kind?: string;
                    shortName?: string;
                    data?: {
                        communityIcon?: string;
                        iconUrl?: string;
                        isNsfw?: boolean;
                        isSubscribed?: boolean;
                        name?: string;
                        prefixedName?: string;
                        primaryColor?: string;
                        subscribers?: number;
                        type?: string;
                    }[];
                    styles?: {
                        backgroundColor?: string | undefined | undefined;
                        headerColor?: string | undefined | undefined;
                    } | undefined;
                }): CommunityListWidget;
                fromPartial(object: {
                    id?: string;
                    kind?: string;
                    shortName?: string;
                    data?: {
                        communityIcon?: string;
                        iconUrl?: string;
                        isNsfw?: boolean;
                        isSubscribed?: boolean;
                        name?: string;
                        prefixedName?: string;
                        primaryColor?: string;
                        subscribers?: number;
                        type?: string;
                    }[];
                    styles?: {
                        backgroundColor?: string | undefined | undefined;
                        headerColor?: string | undefined | undefined;
                    } | undefined;
                }): CommunityListWidget;
            };
            readonly responseStream: false;
            readonly options: {
                readonly _unknownFields: {
                    readonly 480010: readonly [Uint8Array<ArrayBuffer>, Uint8Array<ArrayBuffer>, Uint8Array<ArrayBuffer>, Uint8Array<ArrayBuffer>];
                };
            };
        };
        /**
         * Add a post flair widget to a subreddit.
         *
         * @see {@link https://www.reddit.com/dev/api#POST_api_widget}
         */
        readonly addPostFlairWidget: {
            readonly name: "AddPostFlairWidget";
            readonly requestType: {
                $type: "devvit.plugin.redditapi.widgets.AddPostFlairWidgetRequest";
                encode(message: AddPostFlairWidgetRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): AddPostFlairWidgetRequest;
                fromJSON(object: any): AddPostFlairWidgetRequest;
                toJSON(message: AddPostFlairWidgetRequest): unknown;
                create(base?: {
                    subreddit?: string;
                    display?: string;
                    order?: string[];
                    shortName?: string;
                    styles?: {
                        backgroundColor?: string | undefined | undefined;
                        headerColor?: string | undefined | undefined;
                    } | undefined;
                }): AddPostFlairWidgetRequest;
                fromPartial(object: {
                    subreddit?: string;
                    display?: string;
                    order?: string[];
                    shortName?: string;
                    styles?: {
                        backgroundColor?: string | undefined | undefined;
                        headerColor?: string | undefined | undefined;
                    } | undefined;
                }): AddPostFlairWidgetRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.plugin.redditapi.widgets.PostFlairWidget";
                encode(message: PostFlairWidget, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): PostFlairWidget;
                fromJSON(object: any): PostFlairWidget;
                toJSON(message: PostFlairWidget): unknown;
                create(base?: {
                    id?: string;
                    kind?: string;
                    display?: string;
                    order?: string[];
                    shortName?: string;
                    styles?: {
                        backgroundColor?: string | undefined | undefined;
                        headerColor?: string | undefined | undefined;
                    } | undefined;
                    subreddit?: string | undefined | undefined;
                }): PostFlairWidget;
                fromPartial(object: {
                    id?: string;
                    kind?: string;
                    display?: string;
                    order?: string[];
                    shortName?: string;
                    styles?: {
                        backgroundColor?: string | undefined | undefined;
                        headerColor?: string | undefined | undefined;
                    } | undefined;
                    subreddit?: string | undefined | undefined;
                }): PostFlairWidget;
            };
            readonly responseStream: false;
            readonly options: {
                readonly _unknownFields: {
                    readonly 480010: readonly [Uint8Array<ArrayBuffer>, Uint8Array<ArrayBuffer>, Uint8Array<ArrayBuffer>, Uint8Array<ArrayBuffer>];
                };
            };
        };
        /**
         * Add a custom widget to a subreddit. This is an experimental feature.
         * Custom widgets don't display on mobile devices. Customizations can break at any time
         *
         * @see {@link https://www.reddit.com/dev/api#POST_api_widget}
         */
        readonly addCustomWidget: {
            readonly name: "AddCustomWidget";
            readonly requestType: {
                $type: "devvit.plugin.redditapi.widgets.AddCustomWidgetRequest";
                encode(message: AddCustomWidgetRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): AddCustomWidgetRequest;
                fromJSON(object: any): AddCustomWidgetRequest;
                toJSON(message: AddCustomWidgetRequest): unknown;
                create(base?: {
                    subreddit?: string;
                    shortName?: string;
                    text?: string;
                    height?: number;
                    css?: string;
                    imageData?: {
                        url?: string;
                        linkUrl?: string;
                        height?: number;
                        width?: number;
                    }[];
                    styles?: {
                        backgroundColor?: string | undefined | undefined;
                        headerColor?: string | undefined | undefined;
                    } | undefined;
                }): AddCustomWidgetRequest;
                fromPartial(object: {
                    subreddit?: string;
                    shortName?: string;
                    text?: string;
                    height?: number;
                    css?: string;
                    imageData?: {
                        url?: string;
                        linkUrl?: string;
                        height?: number;
                        width?: number;
                    }[];
                    styles?: {
                        backgroundColor?: string | undefined | undefined;
                        headerColor?: string | undefined | undefined;
                    } | undefined;
                }): AddCustomWidgetRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.plugin.redditapi.widgets.CustomWidget";
                encode(message: CustomWidget, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): CustomWidget;
                fromJSON(object: any): CustomWidget;
                toJSON(message: CustomWidget): unknown;
                create(base?: {
                    id?: string;
                    kind?: string;
                    shortName?: string;
                    text?: string;
                    height?: number;
                    css?: string;
                    imageData?: {
                        url?: string;
                        linkUrl?: string;
                        height?: number;
                        width?: number;
                    }[];
                    styles?: {
                        backgroundColor?: string | undefined | undefined;
                        headerColor?: string | undefined | undefined;
                    } | undefined;
                }): CustomWidget;
                fromPartial(object: {
                    id?: string;
                    kind?: string;
                    shortName?: string;
                    text?: string;
                    height?: number;
                    css?: string;
                    imageData?: {
                        url?: string;
                        linkUrl?: string;
                        height?: number;
                        width?: number;
                    }[];
                    styles?: {
                        backgroundColor?: string | undefined | undefined;
                        headerColor?: string | undefined | undefined;
                    } | undefined;
                }): CustomWidget;
            };
            readonly responseStream: false;
            readonly options: {
                readonly _unknownFields: {
                    readonly 480010: readonly [Uint8Array<ArrayBuffer>, Uint8Array<ArrayBuffer>, Uint8Array<ArrayBuffer>, Uint8Array<ArrayBuffer>];
                };
            };
        };
        /**
         * Delete a widget from a subreddit.
         *
         * @see {@link https://www.reddit.com/dev/api#DELETE_api_widget_\{widget_id\}}
         */
        readonly deleteWidget: {
            readonly name: "DeleteWidget";
            readonly requestType: {
                $type: "devvit.plugin.redditapi.widgets.DeleteWidgetRequest";
                encode(message: DeleteWidgetRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): DeleteWidgetRequest;
                fromJSON(object: any): DeleteWidgetRequest;
                toJSON(message: DeleteWidgetRequest): unknown;
                create(base?: {
                    id?: string;
                    subreddit?: string;
                }): DeleteWidgetRequest;
                fromPartial(object: {
                    id?: string;
                    subreddit?: string;
                }): DeleteWidgetRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "google.protobuf.Empty";
                encode(_: Empty, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): Empty;
                fromJSON(_: any): Empty;
                toJSON(_: Empty): unknown;
                create(base?: {}): Empty;
                fromPartial(_: {}): Empty;
            };
            readonly responseStream: false;
            readonly options: {
                readonly _unknownFields: {
                    readonly 480010: readonly [Uint8Array<ArrayBuffer>, Uint8Array<ArrayBuffer>];
                };
            };
        };
        /**
         * Update a button widget on a subreddit.
         *
         * @see {@link https://www.reddit.com/dev/api#PUT_api_widget_\{widget_id\}}
         */
        readonly updateButtonWidget: {
            readonly name: "UpdateButtonWidget";
            readonly requestType: {
                $type: "devvit.plugin.redditapi.widgets.UpdateButtonWidgetRequest";
                encode(message: UpdateButtonWidgetRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): UpdateButtonWidgetRequest;
                fromJSON(object: any): UpdateButtonWidgetRequest;
                toJSON(message: UpdateButtonWidgetRequest): unknown;
                create(base?: {
                    subreddit?: string;
                    id?: string;
                    shortName?: string;
                    description?: string;
                    buttons?: {
                        kind?: string;
                        text?: string;
                        url?: string | undefined | undefined;
                        imageUrl?: string | undefined | undefined;
                        linkUrl?: string | undefined | undefined;
                        color?: string | undefined | undefined;
                        fillColor?: string | undefined | undefined;
                        textColor?: string | undefined | undefined;
                        height?: number | undefined | undefined;
                        width?: number | undefined | undefined;
                        hoverState?: {
                            kind?: string;
                            color?: string | undefined | undefined;
                            fillColor?: string | undefined | undefined;
                            text?: string | undefined | undefined;
                            textColor?: string | undefined | undefined;
                            imageUrl?: string | undefined | undefined;
                            height?: number | undefined | undefined;
                            width?: number | undefined | undefined;
                        } | undefined;
                    }[];
                    styles?: {
                        backgroundColor?: string | undefined | undefined;
                        headerColor?: string | undefined | undefined;
                    } | undefined;
                }): UpdateButtonWidgetRequest;
                fromPartial(object: {
                    subreddit?: string;
                    id?: string;
                    shortName?: string;
                    description?: string;
                    buttons?: {
                        kind?: string;
                        text?: string;
                        url?: string | undefined | undefined;
                        imageUrl?: string | undefined | undefined;
                        linkUrl?: string | undefined | undefined;
                        color?: string | undefined | undefined;
                        fillColor?: string | undefined | undefined;
                        textColor?: string | undefined | undefined;
                        height?: number | undefined | undefined;
                        width?: number | undefined | undefined;
                        hoverState?: {
                            kind?: string;
                            color?: string | undefined | undefined;
                            fillColor?: string | undefined | undefined;
                            text?: string | undefined | undefined;
                            textColor?: string | undefined | undefined;
                            imageUrl?: string | undefined | undefined;
                            height?: number | undefined | undefined;
                            width?: number | undefined | undefined;
                        } | undefined;
                    }[];
                    styles?: {
                        backgroundColor?: string | undefined | undefined;
                        headerColor?: string | undefined | undefined;
                    } | undefined;
                }): UpdateButtonWidgetRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.plugin.redditapi.widgets.ButtonWidget";
                encode(message: ButtonWidget, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): ButtonWidget;
                fromJSON(object: any): ButtonWidget;
                toJSON(message: ButtonWidget): unknown;
                create(base?: {
                    id?: string;
                    kind?: string;
                    shortName?: string;
                    description?: string;
                    buttons?: {
                        kind?: string;
                        text?: string;
                        url?: string | undefined | undefined;
                        imageUrl?: string | undefined | undefined;
                        linkUrl?: string | undefined | undefined;
                        color?: string | undefined | undefined;
                        fillColor?: string | undefined | undefined;
                        textColor?: string | undefined | undefined;
                        height?: number | undefined | undefined;
                        width?: number | undefined | undefined;
                        hoverState?: {
                            kind?: string;
                            color?: string | undefined | undefined;
                            fillColor?: string | undefined | undefined;
                            text?: string | undefined | undefined;
                            textColor?: string | undefined | undefined;
                            imageUrl?: string | undefined | undefined;
                            height?: number | undefined | undefined;
                            width?: number | undefined | undefined;
                        } | undefined;
                    }[];
                    styles?: {
                        backgroundColor?: string | undefined | undefined;
                        headerColor?: string | undefined | undefined;
                    } | undefined;
                }): ButtonWidget;
                fromPartial(object: {
                    id?: string;
                    kind?: string;
                    shortName?: string;
                    description?: string;
                    buttons?: {
                        kind?: string;
                        text?: string;
                        url?: string | undefined | undefined;
                        imageUrl?: string | undefined | undefined;
                        linkUrl?: string | undefined | undefined;
                        color?: string | undefined | undefined;
                        fillColor?: string | undefined | undefined;
                        textColor?: string | undefined | undefined;
                        height?: number | undefined | undefined;
                        width?: number | undefined | undefined;
                        hoverState?: {
                            kind?: string;
                            color?: string | undefined | undefined;
                            fillColor?: string | undefined | undefined;
                            text?: string | undefined | undefined;
                            textColor?: string | undefined | undefined;
                            imageUrl?: string | undefined | undefined;
                            height?: number | undefined | undefined;
                            width?: number | undefined | undefined;
                        } | undefined;
                    }[];
                    styles?: {
                        backgroundColor?: string | undefined | undefined;
                        headerColor?: string | undefined | undefined;
                    } | undefined;
                }): ButtonWidget;
            };
            readonly responseStream: false;
            readonly options: {
                readonly _unknownFields: {
                    readonly 480010: readonly [Uint8Array<ArrayBuffer>, Uint8Array<ArrayBuffer>, Uint8Array<ArrayBuffer>, Uint8Array<ArrayBuffer>];
                };
            };
        };
        /**
         * Update an image widget on a subreddit.
         *
         * @see {@link https://www.reddit.com/dev/api#PUT_api_widget_\{widget_id\}}
         */
        readonly updateImageWidget: {
            readonly name: "UpdateImageWidget";
            readonly requestType: {
                $type: "devvit.plugin.redditapi.widgets.UpdateImageWidgetRequest";
                encode(message: UpdateImageWidgetRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): UpdateImageWidgetRequest;
                fromJSON(object: any): UpdateImageWidgetRequest;
                toJSON(message: UpdateImageWidgetRequest): unknown;
                create(base?: {
                    subreddit?: string;
                    id?: string;
                    data?: {
                        url?: string;
                        linkUrl?: string;
                        height?: number;
                        width?: number;
                    }[];
                    shortName?: string;
                    styles?: {
                        backgroundColor?: string | undefined | undefined;
                        headerColor?: string | undefined | undefined;
                    } | undefined;
                }): UpdateImageWidgetRequest;
                fromPartial(object: {
                    subreddit?: string;
                    id?: string;
                    data?: {
                        url?: string;
                        linkUrl?: string;
                        height?: number;
                        width?: number;
                    }[];
                    shortName?: string;
                    styles?: {
                        backgroundColor?: string | undefined | undefined;
                        headerColor?: string | undefined | undefined;
                    } | undefined;
                }): UpdateImageWidgetRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.plugin.redditapi.widgets.ImageWidget";
                encode(message: ImageWidget, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): ImageWidget;
                fromJSON(object: any): ImageWidget;
                toJSON(message: ImageWidget): unknown;
                create(base?: {
                    id?: string;
                    kind?: string;
                    data?: {
                        url?: string;
                        linkUrl?: string;
                        height?: number;
                        width?: number;
                    }[];
                    shortName?: string;
                    styles?: {
                        backgroundColor?: string | undefined | undefined;
                        headerColor?: string | undefined | undefined;
                    } | undefined;
                    subreddit?: string | undefined | undefined;
                }): ImageWidget;
                fromPartial(object: {
                    id?: string;
                    kind?: string;
                    data?: {
                        url?: string;
                        linkUrl?: string;
                        height?: number;
                        width?: number;
                    }[];
                    shortName?: string;
                    styles?: {
                        backgroundColor?: string | undefined | undefined;
                        headerColor?: string | undefined | undefined;
                    } | undefined;
                    subreddit?: string | undefined | undefined;
                }): ImageWidget;
            };
            readonly responseStream: false;
            readonly options: {
                readonly _unknownFields: {
                    readonly 480010: readonly [Uint8Array<ArrayBuffer>, Uint8Array<ArrayBuffer>, Uint8Array<ArrayBuffer>, Uint8Array<ArrayBuffer>];
                };
            };
        };
        /**
         * Update a calendar widget on a subreddit.
         *
         * @see {@link https://www.reddit.com/dev/api#PUT_api_widget_\{widget_id\}}
         */
        readonly updateCalendarWidget: {
            readonly name: "UpdateCalendarWidget";
            readonly requestType: {
                $type: "devvit.plugin.redditapi.widgets.UpdateCalendarWidgetRequest";
                encode(message: UpdateCalendarWidgetRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): UpdateCalendarWidgetRequest;
                fromJSON(object: any): UpdateCalendarWidgetRequest;
                toJSON(message: UpdateCalendarWidgetRequest): unknown;
                create(base?: {
                    subreddit?: string;
                    id?: string;
                    configuration?: {
                        numEvents?: number;
                        showDate?: boolean;
                        showDescription?: boolean;
                        showLocation?: boolean;
                        showTime?: boolean;
                        showTitle?: boolean;
                    } | undefined;
                    googleCalendarId?: string;
                    requiresSync?: boolean;
                    shortName?: string;
                    styles?: {
                        backgroundColor?: string | undefined | undefined;
                        headerColor?: string | undefined | undefined;
                    } | undefined;
                }): UpdateCalendarWidgetRequest;
                fromPartial(object: {
                    subreddit?: string;
                    id?: string;
                    configuration?: {
                        numEvents?: number;
                        showDate?: boolean;
                        showDescription?: boolean;
                        showLocation?: boolean;
                        showTime?: boolean;
                        showTitle?: boolean;
                    } | undefined;
                    googleCalendarId?: string;
                    requiresSync?: boolean;
                    shortName?: string;
                    styles?: {
                        backgroundColor?: string | undefined | undefined;
                        headerColor?: string | undefined | undefined;
                    } | undefined;
                }): UpdateCalendarWidgetRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.plugin.redditapi.widgets.CalendarWidget";
                encode(message: CalendarWidget, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): CalendarWidget;
                fromJSON(object: any): CalendarWidget;
                toJSON(message: CalendarWidget): unknown;
                create(base?: {
                    id?: string;
                    kind?: string;
                    configuration?: {
                        numEvents?: number;
                        showDate?: boolean;
                        showDescription?: boolean;
                        showLocation?: boolean;
                        showTime?: boolean;
                        showTitle?: boolean;
                    } | undefined;
                    googleCalendarId?: string;
                    requiresSync?: boolean;
                    shortName?: string;
                    styles?: {
                        backgroundColor?: string | undefined | undefined;
                        headerColor?: string | undefined | undefined;
                    } | undefined;
                }): CalendarWidget;
                fromPartial(object: {
                    id?: string;
                    kind?: string;
                    configuration?: {
                        numEvents?: number;
                        showDate?: boolean;
                        showDescription?: boolean;
                        showLocation?: boolean;
                        showTime?: boolean;
                        showTitle?: boolean;
                    } | undefined;
                    googleCalendarId?: string;
                    requiresSync?: boolean;
                    shortName?: string;
                    styles?: {
                        backgroundColor?: string | undefined | undefined;
                        headerColor?: string | undefined | undefined;
                    } | undefined;
                }): CalendarWidget;
            };
            readonly responseStream: false;
            readonly options: {
                readonly _unknownFields: {
                    readonly 480010: readonly [Uint8Array<ArrayBuffer>, Uint8Array<ArrayBuffer>, Uint8Array<ArrayBuffer>, Uint8Array<ArrayBuffer>];
                };
            };
        };
        /**
         * Update a text widget on a subreddit.
         *
         * @see {@link https://www.reddit.com/dev/api#PUT_api_widget_\{widget_id\}}
         */
        readonly updateTextAreaWidget: {
            readonly name: "UpdateTextAreaWidget";
            readonly requestType: {
                $type: "devvit.plugin.redditapi.widgets.UpdateTextAreaWidgetRequest";
                encode(message: UpdateTextAreaWidgetRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): UpdateTextAreaWidgetRequest;
                fromJSON(object: any): UpdateTextAreaWidgetRequest;
                toJSON(message: UpdateTextAreaWidgetRequest): unknown;
                create(base?: {
                    subreddit?: string;
                    id?: string;
                    shortName?: string;
                    text?: string;
                    styles?: {
                        backgroundColor?: string | undefined | undefined;
                        headerColor?: string | undefined | undefined;
                    } | undefined;
                }): UpdateTextAreaWidgetRequest;
                fromPartial(object: {
                    subreddit?: string;
                    id?: string;
                    shortName?: string;
                    text?: string;
                    styles?: {
                        backgroundColor?: string | undefined | undefined;
                        headerColor?: string | undefined | undefined;
                    } | undefined;
                }): UpdateTextAreaWidgetRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.plugin.redditapi.widgets.TextAreaWidget";
                encode(message: TextAreaWidget, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): TextAreaWidget;
                fromJSON(object: any): TextAreaWidget;
                toJSON(message: TextAreaWidget): unknown;
                create(base?: {
                    id?: string;
                    kind?: string;
                    shortName?: string;
                    text?: string;
                    styles?: {
                        backgroundColor?: string | undefined | undefined;
                        headerColor?: string | undefined | undefined;
                    } | undefined;
                }): TextAreaWidget;
                fromPartial(object: {
                    id?: string;
                    kind?: string;
                    shortName?: string;
                    text?: string;
                    styles?: {
                        backgroundColor?: string | undefined | undefined;
                        headerColor?: string | undefined | undefined;
                    } | undefined;
                }): TextAreaWidget;
            };
            readonly responseStream: false;
            readonly options: {
                readonly _unknownFields: {
                    readonly 480010: readonly [Uint8Array<ArrayBuffer>, Uint8Array<ArrayBuffer>, Uint8Array<ArrayBuffer>, Uint8Array<ArrayBuffer>];
                };
            };
        };
        /**
         * Update a community list widget on a subreddit.
         *
         * @see {@link https://www.reddit.com/dev/api#PUT_api_widget_\{widget_id\}}
         */
        readonly updateCommunityListWidget: {
            readonly name: "UpdateCommunityListWidget";
            readonly requestType: {
                $type: "devvit.plugin.redditapi.widgets.UpdateCommunityListWidgetRequest";
                encode(message: UpdateCommunityListWidgetRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): UpdateCommunityListWidgetRequest;
                fromJSON(object: any): UpdateCommunityListWidgetRequest;
                toJSON(message: UpdateCommunityListWidgetRequest): unknown;
                create(base?: {
                    subreddit?: string;
                    id?: string;
                    shortName?: string;
                    data?: string[];
                    styles?: {
                        backgroundColor?: string | undefined | undefined;
                        headerColor?: string | undefined | undefined;
                    } | undefined;
                }): UpdateCommunityListWidgetRequest;
                fromPartial(object: {
                    subreddit?: string;
                    id?: string;
                    shortName?: string;
                    data?: string[];
                    styles?: {
                        backgroundColor?: string | undefined | undefined;
                        headerColor?: string | undefined | undefined;
                    } | undefined;
                }): UpdateCommunityListWidgetRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.plugin.redditapi.widgets.UpdateCommunityListWidgetResponse";
                encode(message: UpdateCommunityListWidgetResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): UpdateCommunityListWidgetResponse;
                fromJSON(object: any): UpdateCommunityListWidgetResponse;
                toJSON(message: UpdateCommunityListWidgetResponse): unknown;
                create(base?: {
                    kind?: string;
                    shortName?: string;
                    data?: string[];
                    styles?: {
                        backgroundColor?: string | undefined | undefined;
                        headerColor?: string | undefined | undefined;
                    } | undefined;
                }): UpdateCommunityListWidgetResponse;
                fromPartial(object: {
                    kind?: string;
                    shortName?: string;
                    data?: string[];
                    styles?: {
                        backgroundColor?: string | undefined | undefined;
                        headerColor?: string | undefined | undefined;
                    } | undefined;
                }): UpdateCommunityListWidgetResponse;
            };
            readonly responseStream: false;
            readonly options: {
                readonly _unknownFields: {
                    readonly 480010: readonly [Uint8Array<ArrayBuffer>, Uint8Array<ArrayBuffer>, Uint8Array<ArrayBuffer>, Uint8Array<ArrayBuffer>];
                };
            };
        };
        /**
         * Update a post flair widget on a subreddit.
         *
         * @see {@link https://www.reddit.com/dev/api#PUT_api_widget_\{widget_id\}}
         */
        readonly updatePostFlairWidget: {
            readonly name: "UpdatePostFlairWidget";
            readonly requestType: {
                $type: "devvit.plugin.redditapi.widgets.UpdatePostFlairWidgetRequest";
                encode(message: UpdatePostFlairWidgetRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): UpdatePostFlairWidgetRequest;
                fromJSON(object: any): UpdatePostFlairWidgetRequest;
                toJSON(message: UpdatePostFlairWidgetRequest): unknown;
                create(base?: {
                    subreddit?: string;
                    id?: string;
                    display?: string;
                    order?: string[];
                    shortName?: string;
                    styles?: {
                        backgroundColor?: string | undefined | undefined;
                        headerColor?: string | undefined | undefined;
                    } | undefined;
                }): UpdatePostFlairWidgetRequest;
                fromPartial(object: {
                    subreddit?: string;
                    id?: string;
                    display?: string;
                    order?: string[];
                    shortName?: string;
                    styles?: {
                        backgroundColor?: string | undefined | undefined;
                        headerColor?: string | undefined | undefined;
                    } | undefined;
                }): UpdatePostFlairWidgetRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.plugin.redditapi.widgets.PostFlairWidget";
                encode(message: PostFlairWidget, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): PostFlairWidget;
                fromJSON(object: any): PostFlairWidget;
                toJSON(message: PostFlairWidget): unknown;
                create(base?: {
                    id?: string;
                    kind?: string;
                    display?: string;
                    order?: string[];
                    shortName?: string;
                    styles?: {
                        backgroundColor?: string | undefined | undefined;
                        headerColor?: string | undefined | undefined;
                    } | undefined;
                    subreddit?: string | undefined | undefined;
                }): PostFlairWidget;
                fromPartial(object: {
                    id?: string;
                    kind?: string;
                    display?: string;
                    order?: string[];
                    shortName?: string;
                    styles?: {
                        backgroundColor?: string | undefined | undefined;
                        headerColor?: string | undefined | undefined;
                    } | undefined;
                    subreddit?: string | undefined | undefined;
                }): PostFlairWidget;
            };
            readonly responseStream: false;
            readonly options: {
                readonly _unknownFields: {
                    readonly 480010: readonly [Uint8Array<ArrayBuffer>, Uint8Array<ArrayBuffer>, Uint8Array<ArrayBuffer>, Uint8Array<ArrayBuffer>];
                };
            };
        };
        /**
         * Update a custom widget on a subreddit.
         *
         * @see {@link https://www.reddit.com/dev/api#PUT_api_widget_\{widget_id\}}
         */
        readonly updateCustomWidget: {
            readonly name: "UpdateCustomWidget";
            readonly requestType: {
                $type: "devvit.plugin.redditapi.widgets.UpdateCustomWidgetRequest";
                encode(message: UpdateCustomWidgetRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): UpdateCustomWidgetRequest;
                fromJSON(object: any): UpdateCustomWidgetRequest;
                toJSON(message: UpdateCustomWidgetRequest): unknown;
                create(base?: {
                    subreddit?: string;
                    id?: string;
                    shortName?: string;
                    text?: string;
                    height?: number;
                    css?: string;
                    imageData?: {
                        url?: string;
                        linkUrl?: string;
                        height?: number;
                        width?: number;
                    }[];
                    styles?: {
                        backgroundColor?: string | undefined | undefined;
                        headerColor?: string | undefined | undefined;
                    } | undefined;
                }): UpdateCustomWidgetRequest;
                fromPartial(object: {
                    subreddit?: string;
                    id?: string;
                    shortName?: string;
                    text?: string;
                    height?: number;
                    css?: string;
                    imageData?: {
                        url?: string;
                        linkUrl?: string;
                        height?: number;
                        width?: number;
                    }[];
                    styles?: {
                        backgroundColor?: string | undefined | undefined;
                        headerColor?: string | undefined | undefined;
                    } | undefined;
                }): UpdateCustomWidgetRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.plugin.redditapi.widgets.CustomWidget";
                encode(message: CustomWidget, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): CustomWidget;
                fromJSON(object: any): CustomWidget;
                toJSON(message: CustomWidget): unknown;
                create(base?: {
                    id?: string;
                    kind?: string;
                    shortName?: string;
                    text?: string;
                    height?: number;
                    css?: string;
                    imageData?: {
                        url?: string;
                        linkUrl?: string;
                        height?: number;
                        width?: number;
                    }[];
                    styles?: {
                        backgroundColor?: string | undefined | undefined;
                        headerColor?: string | undefined | undefined;
                    } | undefined;
                }): CustomWidget;
                fromPartial(object: {
                    id?: string;
                    kind?: string;
                    shortName?: string;
                    text?: string;
                    height?: number;
                    css?: string;
                    imageData?: {
                        url?: string;
                        linkUrl?: string;
                        height?: number;
                        width?: number;
                    }[];
                    styles?: {
                        backgroundColor?: string | undefined | undefined;
                        headerColor?: string | undefined | undefined;
                    } | undefined;
                }): CustomWidget;
            };
            readonly responseStream: false;
            readonly options: {
                readonly _unknownFields: {
                    readonly 480010: readonly [Uint8Array<ArrayBuffer>, Uint8Array<ArrayBuffer>, Uint8Array<ArrayBuffer>, Uint8Array<ArrayBuffer>];
                };
            };
        };
        /**
         * Get an S3 upload lease for a widget image. This is used to upload images for image widgets.
         *
         * @see {@link https://www.reddit.com/dev/api#POST_api_widget_image_upload_s3}
         */
        readonly getWidgetImageUploadLease: {
            readonly name: "GetWidgetImageUploadLease";
            readonly requestType: {
                $type: "devvit.plugin.redditapi.widgets.GetWidgetImageUploadLeaseRequest";
                encode(message: GetWidgetImageUploadLeaseRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): GetWidgetImageUploadLeaseRequest;
                fromJSON(object: any): GetWidgetImageUploadLeaseRequest;
                toJSON(message: GetWidgetImageUploadLeaseRequest): unknown;
                create(base?: {
                    subreddit?: string;
                    filepath?: string;
                    mimetype?: string;
                }): GetWidgetImageUploadLeaseRequest;
                fromPartial(object: {
                    subreddit?: string;
                    filepath?: string;
                    mimetype?: string;
                }): GetWidgetImageUploadLeaseRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.plugin.redditapi.widgets.GetWidgetImageUploadLeaseResponse";
                encode(message: GetWidgetImageUploadLeaseResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): GetWidgetImageUploadLeaseResponse;
                fromJSON(object: any): GetWidgetImageUploadLeaseResponse;
                toJSON(message: GetWidgetImageUploadLeaseResponse): unknown;
                create(base?: {
                    s3UploadLease?: {
                        action?: string;
                        fields?: {
                            name?: string;
                            value?: string;
                        }[];
                    } | undefined;
                    websocketUrl?: string;
                }): GetWidgetImageUploadLeaseResponse;
                fromPartial(object: {
                    s3UploadLease?: {
                        action?: string;
                        fields?: {
                            name?: string;
                            value?: string;
                        }[];
                    } | undefined;
                    websocketUrl?: string;
                }): GetWidgetImageUploadLeaseResponse;
            };
            readonly responseStream: false;
            readonly options: {
                readonly _unknownFields: {
                    readonly 480010: readonly [Uint8Array<ArrayBuffer>, Uint8Array<ArrayBuffer>, Uint8Array<ArrayBuffer>];
                };
            };
        };
        /**
         * Update the order of widgets on a subreddit.
         *
         * @see {@link https://www.reddit.com/dev/api#PATCH_api_widget_order_\{section\}}
         */
        readonly orderWidgets: {
            readonly name: "OrderWidgets";
            readonly requestType: {
                $type: "devvit.plugin.redditapi.widgets.OrderWidgetsRequest";
                encode(message: OrderWidgetsRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): OrderWidgetsRequest;
                fromJSON(object: any): OrderWidgetsRequest;
                toJSON(message: OrderWidgetsRequest): unknown;
                create(base?: {
                    subreddit?: string;
                    order?: string[];
                }): OrderWidgetsRequest;
                fromPartial(object: {
                    subreddit?: string;
                    order?: string[];
                }): OrderWidgetsRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "google.protobuf.Empty";
                encode(_: Empty, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): Empty;
                fromJSON(_: any): Empty;
                toJSON(_: Empty): unknown;
                create(base?: {}): Empty;
                fromPartial(_: {}): Empty;
            };
            readonly responseStream: false;
            readonly options: {
                readonly _unknownFields: {
                    readonly 480010: readonly [Uint8Array<ArrayBuffer>, Uint8Array<ArrayBuffer>, Uint8Array<ArrayBuffer>];
                };
            };
        };
        /**
         * Get a list of widgets on a subreddit.
         *
         * @see {@link https://www.reddit.com/dev/api#GET_api_widgets}
         */
        readonly getWidgets: {
            readonly name: "GetWidgets";
            readonly requestType: {
                $type: "devvit.plugin.redditapi.widgets.GetWidgetsRequest";
                encode(message: GetWidgetsRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): GetWidgetsRequest;
                fromJSON(object: any): GetWidgetsRequest;
                toJSON(message: GetWidgetsRequest): unknown;
                create(base?: {
                    subreddit?: string;
                    progressiveImages?: boolean | undefined | undefined;
                }): GetWidgetsRequest;
                fromPartial(object: {
                    subreddit?: string;
                    progressiveImages?: boolean | undefined | undefined;
                }): GetWidgetsRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.plugin.redditapi.widgets.GetWidgetsResponse";
                encode(message: GetWidgetsResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): GetWidgetsResponse;
                fromJSON(object: any): GetWidgetsResponse;
                toJSON(message: GetWidgetsResponse): unknown;
                create(base?: {
                    layout?: {
                        idCardWidget?: string;
                        topbar?: {
                            order?: string[];
                        } | undefined;
                        sidebar?: {
                            order?: string[];
                        } | undefined;
                        moderatorWidget?: string;
                    } | undefined;
                    items?: {
                        [x: string]: {
                            id?: string;
                            kind?: string;
                            styles?: {
                                backgroundColor?: string | undefined | undefined;
                                headerColor?: string | undefined | undefined;
                            } | undefined;
                            shortName?: string;
                            description?: string | undefined | undefined;
                            data?: {
                                url?: string | undefined | undefined;
                                linkUrl?: string | undefined | undefined;
                                height?: number | undefined | undefined;
                                width?: number | undefined | undefined;
                                iconUrl?: string | undefined | undefined;
                                name?: string | undefined | undefined;
                                prefixedName?: string | undefined | undefined;
                                isSubscribed?: boolean | undefined | undefined;
                                type?: string | undefined | undefined;
                                subscribers?: number | undefined | undefined;
                                communityIcon?: string | undefined | undefined;
                                isNsfw?: boolean | undefined | undefined;
                                text?: string | undefined | undefined;
                                children?: {
                                    text?: string | undefined | undefined;
                                    url?: string | undefined | undefined;
                                    children?: /*elided*/ any[];
                                }[];
                            }[];
                            buttons?: {
                                kind?: string;
                                text?: string;
                                url?: string | undefined | undefined;
                                imageUrl?: string | undefined | undefined;
                                linkUrl?: string | undefined | undefined;
                                color?: string | undefined | undefined;
                                fillColor?: string | undefined | undefined;
                                textColor?: string | undefined | undefined;
                                height?: number | undefined | undefined;
                                width?: number | undefined | undefined;
                                hoverState?: {
                                    kind?: string;
                                    color?: string | undefined | undefined;
                                    fillColor?: string | undefined | undefined;
                                    text?: string | undefined | undefined;
                                    textColor?: string | undefined | undefined;
                                    imageUrl?: string | undefined | undefined;
                                    height?: number | undefined | undefined;
                                    width?: number | undefined | undefined;
                                } | undefined;
                            }[];
                            subscribersCount?: number | undefined | undefined;
                            currentlyViewingText?: string | undefined | undefined;
                            currentlyViewingCount?: number | undefined | undefined;
                            subscribersText?: string | undefined | undefined;
                            showWiki?: boolean | undefined | undefined;
                            templates?: {
                                [x: string]: {
                                    text?: string;
                                    richtext?: {
                                        e?: string | undefined | undefined;
                                        t?: string | undefined | undefined;
                                    }[];
                                    backgroundColor?: string;
                                    templateId?: string;
                                    textColor?: string;
                                    type?: string;
                                } | undefined;
                            };
                            display?: string | undefined | undefined;
                            order?: string[];
                            mods?: {
                                name?: string;
                                authorFlairType?: string;
                                authorFlairTextColor?: string;
                                authorFlairBackgroundColor?: string;
                                authorFalirText?: string;
                                authorFlairRichtext?: {
                                    e?: string | undefined | undefined;
                                    t?: string | undefined | undefined;
                                }[];
                            }[];
                            totalMods?: number | undefined | undefined;
                            googleCalendarId?: string | undefined | undefined;
                            requiresSync?: boolean | undefined | undefined;
                            configuration?: {
                                numEvents?: number;
                                showDate?: boolean;
                                showDescription?: boolean;
                                showLocation?: boolean;
                                showTime?: boolean;
                                showTitle?: boolean;
                            } | undefined;
                            text?: string | undefined | undefined;
                            css?: string | undefined | undefined;
                            stylesheetUrl?: string | undefined | undefined;
                            height?: number | undefined | undefined;
                            imageData?: {
                                url?: string;
                                linkUrl?: string;
                                height?: number;
                                width?: number;
                            }[];
                        } | undefined;
                    };
                }): GetWidgetsResponse;
                fromPartial(object: {
                    layout?: {
                        idCardWidget?: string;
                        topbar?: {
                            order?: string[];
                        } | undefined;
                        sidebar?: {
                            order?: string[];
                        } | undefined;
                        moderatorWidget?: string;
                    } | undefined;
                    items?: {
                        [x: string]: {
                            id?: string;
                            kind?: string;
                            styles?: {
                                backgroundColor?: string | undefined | undefined;
                                headerColor?: string | undefined | undefined;
                            } | undefined;
                            shortName?: string;
                            description?: string | undefined | undefined;
                            data?: {
                                url?: string | undefined | undefined;
                                linkUrl?: string | undefined | undefined;
                                height?: number | undefined | undefined;
                                width?: number | undefined | undefined;
                                iconUrl?: string | undefined | undefined;
                                name?: string | undefined | undefined;
                                prefixedName?: string | undefined | undefined;
                                isSubscribed?: boolean | undefined | undefined;
                                type?: string | undefined | undefined;
                                subscribers?: number | undefined | undefined;
                                communityIcon?: string | undefined | undefined;
                                isNsfw?: boolean | undefined | undefined;
                                text?: string | undefined | undefined;
                                children?: {
                                    text?: string | undefined | undefined;
                                    url?: string | undefined | undefined;
                                    children?: /*elided*/ any[];
                                }[];
                            }[];
                            buttons?: {
                                kind?: string;
                                text?: string;
                                url?: string | undefined | undefined;
                                imageUrl?: string | undefined | undefined;
                                linkUrl?: string | undefined | undefined;
                                color?: string | undefined | undefined;
                                fillColor?: string | undefined | undefined;
                                textColor?: string | undefined | undefined;
                                height?: number | undefined | undefined;
                                width?: number | undefined | undefined;
                                hoverState?: {
                                    kind?: string;
                                    color?: string | undefined | undefined;
                                    fillColor?: string | undefined | undefined;
                                    text?: string | undefined | undefined;
                                    textColor?: string | undefined | undefined;
                                    imageUrl?: string | undefined | undefined;
                                    height?: number | undefined | undefined;
                                    width?: number | undefined | undefined;
                                } | undefined;
                            }[];
                            subscribersCount?: number | undefined | undefined;
                            currentlyViewingText?: string | undefined | undefined;
                            currentlyViewingCount?: number | undefined | undefined;
                            subscribersText?: string | undefined | undefined;
                            showWiki?: boolean | undefined | undefined;
                            templates?: {
                                [x: string]: {
                                    text?: string;
                                    richtext?: {
                                        e?: string | undefined | undefined;
                                        t?: string | undefined | undefined;
                                    }[];
                                    backgroundColor?: string;
                                    templateId?: string;
                                    textColor?: string;
                                    type?: string;
                                } | undefined;
                            };
                            display?: string | undefined | undefined;
                            order?: string[];
                            mods?: {
                                name?: string;
                                authorFlairType?: string;
                                authorFlairTextColor?: string;
                                authorFlairBackgroundColor?: string;
                                authorFalirText?: string;
                                authorFlairRichtext?: {
                                    e?: string | undefined | undefined;
                                    t?: string | undefined | undefined;
                                }[];
                            }[];
                            totalMods?: number | undefined | undefined;
                            googleCalendarId?: string | undefined | undefined;
                            requiresSync?: boolean | undefined | undefined;
                            configuration?: {
                                numEvents?: number;
                                showDate?: boolean;
                                showDescription?: boolean;
                                showLocation?: boolean;
                                showTime?: boolean;
                                showTitle?: boolean;
                            } | undefined;
                            text?: string | undefined | undefined;
                            css?: string | undefined | undefined;
                            stylesheetUrl?: string | undefined | undefined;
                            height?: number | undefined | undefined;
                            imageData?: {
                                url?: string;
                                linkUrl?: string;
                                height?: number;
                                width?: number;
                            }[];
                        } | undefined;
                    };
                }): GetWidgetsResponse;
            };
            readonly responseStream: false;
            readonly options: {
                readonly _unknownFields: {
                    readonly 480010: readonly [Uint8Array<ArrayBuffer>, Uint8Array<ArrayBuffer>];
                };
            };
        };
    };
};
interface Rpc {
    request(service: string, method: string, data: Uint8Array, metadata?: Metadata): Promise<Uint8Array>;
}
export {};
//# sourceMappingURL=widgets_svc.d.ts.map