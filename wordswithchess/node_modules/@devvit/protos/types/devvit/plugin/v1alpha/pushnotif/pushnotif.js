/**
 * #pushnotif.ts
 *
 * Code generated by ts-proto. DO NOT EDIT.
 * @packageDocumentation
 */
/* eslint-disable */
import Long from "long";
import _m0 from "protobufjs/minimal.js";
import { messageTypeRegistry } from "../../../../typeRegistry.js";
function createBaseQueuePushNotificationRequest() {
    return { recipientId: "", title: "", body: "", comment: undefined, post: undefined };
}
export const QueuePushNotificationRequest = {
    $type: "devvit.plugin.v1alpha.pushnotif.QueuePushNotificationRequest",
    encode(message, writer = _m0.Writer.create()) {
        if (message.recipientId !== "") {
            writer.uint32(10).string(message.recipientId);
        }
        if (message.title !== "") {
            writer.uint32(18).string(message.title);
        }
        if (message.body !== "") {
            writer.uint32(26).string(message.body);
        }
        if (message.comment !== undefined) {
            writer.uint32(34).string(message.comment);
        }
        if (message.post !== undefined) {
            writer.uint32(42).string(message.post);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueuePushNotificationRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.recipientId = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.title = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.body = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.comment = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.post = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            recipientId: isSet(object.recipientId) ? globalThis.String(object.recipientId) : "",
            title: isSet(object.title) ? globalThis.String(object.title) : "",
            body: isSet(object.body) ? globalThis.String(object.body) : "",
            comment: isSet(object.comment) ? globalThis.String(object.comment) : undefined,
            post: isSet(object.post) ? globalThis.String(object.post) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.recipientId !== "") {
            obj.recipientId = message.recipientId;
        }
        if (message.title !== "") {
            obj.title = message.title;
        }
        if (message.body !== "") {
            obj.body = message.body;
        }
        if (message.comment !== undefined) {
            obj.comment = message.comment;
        }
        if (message.post !== undefined) {
            obj.post = message.post;
        }
        return obj;
    },
    create(base) {
        return QueuePushNotificationRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseQueuePushNotificationRequest();
        message.recipientId = object.recipientId ?? "";
        message.title = object.title ?? "";
        message.body = object.body ?? "";
        message.comment = object.comment ?? undefined;
        message.post = object.post ?? undefined;
        return message;
    },
};
messageTypeRegistry.set(QueuePushNotificationRequest.$type, QueuePushNotificationRequest);
function createBaseQueuePushNotificationResponse() {
    return { success: false, message: "", timestamp: 0 };
}
export const QueuePushNotificationResponse = {
    $type: "devvit.plugin.v1alpha.pushnotif.QueuePushNotificationResponse",
    encode(message, writer = _m0.Writer.create()) {
        if (message.success !== false) {
            writer.uint32(8).bool(message.success);
        }
        if (message.message !== "") {
            writer.uint32(18).string(message.message);
        }
        if (message.timestamp !== 0) {
            writer.uint32(24).int64(message.timestamp);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueuePushNotificationResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.success = reader.bool();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.message = reader.string();
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.timestamp = longToNumber(reader.int64());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            success: isSet(object.success) ? globalThis.Boolean(object.success) : false,
            message: isSet(object.message) ? globalThis.String(object.message) : "",
            timestamp: isSet(object.timestamp) ? globalThis.Number(object.timestamp) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.success !== false) {
            obj.success = message.success;
        }
        if (message.message !== "") {
            obj.message = message.message;
        }
        if (message.timestamp !== 0) {
            obj.timestamp = Math.round(message.timestamp);
        }
        return obj;
    },
    create(base) {
        return QueuePushNotificationResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseQueuePushNotificationResponse();
        message.success = object.success ?? false;
        message.message = object.message ?? "";
        message.timestamp = object.timestamp ?? 0;
        return message;
    },
};
messageTypeRegistry.set(QueuePushNotificationResponse.$type, QueuePushNotificationResponse);
export const PushNotifServiceName = "devvit.plugin.v1alpha.pushnotif.PushNotif";
export class PushNotifClientImpl {
    constructor(rpc, opts) {
        this.service = opts?.service || PushNotifServiceName;
        this.rpc = rpc;
        this.QueuePushNotification = this.QueuePushNotification.bind(this);
    }
    QueuePushNotification(request, metadata) {
        const data = QueuePushNotificationRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "QueuePushNotification", data, metadata);
        return promise.then((data) => QueuePushNotificationResponse.decode(_m0.Reader.create(data)));
    }
}
export const PushNotifDefinition = {
    name: "PushNotif",
    fullName: "devvit.plugin.v1alpha.pushnotif.PushNotif",
    methods: {
        /**
         * Queue a push notification for delivery to a user
         *
         * This method queues a notification for asynchronous delivery. The actual
         * delivery timing and success is not guaranteed by this service.
         */
        queuePushNotification: {
            name: "QueuePushNotification",
            requestType: QueuePushNotificationRequest,
            requestStream: false,
            responseType: QueuePushNotificationResponse,
            responseStream: false,
            options: {},
        },
    },
};
function longToNumber(long) {
    if (long.gt(globalThis.Number.MAX_SAFE_INTEGER)) {
        throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
    }
    return long.toNumber();
}
if (_m0.util.Long !== Long) {
    _m0.util.Long = Long;
    _m0.configure();
}
function isSet(value) {
    return value !== null && value !== undefined;
}
