/**
 * #pushnotif.ts
 *
 * Code generated by ts-proto. DO NOT EDIT.
 * @packageDocumentation
 */
import _m0 from "protobufjs/minimal.js";
import { Metadata } from "../../../../../lib/Types.js";
/** Request to queue a push notification for a user */
export interface QueuePushNotificationRequest {
    /** The Reddit user ID to send the notification to (e.g. "t2_abc123") */
    recipientId: string;
    /** The title of the push notification */
    title: string;
    /** The body text of the push notification */
    body: string;
    /** The fullname of a comment (e.g., "t1_abc123") */
    comment?: string | undefined;
    /** The fullname of a post (e.g., "t3_abc123") */
    post?: string | undefined;
}
/** Response from queuing a push notification */
export interface QueuePushNotificationResponse {
    /** Whether the notification was successfully queued */
    success: boolean;
    /** Optional message providing additional context about the operation */
    message: string;
    /** Unix timestamp when the notification was queued */
    timestamp: number;
}
export declare const QueuePushNotificationRequest: {
    $type: "devvit.plugin.v1alpha.pushnotif.QueuePushNotificationRequest";
    encode(message: QueuePushNotificationRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): QueuePushNotificationRequest;
    fromJSON(object: any): QueuePushNotificationRequest;
    toJSON(message: QueuePushNotificationRequest): unknown;
    create(base?: DeepPartial<QueuePushNotificationRequest>): QueuePushNotificationRequest;
    fromPartial(object: DeepPartial<QueuePushNotificationRequest>): QueuePushNotificationRequest;
};
export declare const QueuePushNotificationResponse: {
    $type: "devvit.plugin.v1alpha.pushnotif.QueuePushNotificationResponse";
    encode(message: QueuePushNotificationResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): QueuePushNotificationResponse;
    fromJSON(object: any): QueuePushNotificationResponse;
    toJSON(message: QueuePushNotificationResponse): unknown;
    create(base?: DeepPartial<QueuePushNotificationResponse>): QueuePushNotificationResponse;
    fromPartial(object: DeepPartial<QueuePushNotificationResponse>): QueuePushNotificationResponse;
};
/**
 * Push notification service for queuing notifications to users
 *
 * EXPERIMENTAL: This service is experimental and intended for limited use.
 * The API may change without notice and should not be used in production
 * without explicit approval.
 */
export interface PushNotif {
    /**
     * Queue a push notification for delivery to a user
     *
     * This method queues a notification for asynchronous delivery. The actual
     * delivery timing and success is not guaranteed by this service.
     */
    QueuePushNotification(request: QueuePushNotificationRequest, metadata?: Metadata): Promise<QueuePushNotificationResponse>;
}
export declare const PushNotifServiceName = "devvit.plugin.v1alpha.pushnotif.PushNotif";
export declare class PushNotifClientImpl implements PushNotif {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    QueuePushNotification(request: QueuePushNotificationRequest, metadata?: Metadata): Promise<QueuePushNotificationResponse>;
}
/**
 * Push notification service for queuing notifications to users
 *
 * EXPERIMENTAL: This service is experimental and intended for limited use.
 * The API may change without notice and should not be used in production
 * without explicit approval.
 */
export type PushNotifDefinition = typeof PushNotifDefinition;
export declare const PushNotifDefinition: {
    readonly name: "PushNotif";
    readonly fullName: "devvit.plugin.v1alpha.pushnotif.PushNotif";
    readonly methods: {
        /**
         * Queue a push notification for delivery to a user
         *
         * This method queues a notification for asynchronous delivery. The actual
         * delivery timing and success is not guaranteed by this service.
         */
        readonly queuePushNotification: {
            readonly name: "QueuePushNotification";
            readonly requestType: {
                $type: "devvit.plugin.v1alpha.pushnotif.QueuePushNotificationRequest";
                encode(message: QueuePushNotificationRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): QueuePushNotificationRequest;
                fromJSON(object: any): QueuePushNotificationRequest;
                toJSON(message: QueuePushNotificationRequest): unknown;
                create(base?: DeepPartial<QueuePushNotificationRequest>): QueuePushNotificationRequest;
                fromPartial(object: DeepPartial<QueuePushNotificationRequest>): QueuePushNotificationRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.plugin.v1alpha.pushnotif.QueuePushNotificationResponse";
                encode(message: QueuePushNotificationResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): QueuePushNotificationResponse;
                fromJSON(object: any): QueuePushNotificationResponse;
                toJSON(message: QueuePushNotificationResponse): unknown;
                create(base?: DeepPartial<QueuePushNotificationResponse>): QueuePushNotificationResponse;
                fromPartial(object: DeepPartial<QueuePushNotificationResponse>): QueuePushNotificationResponse;
            };
            readonly responseStream: false;
            readonly options: {};
        };
    };
};
interface Rpc {
    request(service: string, method: string, data: Uint8Array, metadata?: Metadata): Promise<Uint8Array>;
}
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
type DeepPartial<T> = T extends Builtin ? T : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export {};
//# sourceMappingURL=pushnotif.d.ts.map