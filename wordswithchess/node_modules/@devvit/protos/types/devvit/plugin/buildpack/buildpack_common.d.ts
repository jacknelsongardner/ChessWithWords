/**
 * #buildpack_common.ts
 *
 * Code generated by ts-proto. DO NOT EDIT.
 * @packageDocumentation
 */
import _m0 from "protobufjs/minimal.js";
import { Product } from "../../payments/v1alpha/product.js";
import { BuildInfo, DependencySpec, ServerBundle } from "../../runtime/bundle.js";
/** Actor program and configuration. */
export interface Bundle {
    /** See LinkedBundle.code. */
    code: string;
    /** See LinkedBundle.source_map. */
    sourceMap?: string | undefined;
    /**
     * This is the the detail on the bundle itself **and** its dependendencies.
     *
     * to-do: Can we can rename to "spec" or something like that. This is really
     *   confusing because if you want the Bundle's exported actor name (ie,
     *   `Devvit.init(name, ...)`), you have to ask for it form the dependencies
     *   which doesn't make sense.
     */
    dependencies?: DependencySpec | undefined;
    /**
     * Optional information about the environment the code was built in. Outdated
     * dependencies may indicate an invalid build.
     */
    buildInfo?: BuildInfo | undefined;
    /**
     * This map contains the contents of the assets directory, rooted at the
     * assets directory. The keys are the relative paths of the files, and the
     * values are the devvit asset ids used to look up the asset during upload
     *  e.g. "images/en/banner.jpg": "30d509ee-208d-4b45-86b8-b48ef48cc524",
     */
    assetIds: {
        [key: string]: string;
    };
    /**
     * This map contains html assets from the webroot directory for use in a webview.
     * It has the same structure as asset_ids but is rooted in the webroot directory
     * and is isolated from regular assets.
     */
    webviewAssetIds: {
        [key: string]: string;
    };
    /** This field contains configuration needed to enable the Payments capability */
    paymentsConfig?: PaymentsConfig | undefined;
    /** The metafile contains the size breakdown of the compiled bundle for analysis */
    metafile?: string | undefined;
    /**
     * Standalone server implementation, without Blocks rendering or "Devvit Classic".
     * If provided, this code is expected to be an entry point for an HTTP server that can
     * handle requests at process.env.WEBBIT_PORT. Present in server (UNIVERSAL)
     * bundles only.
     */
    server?: ServerBundle | undefined;
}
export interface Bundle_AssetIdsEntry {
    key: string;
    value: string;
}
export interface Bundle_WebviewAssetIdsEntry {
    key: string;
    value: string;
}
export interface PaymentsConfig {
    /**
     * This map contains products needed by the bundle which will be registered with
     * the Payments API. The string keys are product skus.
     */
    products: {
        [key: string]: Product;
    };
}
export interface PaymentsConfig_ProductsEntry {
    key: string;
    value?: Product | undefined;
}
export declare const Bundle: {
    $type: "devvit.plugin.buildpack.Bundle";
    encode(message: Bundle, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Bundle;
    fromJSON(object: any): Bundle;
    toJSON(message: Bundle): unknown;
    create(base?: DeepPartial<Bundle>): Bundle;
    fromPartial(object: DeepPartial<Bundle>): Bundle;
};
export declare const Bundle_AssetIdsEntry: {
    $type: "devvit.plugin.buildpack.Bundle.AssetIdsEntry";
    encode(message: Bundle_AssetIdsEntry, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Bundle_AssetIdsEntry;
    fromJSON(object: any): Bundle_AssetIdsEntry;
    toJSON(message: Bundle_AssetIdsEntry): unknown;
    create(base?: DeepPartial<Bundle_AssetIdsEntry>): Bundle_AssetIdsEntry;
    fromPartial(object: DeepPartial<Bundle_AssetIdsEntry>): Bundle_AssetIdsEntry;
};
export declare const Bundle_WebviewAssetIdsEntry: {
    $type: "devvit.plugin.buildpack.Bundle.WebviewAssetIdsEntry";
    encode(message: Bundle_WebviewAssetIdsEntry, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Bundle_WebviewAssetIdsEntry;
    fromJSON(object: any): Bundle_WebviewAssetIdsEntry;
    toJSON(message: Bundle_WebviewAssetIdsEntry): unknown;
    create(base?: DeepPartial<Bundle_WebviewAssetIdsEntry>): Bundle_WebviewAssetIdsEntry;
    fromPartial(object: DeepPartial<Bundle_WebviewAssetIdsEntry>): Bundle_WebviewAssetIdsEntry;
};
export declare const PaymentsConfig: {
    $type: "devvit.plugin.buildpack.PaymentsConfig";
    encode(message: PaymentsConfig, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): PaymentsConfig;
    fromJSON(object: any): PaymentsConfig;
    toJSON(message: PaymentsConfig): unknown;
    create(base?: DeepPartial<PaymentsConfig>): PaymentsConfig;
    fromPartial(object: DeepPartial<PaymentsConfig>): PaymentsConfig;
};
export declare const PaymentsConfig_ProductsEntry: {
    $type: "devvit.plugin.buildpack.PaymentsConfig.ProductsEntry";
    encode(message: PaymentsConfig_ProductsEntry, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): PaymentsConfig_ProductsEntry;
    fromJSON(object: any): PaymentsConfig_ProductsEntry;
    toJSON(message: PaymentsConfig_ProductsEntry): unknown;
    create(base?: DeepPartial<PaymentsConfig_ProductsEntry>): PaymentsConfig_ProductsEntry;
    fromPartial(object: DeepPartial<PaymentsConfig_ProductsEntry>): PaymentsConfig_ProductsEntry;
};
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
type DeepPartial<T> = T extends Builtin ? T : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export {};
//# sourceMappingURL=buildpack_common.d.ts.map