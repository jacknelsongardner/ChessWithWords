/**
 * #buildpack_common.ts
 *
 * Code generated by ts-proto. DO NOT EDIT.
 * @packageDocumentation
 */
/* eslint-disable */
import _m0 from "protobufjs/minimal.js";
import { StringValue } from "../../../google/protobuf/wrappers.js";
import { messageTypeRegistry } from "../../../typeRegistry.js";
import { Product } from "../../payments/v1alpha/product.js";
import { BuildInfo, DependencySpec, ServerBundle } from "../../runtime/bundle.js";
function createBaseBundle() {
    return {
        code: "",
        sourceMap: undefined,
        dependencies: undefined,
        buildInfo: undefined,
        assetIds: {},
        webviewAssetIds: {},
        paymentsConfig: undefined,
        metafile: undefined,
        server: undefined,
    };
}
export const Bundle = {
    $type: "devvit.plugin.buildpack.Bundle",
    encode(message, writer = _m0.Writer.create()) {
        if (message.code !== "") {
            writer.uint32(10).string(message.code);
        }
        if (message.sourceMap !== undefined) {
            StringValue.encode({ value: message.sourceMap }, writer.uint32(58).fork()).ldelim();
        }
        if (message.dependencies !== undefined) {
            DependencySpec.encode(message.dependencies, writer.uint32(18).fork()).ldelim();
        }
        if (message.buildInfo !== undefined) {
            BuildInfo.encode(message.buildInfo, writer.uint32(26).fork()).ldelim();
        }
        Object.entries(message.assetIds).forEach(([key, value]) => {
            Bundle_AssetIdsEntry.encode({ key: key, value }, writer.uint32(42).fork()).ldelim();
        });
        Object.entries(message.webviewAssetIds).forEach(([key, value]) => {
            Bundle_WebviewAssetIdsEntry.encode({ key: key, value }, writer.uint32(50).fork()).ldelim();
        });
        if (message.paymentsConfig !== undefined) {
            PaymentsConfig.encode(message.paymentsConfig, writer.uint32(66).fork()).ldelim();
        }
        if (message.metafile !== undefined) {
            writer.uint32(74).string(message.metafile);
        }
        if (message.server !== undefined) {
            ServerBundle.encode(message.server, writer.uint32(82).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBundle();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.code = reader.string();
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.sourceMap = StringValue.decode(reader, reader.uint32()).value;
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.dependencies = DependencySpec.decode(reader, reader.uint32());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.buildInfo = BuildInfo.decode(reader, reader.uint32());
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    const entry5 = Bundle_AssetIdsEntry.decode(reader, reader.uint32());
                    if (entry5.value !== undefined) {
                        message.assetIds[entry5.key] = entry5.value;
                    }
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    const entry6 = Bundle_WebviewAssetIdsEntry.decode(reader, reader.uint32());
                    if (entry6.value !== undefined) {
                        message.webviewAssetIds[entry6.key] = entry6.value;
                    }
                    continue;
                case 8:
                    if (tag !== 66) {
                        break;
                    }
                    message.paymentsConfig = PaymentsConfig.decode(reader, reader.uint32());
                    continue;
                case 9:
                    if (tag !== 74) {
                        break;
                    }
                    message.metafile = reader.string();
                    continue;
                case 10:
                    if (tag !== 82) {
                        break;
                    }
                    message.server = ServerBundle.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            code: isSet(object.code) ? globalThis.String(object.code) : "",
            sourceMap: isSet(object.sourceMap) ? String(object.sourceMap) : undefined,
            dependencies: isSet(object.dependencies) ? DependencySpec.fromJSON(object.dependencies) : undefined,
            buildInfo: isSet(object.buildInfo) ? BuildInfo.fromJSON(object.buildInfo) : undefined,
            assetIds: isObject(object.assetIds)
                ? Object.entries(object.assetIds).reduce((acc, [key, value]) => {
                    acc[key] = String(value);
                    return acc;
                }, {})
                : {},
            webviewAssetIds: isObject(object.webviewAssetIds)
                ? Object.entries(object.webviewAssetIds).reduce((acc, [key, value]) => {
                    acc[key] = String(value);
                    return acc;
                }, {})
                : {},
            paymentsConfig: isSet(object.paymentsConfig) ? PaymentsConfig.fromJSON(object.paymentsConfig) : undefined,
            metafile: isSet(object.metafile) ? globalThis.String(object.metafile) : undefined,
            server: isSet(object.server) ? ServerBundle.fromJSON(object.server) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.code !== "") {
            obj.code = message.code;
        }
        if (message.sourceMap !== undefined) {
            obj.sourceMap = message.sourceMap;
        }
        if (message.dependencies !== undefined) {
            obj.dependencies = DependencySpec.toJSON(message.dependencies);
        }
        if (message.buildInfo !== undefined) {
            obj.buildInfo = BuildInfo.toJSON(message.buildInfo);
        }
        if (message.assetIds) {
            const entries = Object.entries(message.assetIds);
            if (entries.length > 0) {
                obj.assetIds = {};
                entries.forEach(([k, v]) => {
                    obj.assetIds[k] = v;
                });
            }
        }
        if (message.webviewAssetIds) {
            const entries = Object.entries(message.webviewAssetIds);
            if (entries.length > 0) {
                obj.webviewAssetIds = {};
                entries.forEach(([k, v]) => {
                    obj.webviewAssetIds[k] = v;
                });
            }
        }
        if (message.paymentsConfig !== undefined) {
            obj.paymentsConfig = PaymentsConfig.toJSON(message.paymentsConfig);
        }
        if (message.metafile !== undefined) {
            obj.metafile = message.metafile;
        }
        if (message.server !== undefined) {
            obj.server = ServerBundle.toJSON(message.server);
        }
        return obj;
    },
    create(base) {
        return Bundle.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseBundle();
        message.code = object.code ?? "";
        message.sourceMap = object.sourceMap ?? undefined;
        message.dependencies = (object.dependencies !== undefined && object.dependencies !== null)
            ? DependencySpec.fromPartial(object.dependencies)
            : undefined;
        message.buildInfo = (object.buildInfo !== undefined && object.buildInfo !== null)
            ? BuildInfo.fromPartial(object.buildInfo)
            : undefined;
        message.assetIds = Object.entries(object.assetIds ?? {}).reduce((acc, [key, value]) => {
            if (value !== undefined) {
                acc[key] = globalThis.String(value);
            }
            return acc;
        }, {});
        message.webviewAssetIds = Object.entries(object.webviewAssetIds ?? {}).reduce((acc, [key, value]) => {
            if (value !== undefined) {
                acc[key] = globalThis.String(value);
            }
            return acc;
        }, {});
        message.paymentsConfig = (object.paymentsConfig !== undefined && object.paymentsConfig !== null)
            ? PaymentsConfig.fromPartial(object.paymentsConfig)
            : undefined;
        message.metafile = object.metafile ?? undefined;
        message.server = (object.server !== undefined && object.server !== null)
            ? ServerBundle.fromPartial(object.server)
            : undefined;
        return message;
    },
};
messageTypeRegistry.set(Bundle.$type, Bundle);
function createBaseBundle_AssetIdsEntry() {
    return { key: "", value: "" };
}
export const Bundle_AssetIdsEntry = {
    $type: "devvit.plugin.buildpack.Bundle.AssetIdsEntry",
    encode(message, writer = _m0.Writer.create()) {
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== "") {
            writer.uint32(18).string(message.value);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBundle_AssetIdsEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.key = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.value = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            key: isSet(object.key) ? globalThis.String(object.key) : "",
            value: isSet(object.value) ? globalThis.String(object.value) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.key !== "") {
            obj.key = message.key;
        }
        if (message.value !== "") {
            obj.value = message.value;
        }
        return obj;
    },
    create(base) {
        return Bundle_AssetIdsEntry.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseBundle_AssetIdsEntry();
        message.key = object.key ?? "";
        message.value = object.value ?? "";
        return message;
    },
};
messageTypeRegistry.set(Bundle_AssetIdsEntry.$type, Bundle_AssetIdsEntry);
function createBaseBundle_WebviewAssetIdsEntry() {
    return { key: "", value: "" };
}
export const Bundle_WebviewAssetIdsEntry = {
    $type: "devvit.plugin.buildpack.Bundle.WebviewAssetIdsEntry",
    encode(message, writer = _m0.Writer.create()) {
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== "") {
            writer.uint32(18).string(message.value);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBundle_WebviewAssetIdsEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.key = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.value = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            key: isSet(object.key) ? globalThis.String(object.key) : "",
            value: isSet(object.value) ? globalThis.String(object.value) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.key !== "") {
            obj.key = message.key;
        }
        if (message.value !== "") {
            obj.value = message.value;
        }
        return obj;
    },
    create(base) {
        return Bundle_WebviewAssetIdsEntry.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseBundle_WebviewAssetIdsEntry();
        message.key = object.key ?? "";
        message.value = object.value ?? "";
        return message;
    },
};
messageTypeRegistry.set(Bundle_WebviewAssetIdsEntry.$type, Bundle_WebviewAssetIdsEntry);
function createBasePaymentsConfig() {
    return { products: {} };
}
export const PaymentsConfig = {
    $type: "devvit.plugin.buildpack.PaymentsConfig",
    encode(message, writer = _m0.Writer.create()) {
        Object.entries(message.products).forEach(([key, value]) => {
            PaymentsConfig_ProductsEntry.encode({ key: key, value }, writer.uint32(10).fork()).ldelim();
        });
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePaymentsConfig();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    const entry1 = PaymentsConfig_ProductsEntry.decode(reader, reader.uint32());
                    if (entry1.value !== undefined) {
                        message.products[entry1.key] = entry1.value;
                    }
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            products: isObject(object.products)
                ? Object.entries(object.products).reduce((acc, [key, value]) => {
                    acc[key] = Product.fromJSON(value);
                    return acc;
                }, {})
                : {},
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.products) {
            const entries = Object.entries(message.products);
            if (entries.length > 0) {
                obj.products = {};
                entries.forEach(([k, v]) => {
                    obj.products[k] = Product.toJSON(v);
                });
            }
        }
        return obj;
    },
    create(base) {
        return PaymentsConfig.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBasePaymentsConfig();
        message.products = Object.entries(object.products ?? {}).reduce((acc, [key, value]) => {
            if (value !== undefined) {
                acc[key] = Product.fromPartial(value);
            }
            return acc;
        }, {});
        return message;
    },
};
messageTypeRegistry.set(PaymentsConfig.$type, PaymentsConfig);
function createBasePaymentsConfig_ProductsEntry() {
    return { key: "", value: undefined };
}
export const PaymentsConfig_ProductsEntry = {
    $type: "devvit.plugin.buildpack.PaymentsConfig.ProductsEntry",
    encode(message, writer = _m0.Writer.create()) {
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== undefined) {
            Product.encode(message.value, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePaymentsConfig_ProductsEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.key = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.value = Product.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            key: isSet(object.key) ? globalThis.String(object.key) : "",
            value: isSet(object.value) ? Product.fromJSON(object.value) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.key !== "") {
            obj.key = message.key;
        }
        if (message.value !== undefined) {
            obj.value = Product.toJSON(message.value);
        }
        return obj;
    },
    create(base) {
        return PaymentsConfig_ProductsEntry.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBasePaymentsConfig_ProductsEntry();
        message.key = object.key ?? "";
        message.value = (object.value !== undefined && object.value !== null)
            ? Product.fromPartial(object.value)
            : undefined;
        return message;
    },
};
messageTypeRegistry.set(PaymentsConfig_ProductsEntry.$type, PaymentsConfig_ProductsEntry);
function isObject(value) {
    return typeof value === "object" && value !== null;
}
function isSet(value) {
    return value !== null && value !== undefined;
}
