/**
 * #workerpool.ts
 *
 * Code generated by ts-proto. DO NOT EDIT.
 * @packageDocumentation
 */
import _m0 from "protobufjs/minimal.js";
import { Metadata } from "../../../../../../lib/Types.js";
import { Any } from "../../../../../google/protobuf/any.js";
import { Status } from "../../../../../google/rpc/status.js";
import { ExperimentalCallbackOptions } from "../../experimental/v1/experimental.js";
import { DataSourceOffsetRange } from "../../scheduling/v1/offsets.js";
export interface ReplayWindow {
    start?: Date | undefined;
    end?: Date | undefined;
}
export interface ReplayCallbackWithWindowRequest {
    callbackNamespace: string;
    callbackName: string;
    replayWindow?: ReplayWindow | undefined;
}
export interface ReplayCallbackWithWindowResponse {
    windowOffsetRange?: DataSourceOffsetRange | undefined;
}
export interface RegisterWorkerPoolVersionRequest {
    /** Reference to the worker pool that the worker is registering to. */
    workerPoolSource?: WorkerPool_Source | undefined;
    workerPoolVersion?: WorkerPool_Version | undefined;
    /**
     * Unique ID of the worker instance.
     * This must match the pod name of the caller.
     */
    workerId: string;
}
export interface CallbackInfo {
    /** The name of the callback */
    name: string;
    requestFullName: string;
    /**
     * The kafka topic that the callback wants to handle.
     * If empty, the kafka topic will default to the fullname of the message descriptor.
     */
    sourceTopic: string;
    /**
     * Configuration for experimental callback settings and features.
     * Not recommended for general usage.
     */
    experimentalOptions?: ExperimentalCallbackOptions | undefined;
    /**
     * A list of extensions which influence the scheduling decisions and consumer behavior. This
     * field is meant to be populated only by the Cloudroutines scheduler. Attempts to configure this
     * outside of the scheduler should fail immediately.
     */
    internalSchedulingExtensions: Any[];
}
export interface RegisterWorkerPoolVersionResponse {
    /** Mapping of callback names to error statuses encountered during registration. */
    errors: {
        [key: string]: Status;
    };
}
export interface RegisterWorkerPoolVersionResponse_ErrorsEntry {
    key: string;
    value?: Status | undefined;
}
/** Used internally within Cloudroutines to asynchronously update worker discovery information. */
export interface WorkerPoolEvent {
    registerVersion?: WorkerPoolEvent_RegisterVersion | undefined;
    evictVersion?: WorkerPoolEvent_EvictVersion | undefined;
    evictPool?: WorkerPoolEvent_EvictPool | undefined;
}
export interface WorkerPoolEvent_RegisterVersion {
    source?: WorkerPool_Source | undefined;
    version?: WorkerPool_Version | undefined;
    /**
     * The unique identifier for the member of the worker pool which triggered this registration event. If blank,
     * this the event was triggered by internal automation or a state resync. This value is usually the pod name.
     */
    workerId: string;
}
export interface WorkerPoolEvent_EvictVersion {
    source?: WorkerPool_Source | undefined;
    version?: WorkerPool_Version | undefined;
}
export interface WorkerPoolEvent_EvictPool {
    source?: WorkerPool_Source | undefined;
}
export interface WorkerPool {
    source?: WorkerPool_Source | undefined;
    versions: {
        [key: string]: WorkerPool_Version;
    };
}
export interface WorkerPool_Source {
    /**
     * Reference to the deployment that the worker pool is associated with.
     * Contains separate fields for the deployment name and namespace.
     */
    deploymentReference?: DeploymentReference | undefined;
}
export interface WorkerPool_Version {
    /**
     * The version of the worker pool. By default this is the pod template hash which we use as the
     * version identifier for a set of pods. When dynamic reloading is enabled, we have to use the
     * computed hash of the callback contents.
     */
    id: string;
    /** The port that the workers are listening on. */
    port: number;
    /** The list of callbacks that the worker pool is able to handle. */
    callbacks: {
        [key: string]: CallbackInfo;
    };
    workloadExtension?: Any | undefined;
    /**
     * Optional version id of the deployment or workload this version struct is associated with. This field is
     * used when dynamic reloading of callbacks is configured.
     */
    workloadVersionId: string;
}
export interface WorkerPool_Version_CallbacksEntry {
    key: string;
    value?: CallbackInfo | undefined;
}
export interface WorkerPool_VersionsEntry {
    key: string;
    value?: WorkerPool_Version | undefined;
}
export interface DeploymentReference {
    /** The name of the deployment. */
    name: string;
    /** The namespace of the deployment. */
    namespace: string;
}
export interface EinhornWorkloadExtension {
    /** The port range that the worker pool is listening on. */
    portRange?: EinhornWorkloadExtension_PortRange | undefined;
}
export interface EinhornWorkloadExtension_PortRange {
    start: number;
    end: number;
}
export interface MonocerosWorkloadExtension {
    /** The port range that the worker pool is listening on. */
    portRange?: MonocerosWorkloadExtension_PortRange | undefined;
}
export interface MonocerosWorkloadExtension_PortRange {
    start: number;
    end: number;
}
export declare const ReplayWindow: {
    $type: "reddit.coreplatform.cloudroutines.workerpool.v1.ReplayWindow";
    encode(message: ReplayWindow, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ReplayWindow;
    fromJSON(object: any): ReplayWindow;
    toJSON(message: ReplayWindow): unknown;
    create(base?: DeepPartial<ReplayWindow>): ReplayWindow;
    fromPartial(object: DeepPartial<ReplayWindow>): ReplayWindow;
};
export declare const ReplayCallbackWithWindowRequest: {
    $type: "reddit.coreplatform.cloudroutines.workerpool.v1.ReplayCallbackWithWindowRequest";
    encode(message: ReplayCallbackWithWindowRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ReplayCallbackWithWindowRequest;
    fromJSON(object: any): ReplayCallbackWithWindowRequest;
    toJSON(message: ReplayCallbackWithWindowRequest): unknown;
    create(base?: DeepPartial<ReplayCallbackWithWindowRequest>): ReplayCallbackWithWindowRequest;
    fromPartial(object: DeepPartial<ReplayCallbackWithWindowRequest>): ReplayCallbackWithWindowRequest;
};
export declare const ReplayCallbackWithWindowResponse: {
    $type: "reddit.coreplatform.cloudroutines.workerpool.v1.ReplayCallbackWithWindowResponse";
    encode(message: ReplayCallbackWithWindowResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ReplayCallbackWithWindowResponse;
    fromJSON(object: any): ReplayCallbackWithWindowResponse;
    toJSON(message: ReplayCallbackWithWindowResponse): unknown;
    create(base?: DeepPartial<ReplayCallbackWithWindowResponse>): ReplayCallbackWithWindowResponse;
    fromPartial(object: DeepPartial<ReplayCallbackWithWindowResponse>): ReplayCallbackWithWindowResponse;
};
export declare const RegisterWorkerPoolVersionRequest: {
    $type: "reddit.coreplatform.cloudroutines.workerpool.v1.RegisterWorkerPoolVersionRequest";
    encode(message: RegisterWorkerPoolVersionRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): RegisterWorkerPoolVersionRequest;
    fromJSON(object: any): RegisterWorkerPoolVersionRequest;
    toJSON(message: RegisterWorkerPoolVersionRequest): unknown;
    create(base?: DeepPartial<RegisterWorkerPoolVersionRequest>): RegisterWorkerPoolVersionRequest;
    fromPartial(object: DeepPartial<RegisterWorkerPoolVersionRequest>): RegisterWorkerPoolVersionRequest;
};
export declare const CallbackInfo: {
    $type: "reddit.coreplatform.cloudroutines.workerpool.v1.CallbackInfo";
    encode(message: CallbackInfo, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): CallbackInfo;
    fromJSON(object: any): CallbackInfo;
    toJSON(message: CallbackInfo): unknown;
    create(base?: DeepPartial<CallbackInfo>): CallbackInfo;
    fromPartial(object: DeepPartial<CallbackInfo>): CallbackInfo;
};
export declare const RegisterWorkerPoolVersionResponse: {
    $type: "reddit.coreplatform.cloudroutines.workerpool.v1.RegisterWorkerPoolVersionResponse";
    encode(message: RegisterWorkerPoolVersionResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): RegisterWorkerPoolVersionResponse;
    fromJSON(object: any): RegisterWorkerPoolVersionResponse;
    toJSON(message: RegisterWorkerPoolVersionResponse): unknown;
    create(base?: DeepPartial<RegisterWorkerPoolVersionResponse>): RegisterWorkerPoolVersionResponse;
    fromPartial(object: DeepPartial<RegisterWorkerPoolVersionResponse>): RegisterWorkerPoolVersionResponse;
};
export declare const RegisterWorkerPoolVersionResponse_ErrorsEntry: {
    $type: "reddit.coreplatform.cloudroutines.workerpool.v1.RegisterWorkerPoolVersionResponse.ErrorsEntry";
    encode(message: RegisterWorkerPoolVersionResponse_ErrorsEntry, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): RegisterWorkerPoolVersionResponse_ErrorsEntry;
    fromJSON(object: any): RegisterWorkerPoolVersionResponse_ErrorsEntry;
    toJSON(message: RegisterWorkerPoolVersionResponse_ErrorsEntry): unknown;
    create(base?: DeepPartial<RegisterWorkerPoolVersionResponse_ErrorsEntry>): RegisterWorkerPoolVersionResponse_ErrorsEntry;
    fromPartial(object: DeepPartial<RegisterWorkerPoolVersionResponse_ErrorsEntry>): RegisterWorkerPoolVersionResponse_ErrorsEntry;
};
export declare const WorkerPoolEvent: {
    $type: "reddit.coreplatform.cloudroutines.workerpool.v1.WorkerPoolEvent";
    encode(message: WorkerPoolEvent, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): WorkerPoolEvent;
    fromJSON(object: any): WorkerPoolEvent;
    toJSON(message: WorkerPoolEvent): unknown;
    create(base?: DeepPartial<WorkerPoolEvent>): WorkerPoolEvent;
    fromPartial(object: DeepPartial<WorkerPoolEvent>): WorkerPoolEvent;
};
export declare const WorkerPoolEvent_RegisterVersion: {
    $type: "reddit.coreplatform.cloudroutines.workerpool.v1.WorkerPoolEvent.RegisterVersion";
    encode(message: WorkerPoolEvent_RegisterVersion, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): WorkerPoolEvent_RegisterVersion;
    fromJSON(object: any): WorkerPoolEvent_RegisterVersion;
    toJSON(message: WorkerPoolEvent_RegisterVersion): unknown;
    create(base?: DeepPartial<WorkerPoolEvent_RegisterVersion>): WorkerPoolEvent_RegisterVersion;
    fromPartial(object: DeepPartial<WorkerPoolEvent_RegisterVersion>): WorkerPoolEvent_RegisterVersion;
};
export declare const WorkerPoolEvent_EvictVersion: {
    $type: "reddit.coreplatform.cloudroutines.workerpool.v1.WorkerPoolEvent.EvictVersion";
    encode(message: WorkerPoolEvent_EvictVersion, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): WorkerPoolEvent_EvictVersion;
    fromJSON(object: any): WorkerPoolEvent_EvictVersion;
    toJSON(message: WorkerPoolEvent_EvictVersion): unknown;
    create(base?: DeepPartial<WorkerPoolEvent_EvictVersion>): WorkerPoolEvent_EvictVersion;
    fromPartial(object: DeepPartial<WorkerPoolEvent_EvictVersion>): WorkerPoolEvent_EvictVersion;
};
export declare const WorkerPoolEvent_EvictPool: {
    $type: "reddit.coreplatform.cloudroutines.workerpool.v1.WorkerPoolEvent.EvictPool";
    encode(message: WorkerPoolEvent_EvictPool, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): WorkerPoolEvent_EvictPool;
    fromJSON(object: any): WorkerPoolEvent_EvictPool;
    toJSON(message: WorkerPoolEvent_EvictPool): unknown;
    create(base?: DeepPartial<WorkerPoolEvent_EvictPool>): WorkerPoolEvent_EvictPool;
    fromPartial(object: DeepPartial<WorkerPoolEvent_EvictPool>): WorkerPoolEvent_EvictPool;
};
export declare const WorkerPool: {
    $type: "reddit.coreplatform.cloudroutines.workerpool.v1.WorkerPool";
    encode(message: WorkerPool, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): WorkerPool;
    fromJSON(object: any): WorkerPool;
    toJSON(message: WorkerPool): unknown;
    create(base?: DeepPartial<WorkerPool>): WorkerPool;
    fromPartial(object: DeepPartial<WorkerPool>): WorkerPool;
};
export declare const WorkerPool_Source: {
    $type: "reddit.coreplatform.cloudroutines.workerpool.v1.WorkerPool.Source";
    encode(message: WorkerPool_Source, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): WorkerPool_Source;
    fromJSON(object: any): WorkerPool_Source;
    toJSON(message: WorkerPool_Source): unknown;
    create(base?: DeepPartial<WorkerPool_Source>): WorkerPool_Source;
    fromPartial(object: DeepPartial<WorkerPool_Source>): WorkerPool_Source;
};
export declare const WorkerPool_Version: {
    $type: "reddit.coreplatform.cloudroutines.workerpool.v1.WorkerPool.Version";
    encode(message: WorkerPool_Version, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): WorkerPool_Version;
    fromJSON(object: any): WorkerPool_Version;
    toJSON(message: WorkerPool_Version): unknown;
    create(base?: DeepPartial<WorkerPool_Version>): WorkerPool_Version;
    fromPartial(object: DeepPartial<WorkerPool_Version>): WorkerPool_Version;
};
export declare const WorkerPool_Version_CallbacksEntry: {
    $type: "reddit.coreplatform.cloudroutines.workerpool.v1.WorkerPool.Version.CallbacksEntry";
    encode(message: WorkerPool_Version_CallbacksEntry, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): WorkerPool_Version_CallbacksEntry;
    fromJSON(object: any): WorkerPool_Version_CallbacksEntry;
    toJSON(message: WorkerPool_Version_CallbacksEntry): unknown;
    create(base?: DeepPartial<WorkerPool_Version_CallbacksEntry>): WorkerPool_Version_CallbacksEntry;
    fromPartial(object: DeepPartial<WorkerPool_Version_CallbacksEntry>): WorkerPool_Version_CallbacksEntry;
};
export declare const WorkerPool_VersionsEntry: {
    $type: "reddit.coreplatform.cloudroutines.workerpool.v1.WorkerPool.VersionsEntry";
    encode(message: WorkerPool_VersionsEntry, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): WorkerPool_VersionsEntry;
    fromJSON(object: any): WorkerPool_VersionsEntry;
    toJSON(message: WorkerPool_VersionsEntry): unknown;
    create(base?: DeepPartial<WorkerPool_VersionsEntry>): WorkerPool_VersionsEntry;
    fromPartial(object: DeepPartial<WorkerPool_VersionsEntry>): WorkerPool_VersionsEntry;
};
export declare const DeploymentReference: {
    $type: "reddit.coreplatform.cloudroutines.workerpool.v1.DeploymentReference";
    encode(message: DeploymentReference, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): DeploymentReference;
    fromJSON(object: any): DeploymentReference;
    toJSON(message: DeploymentReference): unknown;
    create(base?: DeepPartial<DeploymentReference>): DeploymentReference;
    fromPartial(object: DeepPartial<DeploymentReference>): DeploymentReference;
};
export declare const EinhornWorkloadExtension: {
    $type: "reddit.coreplatform.cloudroutines.workerpool.v1.EinhornWorkloadExtension";
    encode(message: EinhornWorkloadExtension, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): EinhornWorkloadExtension;
    fromJSON(object: any): EinhornWorkloadExtension;
    toJSON(message: EinhornWorkloadExtension): unknown;
    create(base?: DeepPartial<EinhornWorkloadExtension>): EinhornWorkloadExtension;
    fromPartial(object: DeepPartial<EinhornWorkloadExtension>): EinhornWorkloadExtension;
};
export declare const EinhornWorkloadExtension_PortRange: {
    $type: "reddit.coreplatform.cloudroutines.workerpool.v1.EinhornWorkloadExtension.PortRange";
    encode(message: EinhornWorkloadExtension_PortRange, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): EinhornWorkloadExtension_PortRange;
    fromJSON(object: any): EinhornWorkloadExtension_PortRange;
    toJSON(message: EinhornWorkloadExtension_PortRange): unknown;
    create(base?: DeepPartial<EinhornWorkloadExtension_PortRange>): EinhornWorkloadExtension_PortRange;
    fromPartial(object: DeepPartial<EinhornWorkloadExtension_PortRange>): EinhornWorkloadExtension_PortRange;
};
export declare const MonocerosWorkloadExtension: {
    $type: "reddit.coreplatform.cloudroutines.workerpool.v1.MonocerosWorkloadExtension";
    encode(message: MonocerosWorkloadExtension, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MonocerosWorkloadExtension;
    fromJSON(object: any): MonocerosWorkloadExtension;
    toJSON(message: MonocerosWorkloadExtension): unknown;
    create(base?: DeepPartial<MonocerosWorkloadExtension>): MonocerosWorkloadExtension;
    fromPartial(object: DeepPartial<MonocerosWorkloadExtension>): MonocerosWorkloadExtension;
};
export declare const MonocerosWorkloadExtension_PortRange: {
    $type: "reddit.coreplatform.cloudroutines.workerpool.v1.MonocerosWorkloadExtension.PortRange";
    encode(message: MonocerosWorkloadExtension_PortRange, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MonocerosWorkloadExtension_PortRange;
    fromJSON(object: any): MonocerosWorkloadExtension_PortRange;
    toJSON(message: MonocerosWorkloadExtension_PortRange): unknown;
    create(base?: DeepPartial<MonocerosWorkloadExtension_PortRange>): MonocerosWorkloadExtension_PortRange;
    fromPartial(object: DeepPartial<MonocerosWorkloadExtension_PortRange>): MonocerosWorkloadExtension_PortRange;
};
export interface WorkerPoolService {
    /**
     * RegisterWorkerPoolVersion handles the registration of new workers to a given pool.
     * Responses contain a mapping of callback names to corresponding error statuses encountered during registration.
     * Problematic callbacks will be omitted from registration and returned in the response errors map.
     */
    RegisterWorkerPoolVersion(request: RegisterWorkerPoolVersionRequest, metadata?: Metadata): Promise<RegisterWorkerPoolVersionResponse>;
    /**
     * ReplayCallbackWithWindow will trigger Cloudroutines to redeliver messages published within the specified time
     * window to the specified callback. If the time window falls outside of the topic retention window, then no messages will
     * be delivered and an error is returned.
     */
    ReplayCallbackWithWindow(request: ReplayCallbackWithWindowRequest, metadata?: Metadata): Promise<ReplayCallbackWithWindowResponse>;
}
export declare const WorkerPoolServiceServiceName = "reddit.coreplatform.cloudroutines.workerpool.v1.WorkerPoolService";
export declare class WorkerPoolServiceClientImpl implements WorkerPoolService {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    RegisterWorkerPoolVersion(request: RegisterWorkerPoolVersionRequest, metadata?: Metadata): Promise<RegisterWorkerPoolVersionResponse>;
    ReplayCallbackWithWindow(request: ReplayCallbackWithWindowRequest, metadata?: Metadata): Promise<ReplayCallbackWithWindowResponse>;
}
export type WorkerPoolServiceDefinition = typeof WorkerPoolServiceDefinition;
export declare const WorkerPoolServiceDefinition: {
    readonly name: "WorkerPoolService";
    readonly fullName: "reddit.coreplatform.cloudroutines.workerpool.v1.WorkerPoolService";
    readonly methods: {
        /**
         * RegisterWorkerPoolVersion handles the registration of new workers to a given pool.
         * Responses contain a mapping of callback names to corresponding error statuses encountered during registration.
         * Problematic callbacks will be omitted from registration and returned in the response errors map.
         */
        readonly registerWorkerPoolVersion: {
            readonly name: "RegisterWorkerPoolVersion";
            readonly requestType: {
                $type: "reddit.coreplatform.cloudroutines.workerpool.v1.RegisterWorkerPoolVersionRequest";
                encode(message: RegisterWorkerPoolVersionRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): RegisterWorkerPoolVersionRequest;
                fromJSON(object: any): RegisterWorkerPoolVersionRequest;
                toJSON(message: RegisterWorkerPoolVersionRequest): unknown;
                create(base?: DeepPartial<RegisterWorkerPoolVersionRequest>): RegisterWorkerPoolVersionRequest;
                fromPartial(object: DeepPartial<RegisterWorkerPoolVersionRequest>): RegisterWorkerPoolVersionRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "reddit.coreplatform.cloudroutines.workerpool.v1.RegisterWorkerPoolVersionResponse";
                encode(message: RegisterWorkerPoolVersionResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): RegisterWorkerPoolVersionResponse;
                fromJSON(object: any): RegisterWorkerPoolVersionResponse;
                toJSON(message: RegisterWorkerPoolVersionResponse): unknown;
                create(base?: DeepPartial<RegisterWorkerPoolVersionResponse>): RegisterWorkerPoolVersionResponse;
                fromPartial(object: DeepPartial<RegisterWorkerPoolVersionResponse>): RegisterWorkerPoolVersionResponse;
            };
            readonly responseStream: false;
            readonly options: {
                readonly idempotencyLevel: "IDEMPOTENT";
            };
        };
        /**
         * ReplayCallbackWithWindow will trigger Cloudroutines to redeliver messages published within the specified time
         * window to the specified callback. If the time window falls outside of the topic retention window, then no messages will
         * be delivered and an error is returned.
         */
        readonly replayCallbackWithWindow: {
            readonly name: "ReplayCallbackWithWindow";
            readonly requestType: {
                $type: "reddit.coreplatform.cloudroutines.workerpool.v1.ReplayCallbackWithWindowRequest";
                encode(message: ReplayCallbackWithWindowRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): ReplayCallbackWithWindowRequest;
                fromJSON(object: any): ReplayCallbackWithWindowRequest;
                toJSON(message: ReplayCallbackWithWindowRequest): unknown;
                create(base?: DeepPartial<ReplayCallbackWithWindowRequest>): ReplayCallbackWithWindowRequest;
                fromPartial(object: DeepPartial<ReplayCallbackWithWindowRequest>): ReplayCallbackWithWindowRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "reddit.coreplatform.cloudroutines.workerpool.v1.ReplayCallbackWithWindowResponse";
                encode(message: ReplayCallbackWithWindowResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): ReplayCallbackWithWindowResponse;
                fromJSON(object: any): ReplayCallbackWithWindowResponse;
                toJSON(message: ReplayCallbackWithWindowResponse): unknown;
                create(base?: DeepPartial<ReplayCallbackWithWindowResponse>): ReplayCallbackWithWindowResponse;
                fromPartial(object: DeepPartial<ReplayCallbackWithWindowResponse>): ReplayCallbackWithWindowResponse;
            };
            readonly responseStream: false;
            readonly options: {
                readonly idempotencyLevel: "IDEMPOTENT";
            };
        };
    };
};
interface Rpc {
    request(service: string, method: string, data: Uint8Array, metadata?: Metadata): Promise<Uint8Array>;
}
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
type DeepPartial<T> = T extends Builtin ? T : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export {};
//# sourceMappingURL=workerpool.d.ts.map