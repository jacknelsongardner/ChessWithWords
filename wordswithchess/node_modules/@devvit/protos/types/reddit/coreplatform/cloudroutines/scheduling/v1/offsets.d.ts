/**
 * #offsets.ts
 *
 * Code generated by ts-proto. DO NOT EDIT.
 * @packageDocumentation
 */
import _m0 from "protobufjs/minimal.js";
export interface DataSourceOffsetRange {
    kafkaTopicOffsetRange?: DataSourceOffsetRange_KafkaTopicOffsetRange | undefined;
}
export interface DataSourceOffsetRange_KafkaTopicOffsetRange {
    topic: string;
    startOffsetByPartition: {
        [key: number]: number;
    };
    endOffsetByPartition: {
        [key: number]: number;
    };
}
export interface DataSourceOffsetRange_KafkaTopicOffsetRange_StartOffsetByPartitionEntry {
    key: number;
    value: number;
}
export interface DataSourceOffsetRange_KafkaTopicOffsetRange_EndOffsetByPartitionEntry {
    key: number;
    value: number;
}
export declare const DataSourceOffsetRange: {
    $type: "reddit.coreplatform.cloudroutines.scheduling.v1.DataSourceOffsetRange";
    encode(message: DataSourceOffsetRange, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): DataSourceOffsetRange;
    fromJSON(object: any): DataSourceOffsetRange;
    toJSON(message: DataSourceOffsetRange): unknown;
    create(base?: DeepPartial<DataSourceOffsetRange>): DataSourceOffsetRange;
    fromPartial(object: DeepPartial<DataSourceOffsetRange>): DataSourceOffsetRange;
};
export declare const DataSourceOffsetRange_KafkaTopicOffsetRange: {
    $type: "reddit.coreplatform.cloudroutines.scheduling.v1.DataSourceOffsetRange.KafkaTopicOffsetRange";
    encode(message: DataSourceOffsetRange_KafkaTopicOffsetRange, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): DataSourceOffsetRange_KafkaTopicOffsetRange;
    fromJSON(object: any): DataSourceOffsetRange_KafkaTopicOffsetRange;
    toJSON(message: DataSourceOffsetRange_KafkaTopicOffsetRange): unknown;
    create(base?: DeepPartial<DataSourceOffsetRange_KafkaTopicOffsetRange>): DataSourceOffsetRange_KafkaTopicOffsetRange;
    fromPartial(object: DeepPartial<DataSourceOffsetRange_KafkaTopicOffsetRange>): DataSourceOffsetRange_KafkaTopicOffsetRange;
};
export declare const DataSourceOffsetRange_KafkaTopicOffsetRange_StartOffsetByPartitionEntry: {
    $type: "reddit.coreplatform.cloudroutines.scheduling.v1.DataSourceOffsetRange.KafkaTopicOffsetRange.StartOffsetByPartitionEntry";
    encode(message: DataSourceOffsetRange_KafkaTopicOffsetRange_StartOffsetByPartitionEntry, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): DataSourceOffsetRange_KafkaTopicOffsetRange_StartOffsetByPartitionEntry;
    fromJSON(object: any): DataSourceOffsetRange_KafkaTopicOffsetRange_StartOffsetByPartitionEntry;
    toJSON(message: DataSourceOffsetRange_KafkaTopicOffsetRange_StartOffsetByPartitionEntry): unknown;
    create(base?: DeepPartial<DataSourceOffsetRange_KafkaTopicOffsetRange_StartOffsetByPartitionEntry>): DataSourceOffsetRange_KafkaTopicOffsetRange_StartOffsetByPartitionEntry;
    fromPartial(object: DeepPartial<DataSourceOffsetRange_KafkaTopicOffsetRange_StartOffsetByPartitionEntry>): DataSourceOffsetRange_KafkaTopicOffsetRange_StartOffsetByPartitionEntry;
};
export declare const DataSourceOffsetRange_KafkaTopicOffsetRange_EndOffsetByPartitionEntry: {
    $type: "reddit.coreplatform.cloudroutines.scheduling.v1.DataSourceOffsetRange.KafkaTopicOffsetRange.EndOffsetByPartitionEntry";
    encode(message: DataSourceOffsetRange_KafkaTopicOffsetRange_EndOffsetByPartitionEntry, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): DataSourceOffsetRange_KafkaTopicOffsetRange_EndOffsetByPartitionEntry;
    fromJSON(object: any): DataSourceOffsetRange_KafkaTopicOffsetRange_EndOffsetByPartitionEntry;
    toJSON(message: DataSourceOffsetRange_KafkaTopicOffsetRange_EndOffsetByPartitionEntry): unknown;
    create(base?: DeepPartial<DataSourceOffsetRange_KafkaTopicOffsetRange_EndOffsetByPartitionEntry>): DataSourceOffsetRange_KafkaTopicOffsetRange_EndOffsetByPartitionEntry;
    fromPartial(object: DeepPartial<DataSourceOffsetRange_KafkaTopicOffsetRange_EndOffsetByPartitionEntry>): DataSourceOffsetRange_KafkaTopicOffsetRange_EndOffsetByPartitionEntry;
};
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
type DeepPartial<T> = T extends Builtin ? T : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export {};
//# sourceMappingURL=offsets.d.ts.map