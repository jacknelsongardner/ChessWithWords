import { RegisterWorkerPoolVersionRequest, RegisterWorkerPoolVersionResponse, ReplayCallbackWithWindowRequest, ReplayCallbackWithWindowResponse, } from './workerpool.js';
export class WorkerPoolServiceClientJSON {
    constructor(rpc) {
        this.rpc = rpc;
        this.RegisterWorkerPoolVersion.bind(this);
        this.ReplayCallbackWithWindow.bind(this);
    }
    RegisterWorkerPoolVersion(request) {
        const data = RegisterWorkerPoolVersionRequest.toJSON(request);
        const promise = this.rpc.request('reddit.coreplatform.cloudroutines.workerpool.v1.WorkerPoolService', 'RegisterWorkerPoolVersion', 'application/json', data);
        return promise.then((data) => RegisterWorkerPoolVersionResponse.fromJSON(data));
    }
    ReplayCallbackWithWindow(request) {
        const data = ReplayCallbackWithWindowRequest.toJSON(request);
        const promise = this.rpc.request('reddit.coreplatform.cloudroutines.workerpool.v1.WorkerPoolService', 'ReplayCallbackWithWindow', 'application/json', data);
        return promise.then((data) => ReplayCallbackWithWindowResponse.fromJSON(data));
    }
}
export class WorkerPoolServiceClientProtobuf {
    constructor(rpc) {
        this.rpc = rpc;
        this.RegisterWorkerPoolVersion.bind(this);
        this.ReplayCallbackWithWindow.bind(this);
    }
    RegisterWorkerPoolVersion(request) {
        const data = RegisterWorkerPoolVersionRequest.encode(request).finish();
        const promise = this.rpc.request('reddit.coreplatform.cloudroutines.workerpool.v1.WorkerPoolService', 'RegisterWorkerPoolVersion', 'application/protobuf', data);
        return promise.then((data) => RegisterWorkerPoolVersionResponse.decode(data));
    }
    ReplayCallbackWithWindow(request) {
        const data = ReplayCallbackWithWindowRequest.encode(request).finish();
        const promise = this.rpc.request('reddit.coreplatform.cloudroutines.workerpool.v1.WorkerPoolService', 'ReplayCallbackWithWindow', 'application/protobuf', data);
        return promise.then((data) => ReplayCallbackWithWindowResponse.decode(data));
    }
}
