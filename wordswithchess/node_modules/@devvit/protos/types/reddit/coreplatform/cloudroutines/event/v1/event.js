/**
 * #event.ts
 *
 * Code generated by ts-proto. DO NOT EDIT.
 * @packageDocumentation
 */
/* eslint-disable */
import _m0 from "protobufjs/minimal.js";
import { messageTypeRegistry } from "../../../../../typeRegistry.js";
import { WorkerPool_Source } from "../../workerpool/v1/workerpool.js";
function createBaseEventMessageMetadata() {
    return { defaultTopic: "", publicationSourceWhitelist: [] };
}
export const EventMessageMetadata = {
    $type: "reddit.coreplatform.cloudroutines.event.v1.EventMessageMetadata",
    encode(message, writer = _m0.Writer.create()) {
        if (message.defaultTopic !== "") {
            writer.uint32(10).string(message.defaultTopic);
        }
        for (const v of message.publicationSourceWhitelist) {
            WorkerPool_Source.encode(v, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEventMessageMetadata();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.defaultTopic = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.publicationSourceWhitelist.push(WorkerPool_Source.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            defaultTopic: isSet(object.defaultTopic) ? globalThis.String(object.defaultTopic) : "",
            publicationSourceWhitelist: globalThis.Array.isArray(object?.publicationSourceWhitelist)
                ? object.publicationSourceWhitelist.map((e) => WorkerPool_Source.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.defaultTopic !== "") {
            obj.defaultTopic = message.defaultTopic;
        }
        if (message.publicationSourceWhitelist?.length) {
            obj.publicationSourceWhitelist = message.publicationSourceWhitelist.map((e) => WorkerPool_Source.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return EventMessageMetadata.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseEventMessageMetadata();
        message.defaultTopic = object.defaultTopic ?? "";
        message.publicationSourceWhitelist =
            object.publicationSourceWhitelist?.map((e) => WorkerPool_Source.fromPartial(e)) || [];
        return message;
    },
};
messageTypeRegistry.set(EventMessageMetadata.$type, EventMessageMetadata);
function createBaseEventFieldMetadata() {
    return { shardingIdentifier: false, shardingFieldPath: "" };
}
export const EventFieldMetadata = {
    $type: "reddit.coreplatform.cloudroutines.event.v1.EventFieldMetadata",
    encode(message, writer = _m0.Writer.create()) {
        if (message.shardingIdentifier !== false) {
            writer.uint32(8).bool(message.shardingIdentifier);
        }
        if (message.shardingFieldPath !== "") {
            writer.uint32(18).string(message.shardingFieldPath);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEventFieldMetadata();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.shardingIdentifier = reader.bool();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.shardingFieldPath = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            shardingIdentifier: isSet(object.shardingIdentifier) ? globalThis.Boolean(object.shardingIdentifier) : false,
            shardingFieldPath: isSet(object.shardingFieldPath) ? globalThis.String(object.shardingFieldPath) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.shardingIdentifier !== false) {
            obj.shardingIdentifier = message.shardingIdentifier;
        }
        if (message.shardingFieldPath !== "") {
            obj.shardingFieldPath = message.shardingFieldPath;
        }
        return obj;
    },
    create(base) {
        return EventFieldMetadata.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseEventFieldMetadata();
        message.shardingIdentifier = object.shardingIdentifier ?? false;
        message.shardingFieldPath = object.shardingFieldPath ?? "";
        return message;
    },
};
messageTypeRegistry.set(EventFieldMetadata.$type, EventFieldMetadata);
function createBaseMessageRoute() {
    return { clusterUri: undefined, topic: undefined, partitioningValue: undefined };
}
export const MessageRoute = {
    $type: "reddit.coreplatform.cloudroutines.event.v1.MessageRoute",
    encode(message, writer = _m0.Writer.create()) {
        if (message.clusterUri !== undefined) {
            writer.uint32(10).string(message.clusterUri);
        }
        if (message.topic !== undefined) {
            writer.uint32(18).string(message.topic);
        }
        if (message.partitioningValue !== undefined) {
            writer.uint32(26).string(message.partitioningValue);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMessageRoute();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.clusterUri = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.topic = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.partitioningValue = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            clusterUri: isSet(object.clusterUri) ? globalThis.String(object.clusterUri) : undefined,
            topic: isSet(object.topic) ? globalThis.String(object.topic) : undefined,
            partitioningValue: isSet(object.partitioningValue) ? globalThis.String(object.partitioningValue) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.clusterUri !== undefined) {
            obj.clusterUri = message.clusterUri;
        }
        if (message.topic !== undefined) {
            obj.topic = message.topic;
        }
        if (message.partitioningValue !== undefined) {
            obj.partitioningValue = message.partitioningValue;
        }
        return obj;
    },
    create(base) {
        return MessageRoute.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseMessageRoute();
        message.clusterUri = object.clusterUri ?? undefined;
        message.topic = object.topic ?? undefined;
        message.partitioningValue = object.partitioningValue ?? undefined;
        return message;
    },
};
messageTypeRegistry.set(MessageRoute.$type, MessageRoute);
function isSet(value) {
    return value !== null && value !== undefined;
}
