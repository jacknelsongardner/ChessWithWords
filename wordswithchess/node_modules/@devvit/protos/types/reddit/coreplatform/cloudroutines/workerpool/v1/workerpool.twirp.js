import { TwirpServer, TwirpError, TwirpErrorCode, TwirpContentType, chainInterceptors, } from 'twirp-ts';
import { RegisterWorkerPoolVersionRequest, RegisterWorkerPoolVersionResponse, ReplayCallbackWithWindowRequest, ReplayCallbackWithWindowResponse, } from './workerpool.js';
export var WorkerPoolServiceMethod;
(function (WorkerPoolServiceMethod) {
    WorkerPoolServiceMethod["RegisterWorkerPoolVersion"] = "RegisterWorkerPoolVersion";
    WorkerPoolServiceMethod["ReplayCallbackWithWindow"] = "ReplayCallbackWithWindow";
})(WorkerPoolServiceMethod || (WorkerPoolServiceMethod = {}));
export const WorkerPoolServiceMethodList = [
    WorkerPoolServiceMethod.RegisterWorkerPoolVersion,
    WorkerPoolServiceMethod.ReplayCallbackWithWindow,
];
export function createWorkerPoolServiceServer(service) {
    return new TwirpServer({
        service,
        packageName: 'reddit.coreplatform.cloudroutines.workerpool.v1',
        serviceName: 'WorkerPoolService',
        methodList: WorkerPoolServiceMethodList,
        matchRoute: matchWorkerPoolServiceRoute,
    });
}
function matchWorkerPoolServiceRoute(method, events) {
    switch (method) {
        case 'RegisterWorkerPoolVersion':
            return async (ctx, service, data, interceptors) => {
                ctx = { ...ctx, methodName: 'RegisterWorkerPoolVersion' };
                await events.onMatch(ctx);
                return handleWorkerPoolServiceRegisterWorkerPoolVersionRequest(ctx, service, data, interceptors);
            };
        case 'ReplayCallbackWithWindow':
            return async (ctx, service, data, interceptors) => {
                ctx = { ...ctx, methodName: 'ReplayCallbackWithWindow' };
                await events.onMatch(ctx);
                return handleWorkerPoolServiceReplayCallbackWithWindowRequest(ctx, service, data, interceptors);
            };
        default:
            events.onNotFound();
            const msg = `no handler found`;
            throw new TwirpError(TwirpErrorCode.BadRoute, msg);
    }
}
function handleWorkerPoolServiceRegisterWorkerPoolVersionRequest(ctx, service, data, interceptors) {
    switch (ctx.contentType) {
        case TwirpContentType.JSON:
            return handleWorkerPoolServiceRegisterWorkerPoolVersionJSON(ctx, service, data, interceptors);
        case TwirpContentType.Protobuf:
            return handleWorkerPoolServiceRegisterWorkerPoolVersionProtobuf(ctx, service, data, interceptors);
        default:
            const msg = 'unexpected Content-Type';
            throw new TwirpError(TwirpErrorCode.BadRoute, msg);
    }
}
function handleWorkerPoolServiceReplayCallbackWithWindowRequest(ctx, service, data, interceptors) {
    switch (ctx.contentType) {
        case TwirpContentType.JSON:
            return handleWorkerPoolServiceReplayCallbackWithWindowJSON(ctx, service, data, interceptors);
        case TwirpContentType.Protobuf:
            return handleWorkerPoolServiceReplayCallbackWithWindowProtobuf(ctx, service, data, interceptors);
        default:
            const msg = 'unexpected Content-Type';
            throw new TwirpError(TwirpErrorCode.BadRoute, msg);
    }
}
async function handleWorkerPoolServiceRegisterWorkerPoolVersionJSON(ctx, service, data, interceptors) {
    let request;
    let response;
    try {
        const body = JSON.parse(data.toString() || '{}');
        request = RegisterWorkerPoolVersionRequest.fromJSON(body);
    }
    catch (e) {
        if (e instanceof Error) {
            const msg = 'the json request could not be decoded';
            throw new TwirpError(TwirpErrorCode.Malformed, msg).withCause(e, true);
        }
    }
    if (interceptors && interceptors.length > 0) {
        const interceptor = chainInterceptors(...interceptors);
        response = await interceptor(ctx, request, (ctx, inputReq) => {
            return service.RegisterWorkerPoolVersion(ctx, inputReq);
        });
    }
    else {
        response = await service.RegisterWorkerPoolVersion(ctx, request);
    }
    return JSON.stringify(RegisterWorkerPoolVersionResponse.toJSON(response));
}
async function handleWorkerPoolServiceReplayCallbackWithWindowJSON(ctx, service, data, interceptors) {
    let request;
    let response;
    try {
        const body = JSON.parse(data.toString() || '{}');
        request = ReplayCallbackWithWindowRequest.fromJSON(body);
    }
    catch (e) {
        if (e instanceof Error) {
            const msg = 'the json request could not be decoded';
            throw new TwirpError(TwirpErrorCode.Malformed, msg).withCause(e, true);
        }
    }
    if (interceptors && interceptors.length > 0) {
        const interceptor = chainInterceptors(...interceptors);
        response = await interceptor(ctx, request, (ctx, inputReq) => {
            return service.ReplayCallbackWithWindow(ctx, inputReq);
        });
    }
    else {
        response = await service.ReplayCallbackWithWindow(ctx, request);
    }
    return JSON.stringify(ReplayCallbackWithWindowResponse.toJSON(response));
}
async function handleWorkerPoolServiceRegisterWorkerPoolVersionProtobuf(ctx, service, data, interceptors) {
    let request;
    let response;
    try {
        request = RegisterWorkerPoolVersionRequest.decode(data);
    }
    catch (e) {
        if (e instanceof Error) {
            const msg = 'the protobuf request could not be decoded';
            throw new TwirpError(TwirpErrorCode.Malformed, msg).withCause(e, true);
        }
    }
    if (interceptors && interceptors.length > 0) {
        const interceptor = chainInterceptors(...interceptors);
        response = await interceptor(ctx, request, (ctx, inputReq) => {
            return service.RegisterWorkerPoolVersion(ctx, inputReq);
        });
    }
    else {
        response = await service.RegisterWorkerPoolVersion(ctx, request);
    }
    return Buffer.from(RegisterWorkerPoolVersionResponse.encode(response).finish());
}
async function handleWorkerPoolServiceReplayCallbackWithWindowProtobuf(ctx, service, data, interceptors) {
    let request;
    let response;
    try {
        request = ReplayCallbackWithWindowRequest.decode(data);
    }
    catch (e) {
        if (e instanceof Error) {
            const msg = 'the protobuf request could not be decoded';
            throw new TwirpError(TwirpErrorCode.Malformed, msg).withCause(e, true);
        }
    }
    if (interceptors && interceptors.length > 0) {
        const interceptor = chainInterceptors(...interceptors);
        response = await interceptor(ctx, request, (ctx, inputReq) => {
            return service.ReplayCallbackWithWindow(ctx, inputReq);
        });
    }
    else {
        response = await service.ReplayCallbackWithWindow(ctx, request);
    }
    return Buffer.from(ReplayCallbackWithWindowResponse.encode(response).finish());
}
