/**
 * #app_permission.ts
 *
 * Code generated by ts-proto. DO NOT EDIT.
 * @packageDocumentation
 */
import _m0 from "protobufjs/minimal.js";
/** This enum is used to represent the consent status of an app permission. */
export declare enum ConsentStatus {
    /** CONSENT_STATUS_UNKNOWN - The consent status is unknown, which means it has not been set or is not applicable. */
    CONSENT_STATUS_UNKNOWN = 0,
    /** REVOKED - The user has explicitly denied consent for the app permissions. */
    REVOKED = 1,
    /** GRANTED - The user has granted consent for the app permissions. */
    GRANTED = 2,
    UNRECOGNIZED = -1
}
export declare function consentStatusFromJSON(object: any): ConsentStatus;
export declare function consentStatusToJSON(object: ConsentStatus): number;
/** This enum is used to represent the scopes of permissions that can be granted to an app. */
export declare enum Scope {
    /** SCOPE_UNKNOWN - The scope is unknown, which means it has not been set or is not applicable. */
    SCOPE_UNKNOWN = 0,
    /** SUBMIT_POST - Allows the app to submit posts on behalf of the user. */
    SUBMIT_POST = 1,
    /** SUBMIT_COMMENT - Allows the app to submit comments on behalf of the user. */
    SUBMIT_COMMENT = 2,
    /** SUBSCRIBE_TO_SUBREDDIT - Allows the app to subscribe the user to a subreddit. */
    SUBSCRIBE_TO_SUBREDDIT = 3,
    UNRECOGNIZED = -1
}
export declare function scopeFromJSON(object: any): Scope;
export declare function scopeToJSON(object: Scope): number;
export interface AppPermission {
    appSlug: string;
    subredditId: string;
    scopes: Scope[];
    consentStatus: ConsentStatus;
    updatedAt?: Date | undefined;
}
export interface DevvitApp {
    appSlug: string;
    appName: string;
}
export interface GetAppPermissionsByUserIdRequest {
    userId: string;
}
export interface GetAppPermissionsByUserIdResponse {
    appPermissions: AppPermission[];
    devvitApps: DevvitApp[];
}
export interface GrantAppPermissionRequest {
    userId: string;
    appSlug: string;
    subredditId: string;
    scopes: Scope[];
}
export interface GrantAppPermissionResponse {
    error?: ErrorMessage | undefined;
}
export interface RevokeAppPermissionRequest {
    appSlug: string;
    userId: string;
    subredditId: string;
}
export interface RevokeAppPermissionResponse {
    error?: ErrorMessage | undefined;
}
export interface ErrorMessage {
    message: string;
}
export declare const AppPermission: {
    $type: "reddit.devvit.app_permission.v1.AppPermission";
    encode(message: AppPermission, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): AppPermission;
    fromJSON(object: any): AppPermission;
    toJSON(message: AppPermission): unknown;
    create(base?: DeepPartial<AppPermission>): AppPermission;
    fromPartial(object: DeepPartial<AppPermission>): AppPermission;
};
export declare const DevvitApp: {
    $type: "reddit.devvit.app_permission.v1.DevvitApp";
    encode(message: DevvitApp, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): DevvitApp;
    fromJSON(object: any): DevvitApp;
    toJSON(message: DevvitApp): unknown;
    create(base?: DeepPartial<DevvitApp>): DevvitApp;
    fromPartial(object: DeepPartial<DevvitApp>): DevvitApp;
};
export declare const GetAppPermissionsByUserIdRequest: {
    $type: "reddit.devvit.app_permission.v1.GetAppPermissionsByUserIdRequest";
    encode(message: GetAppPermissionsByUserIdRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GetAppPermissionsByUserIdRequest;
    fromJSON(object: any): GetAppPermissionsByUserIdRequest;
    toJSON(message: GetAppPermissionsByUserIdRequest): unknown;
    create(base?: DeepPartial<GetAppPermissionsByUserIdRequest>): GetAppPermissionsByUserIdRequest;
    fromPartial(object: DeepPartial<GetAppPermissionsByUserIdRequest>): GetAppPermissionsByUserIdRequest;
};
export declare const GetAppPermissionsByUserIdResponse: {
    $type: "reddit.devvit.app_permission.v1.GetAppPermissionsByUserIdResponse";
    encode(message: GetAppPermissionsByUserIdResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GetAppPermissionsByUserIdResponse;
    fromJSON(object: any): GetAppPermissionsByUserIdResponse;
    toJSON(message: GetAppPermissionsByUserIdResponse): unknown;
    create(base?: DeepPartial<GetAppPermissionsByUserIdResponse>): GetAppPermissionsByUserIdResponse;
    fromPartial(object: DeepPartial<GetAppPermissionsByUserIdResponse>): GetAppPermissionsByUserIdResponse;
};
export declare const GrantAppPermissionRequest: {
    $type: "reddit.devvit.app_permission.v1.GrantAppPermissionRequest";
    encode(message: GrantAppPermissionRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GrantAppPermissionRequest;
    fromJSON(object: any): GrantAppPermissionRequest;
    toJSON(message: GrantAppPermissionRequest): unknown;
    create(base?: DeepPartial<GrantAppPermissionRequest>): GrantAppPermissionRequest;
    fromPartial(object: DeepPartial<GrantAppPermissionRequest>): GrantAppPermissionRequest;
};
export declare const GrantAppPermissionResponse: {
    $type: "reddit.devvit.app_permission.v1.GrantAppPermissionResponse";
    encode(message: GrantAppPermissionResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GrantAppPermissionResponse;
    fromJSON(object: any): GrantAppPermissionResponse;
    toJSON(message: GrantAppPermissionResponse): unknown;
    create(base?: DeepPartial<GrantAppPermissionResponse>): GrantAppPermissionResponse;
    fromPartial(object: DeepPartial<GrantAppPermissionResponse>): GrantAppPermissionResponse;
};
export declare const RevokeAppPermissionRequest: {
    $type: "reddit.devvit.app_permission.v1.RevokeAppPermissionRequest";
    encode(message: RevokeAppPermissionRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): RevokeAppPermissionRequest;
    fromJSON(object: any): RevokeAppPermissionRequest;
    toJSON(message: RevokeAppPermissionRequest): unknown;
    create(base?: DeepPartial<RevokeAppPermissionRequest>): RevokeAppPermissionRequest;
    fromPartial(object: DeepPartial<RevokeAppPermissionRequest>): RevokeAppPermissionRequest;
};
export declare const RevokeAppPermissionResponse: {
    $type: "reddit.devvit.app_permission.v1.RevokeAppPermissionResponse";
    encode(message: RevokeAppPermissionResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): RevokeAppPermissionResponse;
    fromJSON(object: any): RevokeAppPermissionResponse;
    toJSON(message: RevokeAppPermissionResponse): unknown;
    create(base?: DeepPartial<RevokeAppPermissionResponse>): RevokeAppPermissionResponse;
    fromPartial(object: DeepPartial<RevokeAppPermissionResponse>): RevokeAppPermissionResponse;
};
export declare const ErrorMessage: {
    $type: "reddit.devvit.app_permission.v1.ErrorMessage";
    encode(message: ErrorMessage, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ErrorMessage;
    fromJSON(object: any): ErrorMessage;
    toJSON(message: ErrorMessage): unknown;
    create(base?: DeepPartial<ErrorMessage>): ErrorMessage;
    fromPartial(object: DeepPartial<ErrorMessage>): ErrorMessage;
};
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
type DeepPartial<T> = T extends Builtin ? T : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export {};
//# sourceMappingURL=app_permission.d.ts.map