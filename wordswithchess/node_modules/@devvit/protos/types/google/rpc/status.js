/**
 * #status.ts
 *
 * Code generated by ts-proto. DO NOT EDIT.
 * @packageDocumentation
 */
/* eslint-disable */
import _m0 from "protobufjs/minimal.js";
import { messageTypeRegistry } from "../../typeRegistry.js";
import { Any } from "../protobuf/any.js";
function createBaseStatus() {
    return { code: 0, message: "", details: [] };
}
export const Status = {
    $type: "google.rpc.Status",
    encode(message, writer = _m0.Writer.create()) {
        if (message.code !== 0) {
            writer.uint32(8).int32(message.code);
        }
        if (message.message !== "") {
            writer.uint32(18).string(message.message);
        }
        for (const v of message.details) {
            Any.encode(v, writer.uint32(26).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseStatus();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.code = reader.int32();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.message = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.details.push(Any.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            code: isSet(object.code) ? globalThis.Number(object.code) : 0,
            message: isSet(object.message) ? globalThis.String(object.message) : "",
            details: globalThis.Array.isArray(object?.details) ? object.details.map((e) => Any.fromJSON(e)) : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.code !== 0) {
            obj.code = Math.round(message.code);
        }
        if (message.message !== "") {
            obj.message = message.message;
        }
        if (message.details?.length) {
            obj.details = message.details.map((e) => Any.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return Status.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseStatus();
        message.code = object.code ?? 0;
        message.message = object.message ?? "";
        message.details = object.details?.map((e) => Any.fromPartial(e)) || [];
        return message;
    },
};
messageTypeRegistry.set(Status.$type, Status);
function isSet(value) {
    return value !== null && value !== undefined;
}
