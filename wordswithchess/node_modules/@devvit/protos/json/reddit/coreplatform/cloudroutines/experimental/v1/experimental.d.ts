/**
 * #experimental.ts
 *
 * Code generated by ts-proto. DO NOT EDIT.
 * @packageDocumentation
 */
import type { Duration } from "../../../../../google/protobuf/duration.js";
/**
 * Ensures that messages are processed in the strict order they are received.
 * This guarantees the sequence of message execution but may reduce throughput.
 * This is the default ordering if not specified, so it is not necessary to set this explicitly.
 *
 * *Note: If you're using the Python SDK, then KeyMessageOrdering is the default ordering.
 */
export type StrictMessageOrdering = {};
/**
 * Enables out-of-order message execution.
 * Messages are batched and processed concurrently, increasing throughput but not guaranteeing order of receipt.
 */
export type LooseMessageOrdering = {};
/**
 * Messages are processed concurrently, similar to LooseMessageOrdering, improving throughput.
 * However, messages with the same Kafka partitioning key will be processed in the order they arrive in.
 * This allows for controlled parallel processing with guarantees on order based on specific keys.
 *
 * *Note: This is the default ordering if not specified when using the Python SDK.
 */
export type KeyMessageOrdering = {};
/** Wrapper struct for all client alert configurations. */
export type AlertConfig = {
    sdkVersion: string;
    consumerLagAlertConfig?: ConsumerLagAlertConfig | undefined;
};
/**
 * Alert configuration for consumer lag. If the entire struct is left blank, the stated defaults are applied; otherwise, all fields must be set.
 * Currently, this is based off of Burrow's consumer lag metric.
 */
export type ConsumerLagAlertConfig = {
    /**
     * Whether or not the alert is disabled.
     * Defaults to false.
     */
    disabled: boolean;
    /**
     * The number of messages the consumer group needs to lag by for the alert to fire.
     * Defaults to 25000.
     */
    threshold: number;
    /**
     * How long the alert threshold must be sustained for the alert to fire.
     * Defaults to 5 minutes. Maximum of 30 minutes.
     */
    thresholdDuration?: Duration | undefined;
    /**
     * Infrared v2 reddit-component name to route the alert to (see https://atlas.snooguts.net/catalog/default/component).
     * Defaults to an empty value, which will route the alert based on the client namespace.
     */
    componentName: string;
};
export type ExperimentalCallbackOptions = {
    strictOrdering?: StrictMessageOrdering | undefined;
    looseOrdering?: LooseMessageOrdering | undefined;
    keyOrdering?: KeyMessageOrdering | undefined;
    /** Wrapper type containing configuration for all client alerts. */
    alertConfig?: AlertConfig | undefined;
    /** URI representing an arbitrary data source to consume messages from. */
    dataSourceUri?: string | undefined;
};
//# sourceMappingURL=experimental.d.ts.map