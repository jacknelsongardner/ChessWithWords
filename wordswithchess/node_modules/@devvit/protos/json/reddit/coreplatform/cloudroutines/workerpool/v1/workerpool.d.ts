/**
 * #workerpool.ts
 *
 * Code generated by ts-proto. DO NOT EDIT.
 * @packageDocumentation
 */
import type { Any } from "../../../../../google/protobuf/any.js";
import type { Status } from "../../../../../google/rpc/status.js";
import type { ExperimentalCallbackOptions } from "../../experimental/v1/experimental.js";
import type { DataSourceOffsetRange } from "../../scheduling/v1/offsets.js";
export type ReplayWindow = {
    start?: string | undefined;
    end?: string | undefined;
};
export type ReplayCallbackWithWindowRequest = {
    callbackNamespace: string;
    callbackName: string;
    replayWindow?: ReplayWindow | undefined;
};
export type ReplayCallbackWithWindowResponse = {
    windowOffsetRange?: DataSourceOffsetRange | undefined;
};
export type RegisterWorkerPoolVersionRequest = {
    /** Reference to the worker pool that the worker is registering to. */
    workerPoolSource?: WorkerPool_Source | undefined;
    workerPoolVersion?: WorkerPool_Version | undefined;
    /**
     * Unique ID of the worker instance.
     * This must match the pod name of the caller.
     */
    workerId: string;
};
export type CallbackInfo = {
    /** The name of the callback */
    name: string;
    requestFullName: string;
    /**
     * The kafka topic that the callback wants to handle.
     * If empty, the kafka topic will default to the fullname of the message descriptor.
     */
    sourceTopic: string;
    /**
     * Configuration for experimental callback settings and features.
     * Not recommended for general usage.
     */
    experimentalOptions?: ExperimentalCallbackOptions | undefined;
    /**
     * A list of extensions which influence the scheduling decisions and consumer behavior. This
     * field is meant to be populated only by the Cloudroutines scheduler. Attempts to configure this
     * outside of the scheduler should fail immediately.
     */
    internalSchedulingExtensions: Any[];
};
export type RegisterWorkerPoolVersionResponse = {
    /** Mapping of callback names to error statuses encountered during registration. */
    errors: {
        [key: string]: Status;
    };
};
export type RegisterWorkerPoolVersionResponse_ErrorsEntry = {
    key: string;
    value?: Status | undefined;
};
/** Used internally within Cloudroutines to asynchronously update worker discovery information. */
export type WorkerPoolEvent = {
    registerVersion?: WorkerPoolEvent_RegisterVersion | undefined;
    evictVersion?: WorkerPoolEvent_EvictVersion | undefined;
    evictPool?: WorkerPoolEvent_EvictPool | undefined;
};
export type WorkerPoolEvent_RegisterVersion = {
    source?: WorkerPool_Source | undefined;
    version?: WorkerPool_Version | undefined;
    /**
     * The unique identifier for the member of the worker pool which triggered this registration event. If blank,
     * this the event was triggered by internal automation or a state resync. This value is usually the pod name.
     */
    workerId: string;
};
export type WorkerPoolEvent_EvictVersion = {
    source?: WorkerPool_Source | undefined;
    version?: WorkerPool_Version | undefined;
};
export type WorkerPoolEvent_EvictPool = {
    source?: WorkerPool_Source | undefined;
};
export type WorkerPool = {
    source?: WorkerPool_Source | undefined;
    versions: {
        [key: string]: WorkerPool_Version;
    };
};
export type WorkerPool_Source = {
    /**
     * Reference to the deployment that the worker pool is associated with.
     * Contains separate fields for the deployment name and namespace.
     */
    deploymentReference?: DeploymentReference | undefined;
};
export type WorkerPool_Version = {
    /**
     * The version of the worker pool. By default this is the pod template hash which we use as the
     * version identifier for a set of pods. When dynamic reloading is enabled, we have to use the
     * computed hash of the callback contents.
     */
    id: string;
    /** The port that the workers are listening on. */
    port: number;
    /** The list of callbacks that the worker pool is able to handle. */
    callbacks: {
        [key: string]: CallbackInfo;
    };
    workloadExtension?: Any | undefined;
    /**
     * Optional version id of the deployment or workload this version struct is associated with. This field is
     * used when dynamic reloading of callbacks is configured.
     */
    workloadVersionId: string;
};
export type WorkerPool_Version_CallbacksEntry = {
    key: string;
    value?: CallbackInfo | undefined;
};
export type WorkerPool_VersionsEntry = {
    key: string;
    value?: WorkerPool_Version | undefined;
};
export type DeploymentReference = {
    /** The name of the deployment. */
    name: string;
    /** The namespace of the deployment. */
    namespace: string;
};
export type EinhornWorkloadExtension = {
    /** The port range that the worker pool is listening on. */
    portRange?: EinhornWorkloadExtension_PortRange | undefined;
};
export type EinhornWorkloadExtension_PortRange = {
    start: number;
    end: number;
};
export type MonocerosWorkloadExtension = {
    /** The port range that the worker pool is listening on. */
    portRange?: MonocerosWorkloadExtension_PortRange | undefined;
};
export type MonocerosWorkloadExtension_PortRange = {
    start: number;
    end: number;
};
//# sourceMappingURL=workerpool.d.ts.map