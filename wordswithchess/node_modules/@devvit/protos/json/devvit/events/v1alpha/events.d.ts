/**
 * #events.ts
 *
 * Code generated by ts-proto. DO NOT EDIT.
 * @packageDocumentation
 */
import type { CommentV2 } from "../../reddit/v2alpha/commentv2.js";
import type { PostV2 } from "../../reddit/v2alpha/postv2.js";
import type { SubredditV2 } from "../../reddit/v2alpha/subredditv2.js";
import type { UserV2 } from "../../reddit/v2alpha/userv2.js";
export declare enum EventSource {
    UNKNOWN_EVENT_SOURCE = 0,
    USER = 1,
    ADMIN = 2,
    MODERATOR = 3,
    UNRECOGNIZED = -1
}
export declare enum DeletionReason {
    UNSPECIFIED_DELETION_REASON = 0,
    SPAM = 1,
    LEGAL = 2,
    OTHER = 3,
    UNKNOWN = 4,
    EXPLICIT_CONTENT = 5,
    UNRECOGNIZED = -1
}
export type PostSubmit = {
    post?: PostV2 | undefined;
    author?: UserV2 | undefined;
    subreddit?: SubredditV2 | undefined;
};
export type PostCreate = {
    post?: PostV2 | undefined;
    author?: UserV2 | undefined;
    subreddit?: SubredditV2 | undefined;
};
export type PostUpdate = {
    post?: PostV2 | undefined;
    author?: UserV2 | undefined;
    previousBody: string;
    subreddit?: SubredditV2 | undefined;
};
export type PostReport = {
    post?: PostV2 | undefined;
    subreddit?: SubredditV2 | undefined;
    reason: string;
};
export type PostFlairUpdate = {
    post?: PostV2 | undefined;
    author?: UserV2 | undefined;
    subreddit?: SubredditV2 | undefined;
};
export type PostDelete = {
    postId: string;
    deletedAt?: string | undefined;
    author?: UserV2 | undefined;
    createdAt?: string | undefined;
    source: EventSource;
    reason: DeletionReason;
    subreddit?: SubredditV2 | undefined;
};
export type PostApprove = {
    post?: PostV2 | undefined;
    approvedAt?: string | undefined;
    author?: UserV2 | undefined;
    source: EventSource;
    subreddit?: SubredditV2 | undefined;
};
export type CommentApprove = {
    comment?: CommentV2 | undefined;
    post?: PostV2 | undefined;
    approvedAt?: string | undefined;
    author?: UserV2 | undefined;
    source: EventSource;
    subreddit?: SubredditV2 | undefined;
};
export type CommentSubmit = {
    comment?: CommentV2 | undefined;
    author?: UserV2 | undefined;
    post?: PostV2 | undefined;
    subreddit?: SubredditV2 | undefined;
};
export type CommentCreate = {
    comment?: CommentV2 | undefined;
    author?: UserV2 | undefined;
    post?: PostV2 | undefined;
    subreddit?: SubredditV2 | undefined;
};
export type CommentUpdate = {
    comment?: CommentV2 | undefined;
    author?: UserV2 | undefined;
    post?: PostV2 | undefined;
    previousBody: string;
    subreddit?: SubredditV2 | undefined;
};
export type CommentReport = {
    comment?: CommentV2 | undefined;
    subreddit?: SubredditV2 | undefined;
    reason: string;
};
export type CommentDelete = {
    commentId: string;
    postId: string;
    parentId: string;
    deletedAt?: string | undefined;
    author?: UserV2 | undefined;
    createdAt?: string | undefined;
    source: EventSource;
    reason: DeletionReason;
    subreddit?: SubredditV2 | undefined;
};
export type SubredditSubscribe = {
    subreddit?: SubredditV2 | undefined;
    subscriber?: UserV2 | undefined;
};
export type AppInstall = {
    subreddit?: SubredditV2 | undefined;
    installer?: UserV2 | undefined;
};
export type AppUpgrade = {
    subreddit?: SubredditV2 | undefined;
    installer?: UserV2 | undefined;
};
export type AccountDelete = {
    userId: string;
    deletedAt?: string | undefined;
    user?: UserV2 | undefined;
};
export type Vote = {
    updatedAt?: string | undefined;
    comment?: CommentV2 | undefined;
    post?: PostV2 | undefined;
    subreddit?: SubredditV2 | undefined;
    upvoteRatio: number;
    score: number;
};
export type AutomoderatorFilterPost = {
    post?: PostV2 | undefined;
    removedAt?: string | undefined;
    reason: string;
    author: string;
    subreddit?: SubredditV2 | undefined;
};
export type AutomoderatorFilterComment = {
    comment?: CommentV2 | undefined;
    removedAt?: string | undefined;
    reason: string;
    author: string;
    subreddit?: SubredditV2 | undefined;
};
export type PostNsfwUpdate = {
    post?: PostV2 | undefined;
    author?: UserV2 | undefined;
    isNsfw: boolean;
    subreddit?: SubredditV2 | undefined;
};
export type PostSpoilerUpdate = {
    post?: PostV2 | undefined;
    author?: UserV2 | undefined;
    isSpoiler: boolean;
    subreddit?: SubredditV2 | undefined;
};
//# sourceMappingURL=events.d.ts.map