/**
 * #app_publish_request.ts
 *
 * Code generated by ts-proto. DO NOT EDIT.
 * @packageDocumentation
 */
import type { AppInfo } from "../app/info/app_info.js";
import type { AppVersionInfo } from "../app_version/info/app_version_info.js";
import type { Redditor } from "../reddit/redditor.js";
import type { AppPublishRequestNote } from "./note/app_publish_request_note.js";
import type { AppPublishRequestReview } from "./review/app_publish_request_review.js";
export declare enum AppPublishRequestStatus {
    APPROVED = 0,
    DENIED = 1,
    OBSOLETE = 2,
    PENDING = 3,
    WITHDRAWN = 4,
    UNRECOGNIZED = -1
}
export declare enum AppPublishRequestVisibility {
    PUBLIC = 0,
    UNLISTED = 1,
    UNRECOGNIZED = -1
}
export type FullPublishRequestInfo = {
    id: string;
    createdAt?: string | undefined;
    createdBy?: Redditor | undefined;
    status: AppPublishRequestStatus;
    visibility: AppPublishRequestVisibility;
    appVersionInfo?: AppVersionInfo | undefined;
    appInfo?: AppInfo | undefined;
    reviews: AppPublishRequestReview[];
    notes: AppPublishRequestNote[];
    /** the number of subreddit the target app is installed to */
    appInstallationCount?: number | undefined;
};
export type MultiplePublishRequestInfos = {
    requests: FullPublishRequestInfo[];
    pagination?: MultiplePublishRequestInfos_PageInfo | undefined;
};
export type MultiplePublishRequestInfos_PageInfo = {
    /** current page number (min 1) */
    page: number;
    /** items per page */
    pageSize: number;
    /** total number of items for the current search criteria */
    total: number;
};
export type AppPRCreateRequest = {
    appVersionId?: string | undefined;
    /** e.g. "comment-nuke@4.2.0" */
    appSlugAndVersionNumber?: string | undefined;
    visibility: AppPublishRequestVisibility;
};
export type AppPRUpdateRequest = {
    appVersionId?: string | undefined;
    publishRequestId?: string | undefined;
    /** e.g. "comment-nuke@4.2.0" */
    appSlugAndVersionNumber?: string | undefined;
    status: AppPublishRequestStatus;
};
export type AppPRGetRequest = {
    appVersionId?: string | undefined;
    publishRequestId?: string | undefined;
    /** e.g. "comment-nuke@4.2.0" */
    appSlugAndVersionNumber?: string | undefined;
};
export type AppPRFindManyRequest = {
    /** unique App Id */
    appId?: string | undefined;
    /** full match by App name (not a slug) */
    appName?: string | undefined;
    /** full match by App slug */
    appSlug?: string | undefined;
    /** partial match by App slug or name */
    searchTerm?: string | undefined;
    pagination?: AppPRFindManyRequest_PaginationInfo | undefined;
    /** how the results should be sorted */
    sort?: AppPRFindManyRequest_SortInfo | undefined;
    /** filter PRs by status (an "OR" rule is applied if more than one status is specified) */
    statuses: AppPublishRequestStatus[];
};
export type AppPRFindManyRequest_PaginationInfo = {
    /** page number (min 1) */
    page: number;
    /** items per page */
    pageSize: number;
};
export type AppPRFindManyRequest_SortInfo = {
    /** field name to sort by */
    field: string;
    /** direction (true = ascending, false = descending) */
    asc: boolean;
};
//# sourceMappingURL=app_publish_request.d.ts.map