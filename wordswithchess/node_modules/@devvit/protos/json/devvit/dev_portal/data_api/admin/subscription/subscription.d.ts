/**
 * #subscription.ts
 *
 * Code generated by ts-proto. DO NOT EDIT.
 * @packageDocumentation
 */
import type { DataSubscription } from "../../../../data/api/v1alpha/admin.js";
import type { DataTier, FirehoseEvent } from "../../../../options/options.js";
import type { SubredditRating } from "../../../../reddit/v2alpha/subredditv2.js";
/** region Subscription messages */
export type CreateDataSubscriptionRequest = {
    tier: DataTier;
    events: FirehoseEvent[];
    subreddits: string[];
    subredditRatings: SubredditRating[];
    customer: string;
    name: string;
    description?: string | undefined;
};
export type CreateDataSubscriptionResponse = {
    subscription?: DataSubscription | undefined;
};
export type GetDataSubscriptionByIdRequest = {
    subscriptionId: string;
};
export type GetDataSubscriptionByIdResponse = {
    subscription?: DataSubscription | undefined;
};
export type DataSubscriptionSubredditInfo = {
    /**
     * t5_ subreddit ID
     * @example "t5_2qh1o"
     */
    id: string;
    /**
     * Subreddit display name - not prefixed with r/
     * @example "aww"
     */
    name: string;
    /** Subreddit icon URL */
    icon: string;
    /** Whether the subreddit is NSFW */
    isNsfw: boolean;
};
/** Data subscription for UI consumption that includes hydrated subreddit info */
export type UIDataSubscription = {
    /** Subscription ID */
    id: string;
    /** Subscription name */
    name: string;
    /** Subscription description */
    description?: string | undefined;
    /** Firehose events types the subscription is subscribed to */
    events: FirehoseEvent[];
    /** Subreddits the subscription is subscribed to */
    subreddits: DataSubscriptionSubredditInfo[];
    /** Subreddit ratings the subscription is subscribed to */
    subredditRatings: SubredditRating[];
};
export type GetDataSubscriptionsByOrganizationNameRequest = {
    organizationName: string;
};
export type GetDataSubscriptionsByOrganizationNameResponse = {
    subscriptions: UIDataSubscription[];
};
export type UpdateDataSubscriptionRequest = {
    /** Id of the subscription to update */
    subscriptionId: string;
    /** New name of the subscription */
    name?: string | undefined;
    /** New description of the subscription */
    description?: string | undefined;
    /** New data tier of the subscription. */
    tier?: DataTier | undefined;
    /** New events. Will overwrite the array of existing events. */
    events: FirehoseEvent[];
    /** New subreddits. Will overwrite the array of existing subreddits. */
    subreddits: string[];
    /** New subreddit ratings. Will overwrite the array of existing subreddit ratings. */
    subredditRatings: SubredditRating[];
};
export type UpdateDataSubscriptionResponse = {
    subscription?: DataSubscription | undefined;
};
export type DeleteDataSubscriptionRequest = {
    subscriptionId: string;
};
export type DeleteDataSubscriptionResponse = {};
//# sourceMappingURL=subscription.d.ts.map