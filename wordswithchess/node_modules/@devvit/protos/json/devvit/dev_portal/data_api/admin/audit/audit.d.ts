/**
 * #audit.ts
 *
 * Code generated by ts-proto. DO NOT EDIT.
 * @packageDocumentation
 */
import type { Organization } from "../../../../data/api/admin/v1alpha/organization.js";
export declare enum AuditLogEventType {
    DATA_SUBSCRIPTION_CREATE = 0,
    DATA_SUBSCRIPTION_UPDATE = 1,
    DATA_SUBSCRIPTION_DELETE = 2,
    DATA_TOKEN_CREATE = 3,
    DATA_TOKEN_REVOKE = 4,
    ORGANIZATION_DELETE = 5,
    ORGANIZATION_UPDATE = 6,
    UNRECOGNIZED = -1
}
export type AuditLogEvent = {
    /** unique identifier for the event */
    id: string;
    /** when the event was created */
    createdAt?: string | undefined;
    /** t2_ id of the user who performed the action */
    userId: string;
    /** type of the event */
    type: AuditLogEventType;
    /** id of the organization the event is associated with */
    organizationId: string;
    dataTokenCreatePayload?: DataTokenCreateAuditLogEventPayload | undefined;
    dataTokenRevokePayload?: DataTokenRevokeAuditLogEventPayload | undefined;
    dataSubscriptionCreatePayload?: DataSubscriptionCreateAuditLogEventPayload | undefined;
    dataSubscriptionUpdatePayload?: DataSubscriptionUpdateAuditLogEventPayload | undefined;
    dataSubscriptionDeletePayload?: DataSubscriptionDeleteAuditLogEventPayload | undefined;
    organizationDeletePayload?: OrganizationDeleteAuditLogEventPayload | undefined;
    organizationUpdatePayload?: OrganizationUpdateAuditLogEventPayload | undefined;
    /**
     * username of the user who performed the action without the u/ prefix
     * @example "spez"
     */
    username: string;
};
export type DataTokenCreateAuditLogEventPayload = {
    /** id of the data token that was created */
    tokenId: string;
    /** expiration date of the data token */
    expiration?: string | undefined;
};
export type DataTokenRevokeAuditLogEventPayload = {
    /** id of the data token that was revoked */
    tokenId: string;
};
export type DataSubscriptionCreateAuditLogEventPayload = {
    subscriptionId: string;
};
export type DataSubscriptionUpdateAuditLogEventPayload = {
    subscriptionId: string;
};
export type DataSubscriptionDeleteAuditLogEventPayload = {
    subscriptionId: string;
};
export type OrganizationDeleteAuditLogEventPayload = {
    organization?: Organization | undefined;
};
export type OrganizationUpdateAuditLogEventPayload = {
    organization?: Organization | undefined;
};
export type GetAuditLogEventsRequest = {
    organizationName: string;
};
export type GetAuditLogEventsResponse = {
    events: AuditLogEvent[];
};
//# sourceMappingURL=audit.d.ts.map