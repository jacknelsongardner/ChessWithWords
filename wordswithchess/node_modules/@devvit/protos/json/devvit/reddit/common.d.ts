/**
 * #common.ts
 *
 * Code generated by ts-proto. DO NOT EDIT.
 * @packageDocumentation
 */
export type AuthorFlairRichText = {
    e?: string | undefined;
    t?: string | undefined;
};
/** https://github.snooguts.net/reddit/reddit-service-award/blob/f102a254636cd403627cc1125fcccab52972ea6b/award/models/award.py */
export type Awarding = {
    awardSubType?: string | undefined;
    awardType?: string | undefined;
    awardingsRequiredToGrantBenefits?: number | undefined;
    coinPrice?: number | undefined;
    coinReward?: number | undefined;
    count?: number | undefined;
    daysOfDripExtension?: number | undefined;
    daysOfPremium?: number | undefined;
    description?: string | undefined;
    endDate?: string | undefined;
    giverCoinReward?: number | undefined;
    iconFormat?: string | undefined;
    iconHeight?: number | undefined;
    iconUrl?: string | undefined;
    iconWidth?: number | undefined;
    id?: string | undefined;
    isEnabled?: boolean | undefined;
    isNew?: boolean | undefined;
    name?: string | undefined;
    pennyDonate?: number | undefined;
    pennyPrice?: number | undefined;
    resizedIcons: Awarding_Icon[];
    resizedStaticIcons: Awarding_Icon[];
    startDate?: string | undefined;
    staticIconHeight?: number | undefined;
    staticIconUrl?: string | undefined;
    staticIconWidth?: number | undefined;
    stickyDurationSeconds?: number | undefined;
    subredditCoinReward?: number | undefined;
    subredditId?: string | undefined;
    tiersByRequiredAwardings?: string | undefined;
};
export type Awarding_Icon = {
    height?: number | undefined;
    url?: string | undefined;
    width?: number | undefined;
};
export type CommentContributionSettings = {
    allowedMediaTypes: string[];
};
export type Gildings = {
    gid1?: number | undefined;
    gid2?: number | undefined;
    gid3?: number | undefined;
};
export type MediaEmbed = {
    content?: string | undefined;
    width?: number | undefined;
    height?: number | undefined;
    sandbox?: boolean | undefined;
    scrolling?: boolean | undefined;
    publicThumbnailUrl?: string | undefined;
};
export type UserFlairRichtext = {
    e?: string | undefined;
    t?: string | undefined;
};
export type BanInfo = {
    auto?: boolean | undefined;
    bannedAt?: number | undefined;
    banner?: string | undefined;
    moderatorBanned?: boolean | undefined;
    note?: string | undefined;
    unbanner?: string | undefined;
    unbannedAt?: number | undefined;
    resetUsed?: boolean | undefined;
    reasonId?: string | undefined;
    reasonTitle?: string | undefined;
    reasonMessage?: string | undefined;
    reasonBy?: string | undefined;
    modNote?: string | undefined;
    banAllTriggered?: boolean | undefined;
    subredditMessage?: string | undefined;
    removeAction: BanInfo_BanInfoAction;
};
export declare enum BanInfo_BanInfoAction {
    UNKNOWN = 0,
    SPAM = 1,
    FILTER = 2,
    REMOVE = 3,
    UNRECOGNIZED = -1
}
//# sourceMappingURL=common.d.ts.map