/**
 * #postv2.ts
 *
 * Code generated by ts-proto. DO NOT EDIT.
 * @packageDocumentation
 */
import type { LinkFlairV2, UserFlairV2 } from "./flair.js";
export declare enum CrowdControlLevel {
    OFF = 0,
    LENIENT = 1,
    MEDIUM = 2,
    STRICT = 3,
    UNRECOGNIZED = -1
}
export declare enum DistinguishType {
    NULL_VALUE = 0,
    ADMIN = 1,
    GOLD = 2,
    GOLD_AUTO = 3,
    YES = 4,
    SPECIAL = 5,
    UNRECOGNIZED = -1
}
export type PostV2 = {
    id: string;
    title: string;
    /** rename to text? */
    selftext: string;
    nsfw: boolean;
    authorId: string;
    crowdControlLevel: CrowdControlLevel;
    numReports: number;
    isGallery: boolean;
    isMeta: boolean;
    createdAt: number;
    isApproved: boolean;
    isArchived: boolean;
    distinguished: DistinguishType;
    ignoreReports: boolean;
    isSelf: boolean;
    isVideo: boolean;
    isLocked: boolean;
    isSpoiler: boolean;
    subredditId: string;
    upvotes: number;
    downvotes: number;
    url: string;
    isSticky: boolean;
    linkFlair?: LinkFlairV2 | undefined;
    authorFlair?: UserFlairV2 | undefined;
    spam: boolean;
    deleted: boolean;
    languageCode: string;
    updatedAt: number;
    gildings: number;
    score: number;
    numComments: number;
    thumbnail: string;
    media?: MediaObject | undefined;
    crosspostParentId: string;
    permalink: string;
    isPoll: boolean;
    isPromoted: boolean;
    isMultiMedia: boolean;
    type: string;
    unlisted: boolean;
    galleryImages: string[];
    /** Indicates if the post contains a single image rather than a gallery of multiple images, which is indicated by the is_gallery field. */
    isImage: boolean;
    mediaUrls: string[];
    isClubContent: boolean;
};
export type Oembed = {
    type: string;
    version: string;
    title: string;
    description: string;
    authorName: string;
    authorUrl: string;
    providerName: string;
    providerUrl: string;
    thumbnailUrl: string;
    thumbnailWidth: number;
    thumbnailHeight: number;
    html: string;
    width: number;
    height: number;
};
export type RedditVideo = {
    bitrateKbps: number;
    fallbackUrl: string;
    height: number;
    width: number;
    scrubberMediaUrl: string;
    dashUrl: string;
    duration: number;
    hlsUrl: string;
    isGif: boolean;
    transcodingStatus: string;
};
export type MediaObject = {
    type: string;
    oembed?: Oembed | undefined;
    redditVideo?: RedditVideo | undefined;
};
//# sourceMappingURL=postv2.d.ts.map