/**
 * #post.ts
 *
 * Code generated by ts-proto. DO NOT EDIT.
 * @packageDocumentation
 */
import type { AuthorFlairRichText, Awarding, BanInfo, Gildings, MediaEmbed } from "./common.js";
export type Post = {
    allAwardings: Awarding[];
    allowLiveComments?: boolean | undefined;
    approved?: boolean | undefined;
    approvedAtUtc?: number | undefined;
    approvedBy?: string | undefined;
    archived?: boolean | undefined;
    author?: string | undefined;
    authorFlairBackgroundColor?: string | undefined;
    authorFlairCssClass?: string | undefined;
    authorFlairRichtext: AuthorFlairRichText[];
    authorFlairTemplateId?: string | undefined;
    authorFlairText?: string | undefined;
    authorFlairTextColor?: string | undefined;
    authorFlairType?: string | undefined;
    authorFullname?: string | undefined;
    authorIsBlocked?: boolean | undefined;
    authorPatreonFlair?: boolean | undefined;
    authorPremium?: boolean | undefined;
    awarders: string[];
    bannedAtUtc?: number | undefined;
    bannedBy?: string | undefined;
    canGild?: boolean | undefined;
    canModPost?: boolean | undefined;
    category?: string | undefined;
    clicked?: boolean | undefined;
    contentCategories: string[];
    contestMode?: boolean | undefined;
    created?: number | undefined;
    createdUtc?: number | undefined;
    discussionType?: string | undefined;
    distinguished?: string | undefined;
    domain?: string | undefined;
    downs?: number | undefined;
    edited?: boolean | undefined;
    gilded?: number | undefined;
    gildings?: Gildings | undefined;
    hidden?: boolean | undefined;
    hideScore?: boolean | undefined;
    id?: string | undefined;
    ignoreReports?: boolean | undefined;
    isCreatedFromAdsUi?: boolean | undefined;
    isCrosspostable?: boolean | undefined;
    isMeta?: boolean | undefined;
    isOriginalContent?: boolean | undefined;
    isRedditMediaDomain?: boolean | undefined;
    isRobotIndexable?: boolean | undefined;
    isSelf?: boolean | undefined;
    isVideo?: boolean | undefined;
    likes?: boolean | undefined;
    linkFlairBackgroundColor?: string | undefined;
    linkFlairCssClass?: string | undefined;
    linkFlairRichtext: string[];
    linkFlairTextColor?: string | undefined;
    linkFlairText?: string | undefined;
    linkFlairType?: string | undefined;
    locked?: boolean | undefined;
    mediaEmbed?: MediaEmbed | undefined;
    mediaOnly?: boolean | undefined;
    media?: Media | undefined;
    modNote?: string | undefined;
    modReasonBy?: string | undefined;
    modReasonTitle?: string | undefined;
    /** array of array of strings :-/ */
    modReports: Array<any>[];
    name?: string | undefined;
    noFollow?: boolean | undefined;
    numComments?: number | undefined;
    numCrossposts?: number | undefined;
    numDuplicates?: number | undefined;
    numReports?: number | undefined;
    over18?: boolean | undefined;
    parentWhitelistStatus?: string | undefined;
    permalink?: string | undefined;
    pinned?: boolean | undefined;
    postHint?: string | undefined;
    preview?: Preview | undefined;
    pwls?: number | undefined;
    quarantine?: boolean | undefined;
    removalReason?: string | undefined;
    removedByCategory?: string | undefined;
    removedBy?: string | undefined;
    removed?: boolean | undefined;
    reportReasons: string[];
    rteMode?: string | undefined;
    saved?: boolean | undefined;
    score?: number | undefined;
    secureMediaEmbed?: MediaEmbed | undefined;
    secureMedia?: Media | undefined;
    selftextHtml?: string | undefined;
    selftext?: string | undefined;
    sendReplies?: boolean | undefined;
    spam?: boolean | undefined;
    spoiler?: boolean | undefined;
    stickied?: boolean | undefined;
    subredditId?: string | undefined;
    subredditNamePrefixed?: string | undefined;
    subredditSubscribers?: number | undefined;
    subredditType?: string | undefined;
    subreddit?: string | undefined;
    suggestedSort?: string | undefined;
    thumbnailHeight?: number | undefined;
    thumbnailWidth?: number | undefined;
    thumbnail?: string | undefined;
    title?: string | undefined;
    topAwardedType?: string | undefined;
    totalAwardsReceived?: number | undefined;
    treatmentTags: string[];
    ups?: number | undefined;
    upvoteRatio?: number | undefined;
    urlOverriddenByDest?: string | undefined;
    url?: string | undefined;
    /** array of array of strings :-/ */
    userReports: Array<any>[];
    viewCount?: number | undefined;
    visited?: boolean | undefined;
    whitelistStatus?: string | undefined;
    wls?: number | undefined;
    /** properties for automod invocation */
    linkFlairTemplateId?: string | undefined;
    crowdControlLevel?: number | undefined;
    isGallery?: boolean | undefined;
    isLiveStream?: boolean | undefined;
    isMetaDiscussion?: boolean | undefined;
    oembed?: OEmbed | undefined;
    banInfo?: BanInfo | undefined;
    /** PRIVATE - DO NOT SET FOR PUBLIC USE */
    markedSpam?: boolean | undefined;
    /** properties for automod invocation */
    verdict?: string | undefined;
    gallery?: RedditPostGallery | undefined;
};
export type Media = {
    redditVideo?: Media_RedditVideo | undefined;
};
export type Media_RedditVideo = {
    bitrateKbps?: number | undefined;
    dashUrl?: string | undefined;
    duration?: number | undefined;
    fallbackUrl?: string | undefined;
    height?: number | undefined;
    hlsUrl?: string | undefined;
    isGif?: boolean | undefined;
    scrubberMediaUrl?: string | undefined;
    transcodingStatus?: string | undefined;
    width?: number | undefined;
};
export type Preview = {
    enabled?: boolean | undefined;
    images: Preview_PreviewImage[];
};
export type Preview_PreviewImage = {
    id?: string | undefined;
    resolutions: Preview_PreviewImage_Image[];
    source?: Preview_PreviewImage_Image | undefined;
    variants?: Preview_PreviewImage_Image | undefined;
};
export type Preview_PreviewImage_Image = {
    height?: number | undefined;
    url?: string | undefined;
    width?: number | undefined;
};
export type OEmbed = {
    authorName?: string | undefined;
    authorUrl?: string | undefined;
    description?: string | undefined;
    title?: string | undefined;
};
export type RedditPostGallery = {
    body?: string | undefined;
    domain?: string | undefined;
    url?: string | undefined;
};
//# sourceMappingURL=post.d.ts.map