/**
 * #buildpack_common.ts
 *
 * Code generated by ts-proto. DO NOT EDIT.
 * @packageDocumentation
 */
import type { Product } from "../../payments/v1alpha/product.js";
import type { BuildInfo, DependencySpec, ServerBundle } from "../../runtime/bundle.js";
/** Actor program and configuration. */
export type Bundle = {
    /** See LinkedBundle.code. */
    code: string;
    /** See LinkedBundle.source_map. */
    sourceMap?: string | undefined;
    /**
     * This is the the detail on the bundle itself **and** its dependendencies.
     *
     * to-do: Can we can rename to "spec" or something like that. This is really
     *   confusing because if you want the Bundle's exported actor name (ie,
     *   `Devvit.init(name, ...)`), you have to ask for it form the dependencies
     *   which doesn't make sense.
     */
    dependencies?: DependencySpec | undefined;
    /**
     * Optional information about the environment the code was built in. Outdated
     * dependencies may indicate an invalid build.
     */
    buildInfo?: BuildInfo | undefined;
    /**
     * This map contains the contents of the assets directory, rooted at the
     * assets directory. The keys are the relative paths of the files, and the
     * values are the devvit asset ids used to look up the asset during upload
     *  e.g. "images/en/banner.jpg": "30d509ee-208d-4b45-86b8-b48ef48cc524",
     */
    assetIds: {
        [key: string]: string;
    };
    /**
     * This map contains html assets from the webroot directory for use in a webview.
     * It has the same structure as asset_ids but is rooted in the webroot directory
     * and is isolated from regular assets.
     */
    webviewAssetIds: {
        [key: string]: string;
    };
    /** This field contains configuration needed to enable the Payments capability */
    paymentsConfig?: PaymentsConfig | undefined;
    /** The metafile contains the size breakdown of the compiled bundle for analysis */
    metafile?: string | undefined;
    /**
     * Standalone server implementation, without Blocks rendering or "Devvit Classic".
     * If provided, this code is expected to be an entry point for an HTTP server that can
     * handle requests at process.env.WEBBIT_PORT. Present in server (UNIVERSAL)
     * bundles only.
     */
    server?: ServerBundle | undefined;
};
export type Bundle_AssetIdsEntry = {
    key: string;
    value: string;
};
export type Bundle_WebviewAssetIdsEntry = {
    key: string;
    value: string;
};
export type PaymentsConfig = {
    /**
     * This map contains products needed by the bundle which will be registered with
     * the Payments API. The string keys are product skus.
     */
    products: {
        [key: string]: Product;
    };
};
export type PaymentsConfig_ProductsEntry = {
    key: string;
    value?: Product | undefined;
};
//# sourceMappingURL=buildpack_common.d.ts.map