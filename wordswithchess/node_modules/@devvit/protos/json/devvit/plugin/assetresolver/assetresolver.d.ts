/**
 * #assetresolver.ts
 *
 * Code generated by ts-proto. DO NOT EDIT.
 * @packageDocumentation
 */
export type GetAssetURLRequest = {
    /** The path to the asset relative to the /assets directory of the project */
    path: string;
    /** If true, look for a webview asset instead of a standard asset */
    webview?: boolean | undefined;
};
export type GetAssetURLResponse = {
    /**
     * The full public URL to the asset (including the protocol); empty string if not found.
     * Example: https://i.redd.it/asdf.png
     */
    url: string;
    /**
     * Whether or not the asset is in the linked bundle. If false, the value in url should
     * be ignored. (It should also be the empty string.)
     */
    found: boolean;
};
export type GetMultipleAssetURLsRequest = {
    /**
     * The paths to the assets relative to the /assets directory of the project
     * could be a mix of file paths, and glob patterns
     */
    paths: string[];
};
export type GetMultipleAssetURLsResponse = {
    /**
     * A map indexed by the paths to the assets relative to the /assets directory of the project
     * whose values are the full public URLs to the assets (including the protocol)
     */
    urls: {
        [key: string]: GetMultipleAssetURLsResponse_GlobResult;
    };
};
export type GetMultipleAssetURLsResponse_GlobResult = {
    /**
     * Whether or not the asset is in the linked bundle. If false, the paths value below should
     * be ignored. (It should also be an empty array.)
     */
    found: boolean;
    /**
     * The full public URL to the asset (including the protocol); empty string if not found.
     * For studio compatability reasons, this is an array.
     * Example: ["https://i.redd.it/asdf.png"]
     */
    paths: string[];
};
export type GetMultipleAssetURLsResponse_UrlsEntry = {
    key: string;
    value?: GetMultipleAssetURLsResponse_GlobResult | undefined;
};
//# sourceMappingURL=assetresolver.d.ts.map