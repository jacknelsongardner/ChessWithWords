/**
 * #logger.ts
 *
 * Code generated by ts-proto. DO NOT EDIT.
 * @packageDocumentation
 */
export declare enum Severity {
    /**
     * DEBUG - Debug logs should never be committed.
     *
     * These logs are always enabled in development builds but disabled in
     * production.
     */
    DEBUG = 0,
    /**
     * INFO - Informational logs should be used to mark significant non-erroneous events.
     * Little information is significant.
     *
     * These logs are enabled by default in development builds but may be
     * disabled in production.
     */
    INFO = 1,
    /**
     * WARN - Warnings should be reported as long as they do not contain sensitive data.
     *
     * These logs are always enabled.
     */
    WARN = 2,
    /**
     * ERROR - Errors should always be reported as long as they do not contain sensitive
     * data.
     */
    ERROR = 3,
    /**
     * VERBOSE - Verbose logs are useful for tracing but usually a hindrance for others not
     * working where the log is placed. Keep our logs clean and add with care.
     *
     * These logs are disabled by default in all environments but can be enabled.
     */
    VERBOSE = 4,
    UNRECOGNIZED = -1
}
export type LogErrorMessage = {
    message: string;
    name: string;
    fileName?: string | undefined;
    lineNumber?: number | undefined;
    columnNumber?: number | undefined;
    stack?: string | undefined;
    timestamp?: string | undefined;
    /**
     * to-do: add labels like LogEventMessage.
     * Deprecated 2023-01-25: Use labels instead.
     *
     * @deprecated
     */
    tags: string[];
};
/**
 * A notable event or historical record for analytics and security.
 *
 * Do not record sensitive data.
 */
export type LogEventMessage = {
    /**
     * The event kind. Events with the same type are considered instances of that
     * event. Eg, 'AppLoad' or 'AppHTTPRequest'.
     *
     * Unexpected event types may not be logged.
     */
    type: string;
    /** The occurence time. */
    timestamp?: string | undefined;
    /**
     * Optional additional indexed information. Eg, 'direction' → 'Up' or
     * 'appName' → 'com.example.test'.
     *
     * Unexpected label keys may be stripped.
     *
     * Labels and data are the same except that labels are indexed.
     */
    labels: {
        [key: string]: string;
    };
    /**
     * Optional additional non-indexed information. Eg, 'dynamicString' → 'abc'
     * 'verboseDetail' -> '123'.
     *
     * Any key-value may safely be included without coordination.
     *
     * Labels and data are the same except that labels are indexed.
     */
    data: {
        [key: string]: string;
    };
};
export type LogEventMessage_LabelsEntry = {
    key: string;
    value: string;
};
export type LogEventMessage_DataEntry = {
    key: string;
    value: string;
};
export type LogMessage = {
    severity: Severity;
    message: string;
    /**
     * Most service implementations default to call time if a timestamp is not
     * provided.
     */
    timestamp?: string | undefined;
    /**
     * to-do: add labels like LogEventMessage.
     * Deprecated 2023-01-25: Use labels instead.
     *
     * @deprecated
     */
    tags: string[];
};
export type LogMessages = {
    messages: LogMessage[];
};
export type LogErrorResponse = {};
export type LogEventResponse = {};
export type LogResponse = {};
//# sourceMappingURL=logger.d.ts.map