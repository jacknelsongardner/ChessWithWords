/**
 * #scheduler.ts
 *
 * Code generated by ts-proto. DO NOT EDIT.
 * @packageDocumentation
 */
import type { ScheduledAction } from "../../actor/scheduler/action.js";
import type { Strings } from "../../runtime/runtime_common.js";
export type ScheduledActionRequest = {
    /** A time in the future to execute the action */
    when?: string | undefined;
    /** A crontab parseable string */
    cron?: string | undefined;
    /** Action data to send back to the Actor */
    action?: ScheduledAction | undefined;
};
export type ScheduledActionResponse = {
    /** Opaque ID for the scheduled action */
    id: string;
};
export type CancelActionRequest = {
    /** Opaque ID returned from a previous call to Schedule() */
    id: string;
};
export type StorableAction = {
    id: string;
    actorHostname: string;
    request?: ScheduledActionRequest | undefined;
    metadata: {
        [key: string]: Strings;
    };
    state?: StorableAction_State | undefined;
};
export declare enum StorableAction_State {
    WAITING = 0,
    CANCELED = 1,
    FAILED = 2,
    DELIVERED = 3,
    UNRECOGNIZED = -1
}
export type StorableAction_MetadataEntry = {
    key: string;
    value?: Strings | undefined;
};
export type ListActionRequest = {
    before?: string | undefined;
    after?: string | undefined;
};
export type GetActionResponse = {
    id: string;
    request?: ScheduledActionRequest | undefined;
};
export type ListActionResponse = {
    actions: GetActionResponse[];
};
//# sourceMappingURL=scheduler.d.ts.map