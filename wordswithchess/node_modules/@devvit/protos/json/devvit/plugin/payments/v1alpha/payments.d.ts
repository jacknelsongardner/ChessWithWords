/**
 * #payments.ts
 *
 * Code generated by ts-proto. DO NOT EDIT.
 * @packageDocumentation
 */
import type { Order, OrderStatus } from "../../../payments/v1alpha/order.js";
import type { Product } from "../../../payments/v1alpha/product.js";
export type GetProductsRequest = {
    /** if empty, all products will be returned */
    skus: string[];
    /** metadata to filter on. these values are combined via AND */
    metadata: {
        [key: string]: string;
    };
};
export type GetProductsRequest_MetadataEntry = {
    key: string;
    value: string;
};
export type GetProductsResponse = {
    products: Product[];
};
/**
 * GetOrderRequest allows for filtering which orders are returned
 * all the parameters are optional. If none are provided, all orders are returned
 */
export type GetOrdersRequest = {
    /** start time filter */
    start?: string | undefined;
    /** end time filter */
    end?: string | undefined;
    /** number of items to return */
    limit: number;
    /** unique identifier for the product */
    sku: string;
    /** the t2 id of purchasing user */
    buyer: string;
    /** the lifecycle status of the order */
    status: OrderStatus;
    /** metadata to filter on. these values are combined via AND */
    metadata: {
        [key: string]: string;
    };
    /** pagination cursor */
    cursor: string;
};
export type GetOrdersRequest_MetadataEntry = {
    key: string;
    value: string;
};
export type PageInfo = {
    hasNextPage: boolean;
    endCursor: string;
    hasPreviousPage: boolean;
    startCursor: string;
};
export type GetOrdersResponse = {
    orders: Order[];
    pageInfo?: PageInfo | undefined;
};
export type AcknowledgeOrderDeliveryRequest = {
    /** the order that is being acknowledged */
    orderId: string;
};
export type AcknowledgeOrderDeliveryResponse = {};
//# sourceMappingURL=payments.d.ts.map