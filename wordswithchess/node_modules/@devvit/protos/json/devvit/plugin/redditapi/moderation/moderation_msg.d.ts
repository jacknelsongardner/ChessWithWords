/**
 * #moderation_msg.ts
 *
 * Code generated by ts-proto. DO NOT EDIT.
 * @packageDocumentation
 */
/** Requests */
export type AboutLogRequest = {
    /** a modaction thing uuid */
    after?: string | undefined;
    /** a modaction thing uuid */
    before?: string | undefined;
    count?: number | undefined;
    /** the maximum number of items desired (default: 25, maximum: 500) */
    limit?: number | undefined;
    /** (optional) the string all */
    show?: string | undefined;
    /** (optional) a moderator filter */
    mod?: string | undefined;
    /**
     * one of (banuser, unbanuser, spamlink, removelink, approvelink, spamcomment, removecomment,
     * approvecomment, addmoderator, showcomment, invitemoderator, uninvitemoderator,
     * acceptmoderatorinvite, removemoderator, addcontributor, removecontributor, editsettings,
     * editflair, distinguish, marknsfw, wikibanned, wikicontributor, wikiunbanned, wikipagelisted,
     * removewikicontributor, wikirevise, wikipermlevel, ignorereports, unignorereports,
     * setpermissions, setsuggestedsort, sticky, unsticky, setcontestmode, unsetcontestmode, lock,
     * unlock, muteuser, unmuteuser, createrule, editrule, reorderrules, deleterule, spoiler,
     * unspoiler, modmail_enrollment, community_styling, community_widgets, markoriginalcontent,
     * collections, events, hidden_award, add_community_topics, remove_community_topics,
     * create_scheduled_post, edit_scheduled_post, delete_scheduled_post, submit_scheduled_post,
     * edit_post_requirements, invitesubscriber, submit_content_rating_survey,
     * adjust_post_crowd_control_level, enable_post_crowd_control_filter,
     * disable_post_crowd_control_filter, deleteoverriddenclassification, overrideclassification,
     * reordermoderators, snoozereports, unsnoozereports, addnote, deletenote, addremovalreason,
     * createremovalreason, updateremovalreason, deleteremovalreason)
     */
    type?: string | undefined;
    /** subreddit name without the r/ */
    subreddit?: string | undefined;
};
export type AboutLocationRequest = {
    /** thing id (e.g t1_15bfi0) */
    after?: string | undefined;
    /** thing id (e.g t1_15bfi0) */
    before?: string | undefined;
    count?: number | undefined;
    /** the maximum number of items desired (default: 25, maximum: 100) */
    limit?: number | undefined;
    location: string;
    /** one of (links, comments, chat_comments) */
    only?: string | undefined;
    /** (optional) the string all */
    show?: string | undefined;
    /** subreddit name without the r/ */
    subreddit: string;
};
export type AcceptModeratorInviteRequest = {
    /** subreddit name without the r/ */
    subreddit: string;
};
export type BasicModerationIdRequest = {
    id: string;
};
export type DistinguishRequest = {
    /** one of (yes, no, admin, special) */
    how: string;
    /** thing id (e.g t1_15bfi0) */
    id: string;
    /** stick the distinguished comment to the top of all comments threads */
    sticky: boolean;
};
export type RemoveRequest = {
    /** thing id (e.g t1_15bfi0) */
    id: string;
    /** is it spam? */
    spam: boolean;
};
export type SnoozeReportsRequest = {
    /** thing id (e.g t1_15bfi0) */
    id: string;
    /** report reason */
    reason: string;
};
export type UpdateCrowdControlLevelRequest = {
    /** thing id (e.g t1_15bfi0) */
    id: string;
    /** an integer between 0 and 3 */
    level: number;
};
export type StylesheetRequest = {
    /** subreddit name without the r/ */
    subreddit: string;
};
/** Responses */
export type AboutLogResponse = {
    kind: string;
    data?: AboutLogResponse_AboutLogListing | undefined;
};
export type AboutLogResponse_LogObject = {
    description?: string | undefined;
    targetBody?: string | undefined;
    modId36?: string | undefined;
    createdUtc?: number | undefined;
    subreddit?: string | undefined;
    targetTitle?: string | undefined;
    targetPermalink?: string | undefined;
    subredditNamePrefixed?: string | undefined;
    details?: string | undefined;
    action?: string | undefined;
    targetAuthor?: string | undefined;
    targetFullname?: string | undefined;
    srId36?: string | undefined;
    id?: string | undefined;
    mod?: string | undefined;
};
export type AboutLogResponse_AboutLogListing = {
    after?: string | undefined;
    before?: string | undefined;
    children: AboutLogResponse_AboutLogListing_WrappedLogObject[];
    dist?: number | undefined;
};
export type AboutLogResponse_AboutLogListing_WrappedLogObject = {
    kind: string;
    data?: AboutLogResponse_LogObject | undefined;
};
//# sourceMappingURL=moderation_msg.d.ts.map