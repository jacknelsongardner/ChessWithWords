/**
 * #flair_msg.ts
 *
 * Code generated by ts-proto. DO NOT EDIT.
 * @packageDocumentation
 */
export type ClearFlairTemplatesRequest = {
    /** subreddit name without the r/ e.g. 'devvit_test' */
    subreddit: string;
    /** one of (USER_FLAIR, LINK_FLAIR) */
    flairType: string;
};
export type DeleteFlairRequest = {
    /** subreddit name without the r/ e.g. 'devvit_test' */
    subreddit: string;
    /** a user by name */
    name: string;
};
export type DeleteFlairTemplateRequest = {
    /** subreddit name without the r/ e.g. 'devvit_test' */
    subreddit: string;
    flairTemplateId: string;
};
export type FlairRequest = {
    /** subreddit name without the r/ e.g. 'devvit_test' */
    subreddit: string;
    /** a valid subreddit image name */
    cssClass?: string | undefined;
    /** the thing id of a link e.g. t3_15bfi0 */
    link?: string | undefined;
    /** a user by name */
    name?: string | undefined;
    /** a string no longer than 64 characters */
    text?: string | undefined;
};
export type FlairTemplateOrderRequest = {
    /** subreddit name without the r/ e.g. 'devvit_test' */
    subreddit: string;
    /** one of (USER_FLAIR, LINK_FLAIR) */
    flairType: string;
    order: string[];
};
export type FlairConfigRequest = {
    /** subreddit name without the r/ e.g. 'devvit_test' */
    subreddit: string;
    /** is flair enabled? e.g. true/false */
    flairEnabled: boolean;
    /** position of flair e.g. one of (left, right) */
    flairPosition: string;
    /** a boolean value e.g. true/false */
    flairSelfAssignEnabled: boolean;
    /** position of link flair */
    linkFlairPosition: string;
    /** a boolean value e.g. true/false */
    linkFlairSelfAssignEnabled: boolean;
};
export type FlairCsvRequest = {
    /** subreddit name without the r/ e.g. 'devvit_test' */
    subreddit: string;
    /** flair information, separated by commas */
    flairCsv: string;
};
export type FlairListRequest = {
    /** subreddit name without the r/ e.g. 'devvit_test' */
    subreddit: string;
    /** thing id e.g. t3_15bfi0 */
    after?: string | undefined;
    /** thing id e.g. t3_15bfi0 */
    before?: string | undefined;
    /** a positive integer (default: 0) */
    count?: number | undefined;
    /** the maximum number of items desired (default: 25, maximum: 1000) */
    limit?: number | undefined;
    /** a user by name */
    name?: string | undefined;
    /** (optional) the string "all" */
    show?: string | undefined;
};
export type FlairSelectorRequest = {
    /** subreddit name without the r/ e.g. 'devvit_test' */
    subreddit: string;
    /** is it a new link e.g. true/false */
    isNewlink: boolean;
    /** the thing id of a link e.g. t3_15bfi0 */
    link?: string | undefined;
    /** a user by name */
    name: string;
};
export type FlairTemplateRequest = {
    /** subreddit name without the r/ e.g. 'devvit_test' */
    subreddit: string;
    /** one of (all, emoji, text) */
    allowableContent: string;
    /** a 6-digit rgb hex color, e.g. #AABBCC */
    backgroundColor: string;
    /** a valid subreddit image name */
    cssClass: string;
    /** no-op */
    flairTemplateId: string;
    /** one of (USER_FLAIR, LINK_FLAIR) */
    flairType: string;
    /** an integer between 1 and 10 (default: 10) */
    maxEmojis: number;
    /** a boolean value */
    modOnly: boolean;
    /** no-op */
    overrideCss: boolean;
    /** a string no longer than 64 characters */
    text: string;
    /** one of (light, dark) */
    textColor: string;
    /** is this text editable? e.g. true/false */
    textEditable: boolean;
};
export type LinkFlairRequest = {
    /** subreddit name without the r/ e.g. 'devvit_test' */
    subreddit: string;
};
export type SelectFlairRequest = {
    /** subreddit name without the r/ e.g. 'devvit_test' */
    subreddit: string;
    /** a 6-digit rgb hex color, e.g. #AABBCC */
    backgroundColor: string;
    /** a valid subreddit image name */
    cssClass: string;
    /** no-op */
    flairTemplateId: string;
    /** the thing id of a link e.g. t3_15bfi0 */
    link: string;
    /** a user by name */
    name: string;
    /** "all" saves attributes and returns rtjson; "only" only returns rtjson; "none" only saves attributes e.g. [all|only|none] */
    returnRtjson: string;
    /** a string no longer than 64 characters */
    text: string;
    /** one of (light, dark) */
    textColor: string;
};
export type SetFlairEnabledRequest = {
    /** subreddit name without the r/ e.g. 'devvit_test' */
    subreddit: string;
    /** is flair enabled? e.g. true/false */
    flairEnabled: boolean;
};
export type FlairObject = {
    allowableContent?: string | undefined;
    text?: string | undefined;
    textColor?: string | undefined;
    modOnly: boolean;
    backgroundColor?: string | undefined;
    id?: string | undefined;
    cssClass?: string | undefined;
    maxEmojis: number;
    textEditable: boolean;
    overrideCss: boolean;
    type?: string | undefined;
    flairType?: string | undefined;
    richtext: FlairObject_FlairRichText[];
};
/** RichText document for flair */
export type FlairObject_FlairRichText = {
    /** enum of element types.  e.g. emoji or text */
    e?: string | undefined;
    /** text to show up in the flair, e.g. "Need Advice" */
    t?: string | undefined;
    /** emoji references, e.g. ":rainbow:" */
    a?: string | undefined;
    /** url string, e.g. "https://reddit.com/" */
    u?: string | undefined;
};
export type FlairArray = {
    flair: FlairObject[];
};
export type FlairSelectorResponseOption = {
    flairCssClass?: string | undefined;
    flairTemplateId?: string | undefined;
    flairText?: string | undefined;
    flairTextEditable?: boolean | undefined;
    flairPosition?: string | undefined;
};
export type FlairSelectorResponse = {
    current?: FlairSelectorResponseOption | undefined;
    choices: FlairSelectorResponseOption[];
};
export type UserFlair = {
    flairCssClass?: string | undefined;
    user?: string | undefined;
    flairText?: string | undefined;
};
export type FlairListResponse = {
    users: UserFlair[];
    next?: string | undefined;
    prev?: string | undefined;
};
/**
 * options derived from this:
 * https://github.snooguts.net/reddit/reddit-public/blob/ec7d110c0be319e68502828a2662b86caca03a3c/r2/r2/controllers/api.py#L8531
 */
export type FlairCsvResultError = {
    css?: string | undefined;
    row?: string | undefined;
    user?: string | undefined;
};
export type FlairCsvResultWarning = {
    text?: string | undefined;
};
export type FlairCsvResult = {
    status?: string | undefined;
    ok?: boolean | undefined;
    errors?: FlairCsvResultError | undefined;
    warnings?: FlairCsvResultWarning | undefined;
};
export type FlairCsvResponse = {
    result: FlairCsvResult[];
};
//# sourceMappingURL=flair_msg.d.ts.map