/**
 * #modnote_msg.ts
 *
 * Code generated by ts-proto. DO NOT EDIT.
 * @packageDocumentation
 */
/** Requests */
export type DeleteNotesRequest = {
    /** subreddit name without the r/ */
    subreddit: string;
    /** a unique ID for the note to be deleted (should have a ModNote_ prefix) */
    noteId: string;
    /** account username */
    user: string;
};
export type GetNotesRequest = {
    /** subreddit name without the r/ */
    subreddit: string;
    /** (optional) an encoded string used for pagination with mod notes */
    before?: string | undefined;
    /**
     * (optional) one of (NOTE, APPROVAL, REMOVAL, BAN, MUTE, INVITE, SPAM, CONTENT_CHANGE,
     * MOD_ACTION, ALL), to be used for querying specific types of mod notes (default: all)
     */
    filter?: string | undefined;
    /** (optional) the number of mod notes to return in the response payload (default: 25, max: 100) */
    limit?: number | undefined;
    /** account username */
    user: string;
};
export type PostNotesRequest = {
    subreddit: string;
    /** (optional) one of (BOT_BAN, PERMA_BAN, BAN, ABUSE_WARNING, SPAM_WARNING, SPAM_WATCH, SOLID_CONTRIBUTOR, HELPFUL_USER) */
    label?: string | undefined;
    /** Content of the note, should be a string with a maximum character limit of 250 */
    note: string;
    /** (optional) a fullname of a comment or post (should have either a t1 or t3 prefix) */
    redditId?: string | undefined;
    /** account username */
    user: string;
};
export type RecentNotesRequest = {
    /** a comma delimited list of subreddits by name (e.g. 'pics,worldnews') */
    subreddits: string;
    /** a comma delimited list of usernames (e.g. 'foo,bar') */
    users: string;
};
export type PostRemovalNoteRequest = {
    /** list of thing ids */
    itemIds: string[];
    /** id of a Removal Reason - you can leave this as an empty string if you don't have one */
    reasonId: string;
    /** the reason for removal (maximum 100 characters) */
    modNote?: string | undefined;
};
/** Responses */
export type ModNotesResponse = {
    modNotes: ModNoteObject[];
    startCursor?: string | undefined;
    endCursor?: string | undefined;
    hasNextPage?: boolean | undefined;
};
export type DeleteNotesResponse = {
    deleted?: boolean | undefined;
};
export type ModNoteObject = {
    subredditId?: string | undefined;
    operatorId?: string | undefined;
    modActionData?: ModNoteObject_ModActionData | undefined;
    userNoteData?: ModNoteObject_UserNoteData | undefined;
    subreddit?: string | undefined;
    user?: string | undefined;
    operator?: string | undefined;
    id?: string | undefined;
    userId?: string | undefined;
    createdAt?: number | undefined;
    cursor?: string | undefined;
    type?: string | undefined;
};
export type ModNoteObject_ModActionData = {
    action?: string | undefined;
    redditId?: string | undefined;
    details?: string | undefined;
    description?: string | undefined;
};
export type ModNoteObject_UserNoteData = {
    note?: string | undefined;
    redditId?: string | undefined;
    label?: string | undefined;
};
export type PostModNotesResponse = {
    created?: ModNoteObject | undefined;
};
//# sourceMappingURL=modnote_msg.d.ts.map