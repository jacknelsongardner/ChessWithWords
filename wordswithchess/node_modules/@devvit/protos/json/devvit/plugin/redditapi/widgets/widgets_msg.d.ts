/**
 * #widgets_msg.ts
 *
 * Code generated by ts-proto. DO NOT EDIT.
 * @packageDocumentation
 */
import type { AuthorFlairRichText } from "../../../reddit/common.js";
export type WidgetStyles = {
    backgroundColor?: string | undefined;
    headerColor?: string | undefined;
};
export type WidgetImage = {
    url: string;
    /** required by can be an empty string */
    linkUrl: string;
    height: number;
    width: number;
};
export type ImageWidget = {
    id: string;
    kind: string;
    data: WidgetImage[];
    shortName: string;
    styles?: WidgetStyles | undefined;
    subreddit?: string | undefined;
};
export type AddImageWidgetRequest = {
    subreddit: string;
    data: WidgetImage[];
    shortName: string;
    styles?: WidgetStyles | undefined;
};
export type UpdateImageWidgetRequest = {
    subreddit: string;
    id: string;
    data: WidgetImage[];
    shortName: string;
    styles?: WidgetStyles | undefined;
};
export type CalendarWidgetConfiguration = {
    numEvents: number;
    showDate: boolean;
    showDescription: boolean;
    showLocation: boolean;
    showTime: boolean;
    showTitle: boolean;
};
export type CalendarWidget = {
    id: string;
    kind: string;
    configuration?: CalendarWidgetConfiguration | undefined;
    googleCalendarId: string;
    requiresSync: boolean;
    shortName: string;
    styles?: WidgetStyles | undefined;
};
export type AddCalendarWidgetRequest = {
    subreddit: string;
    configuration?: CalendarWidgetConfiguration | undefined;
    googleCalendarId: string;
    requiresSync: boolean;
    shortName: string;
    styles?: WidgetStyles | undefined;
};
export type UpdateCalendarWidgetRequest = {
    subreddit: string;
    id: string;
    configuration?: CalendarWidgetConfiguration | undefined;
    googleCalendarId: string;
    requiresSync: boolean;
    shortName: string;
    styles?: WidgetStyles | undefined;
};
export type TextAreaWidget = {
    id: string;
    kind: string;
    shortName: string;
    text: string;
    styles?: WidgetStyles | undefined;
};
export type AddTextAreaWidgetRequest = {
    subreddit: string;
    shortName: string;
    text: string;
    styles?: WidgetStyles | undefined;
};
export type UpdateTextAreaWidgetRequest = {
    subreddit: string;
    id: string;
    shortName: string;
    text: string;
    styles?: WidgetStyles | undefined;
};
export type WidgetButton = {
    kind: string;
    text: string;
    url?: string | undefined;
    imageUrl?: string | undefined;
    linkUrl?: string | undefined;
    color?: string | undefined;
    fillColor?: string | undefined;
    textColor?: string | undefined;
    height?: number | undefined;
    width?: number | undefined;
    hoverState?: WidgetButton_HoverState | undefined;
};
export type WidgetButton_HoverState = {
    kind: string;
    color?: string | undefined;
    fillColor?: string | undefined;
    text?: string | undefined;
    textColor?: string | undefined;
    imageUrl?: string | undefined;
    height?: number | undefined;
    width?: number | undefined;
};
export type ButtonWidget = {
    id: string;
    kind: string;
    shortName: string;
    description: string;
    buttons: WidgetButton[];
    styles?: WidgetStyles | undefined;
};
export type AddButtonWidgetRequest = {
    subreddit: string;
    shortName: string;
    description: string;
    buttons: WidgetButton[];
    styles?: WidgetStyles | undefined;
};
export type UpdateButtonWidgetRequest = {
    subreddit: string;
    id: string;
    shortName: string;
    description: string;
    buttons: WidgetButton[];
    styles?: WidgetStyles | undefined;
};
export type CommunityListWidget = {
    id: string;
    kind: string;
    shortName: string;
    data: CommunityListWidget_CommunityData[];
    styles?: WidgetStyles | undefined;
};
export type CommunityListWidget_CommunityData = {
    communityIcon: string;
    iconUrl: string;
    isNsfw: boolean;
    isSubscribed: boolean;
    name: string;
    prefixedName: string;
    primaryColor: string;
    subscribers: number;
    type: string;
};
export type AddCommunityListWidgetRequest = {
    subreddit: string;
    shortName: string;
    data: string[];
    styles?: WidgetStyles | undefined;
};
export type UpdateCommunityListWidgetRequest = {
    subreddit: string;
    id: string;
    shortName: string;
    data: string[];
    styles?: WidgetStyles | undefined;
};
export type UpdateCommunityListWidgetResponse = {
    kind: string;
    shortName: string;
    data: string[];
    styles?: WidgetStyles | undefined;
};
export type PostFlairWidget = {
    id: string;
    kind: string;
    display: string;
    order: string[];
    shortName: string;
    styles?: WidgetStyles | undefined;
    subreddit?: string | undefined;
};
export type AddPostFlairWidgetRequest = {
    subreddit: string;
    display: string;
    order: string[];
    shortName: string;
    styles?: WidgetStyles | undefined;
};
export type UpdatePostFlairWidgetRequest = {
    subreddit: string;
    id: string;
    display: string;
    order: string[];
    shortName: string;
    styles?: WidgetStyles | undefined;
};
export type DeleteWidgetRequest = {
    id: string;
    subreddit: string;
};
export type GetWidgetsRequest = {
    subreddit: string;
    progressiveImages?: boolean | undefined;
};
export type GetWidgetsResponse = {
    layout?: GetWidgetsResponse_Layout | undefined;
    items: {
        [key: string]: GetWidgetsResponse_WidgetItem;
    };
};
export type GetWidgetsResponse_WidgetOrdering = {
    order: string[];
};
export type GetWidgetsResponse_Layout = {
    idCardWidget: string;
    topbar?: GetWidgetsResponse_WidgetOrdering | undefined;
    sidebar?: GetWidgetsResponse_WidgetOrdering | undefined;
    moderatorWidget: string;
};
export type GetWidgetsResponse_WidgetItem = {
    id: string;
    kind: string;
    styles?: WidgetStyles | undefined;
    shortName: string;
    description?: string | undefined;
    data: GetWidgetsResponse_WidgetItem_Data[];
    buttons: WidgetButton[];
    subscribersCount?: number | undefined;
    currentlyViewingText?: string | undefined;
    currentlyViewingCount?: number | undefined;
    subscribersText?: string | undefined;
    showWiki?: boolean | undefined;
    templates: {
        [key: string]: GetWidgetsResponse_WidgetItem_PostFlairTemplate;
    };
    display?: string | undefined;
    order: string[];
    mods: GetWidgetsResponse_WidgetItem_Moderator[];
    totalMods?: number | undefined;
    googleCalendarId?: string | undefined;
    requiresSync?: boolean | undefined;
    configuration?: CalendarWidgetConfiguration | undefined;
    text?: string | undefined;
    css?: string | undefined;
    stylesheetUrl?: string | undefined;
    height?: number | undefined;
    imageData: WidgetImage[];
};
export type GetWidgetsResponse_WidgetItem_Data = {
    url?: string | undefined;
    linkUrl?: string | undefined;
    height?: number | undefined;
    width?: number | undefined;
    iconUrl?: string | undefined;
    name?: string | undefined;
    prefixedName?: string | undefined;
    isSubscribed?: boolean | undefined;
    type?: string | undefined;
    subscribers?: number | undefined;
    communityIcon?: string | undefined;
    isNsfw?: boolean | undefined;
    text?: string | undefined;
    children: MenuWidgetItem[];
};
export type GetWidgetsResponse_WidgetItem_Moderator = {
    name: string;
    authorFlairType: string;
    authorFlairTextColor: string;
    authorFlairBackgroundColor: string;
    authorFalirText: string;
    authorFlairRichtext: AuthorFlairRichText[];
};
export type GetWidgetsResponse_WidgetItem_PostFlairTemplate = {
    text: string;
    richtext: AuthorFlairRichText[];
    backgroundColor: string;
    templateId: string;
    textColor: string;
    type: string;
};
export type GetWidgetsResponse_WidgetItem_TemplatesEntry = {
    key: string;
    value?: GetWidgetsResponse_WidgetItem_PostFlairTemplate | undefined;
};
export type GetWidgetsResponse_ItemsEntry = {
    key: string;
    value?: GetWidgetsResponse_WidgetItem | undefined;
};
export type MenuWidgetItem = {
    text?: string | undefined;
    url?: string | undefined;
    children: MenuWidgetItem[];
};
export type OrderWidgetsRequest = {
    subreddit: string;
    order: string[];
};
export type GetWidgetImageUploadLeaseRequest = {
    subreddit: string;
    filepath: string;
    mimetype: string;
};
export type GetWidgetImageUploadLeaseResponse = {
    s3UploadLease?: GetWidgetImageUploadLeaseResponse_S3UploadLease | undefined;
    websocketUrl: string;
};
export type GetWidgetImageUploadLeaseResponse_S3UploadLease = {
    action: string;
    fields: GetWidgetImageUploadLeaseResponse_S3UploadLease_NameValuePair[];
};
export type GetWidgetImageUploadLeaseResponse_S3UploadLease_NameValuePair = {
    name: string;
    value: string;
};
export type CustomWidget = {
    id: string;
    kind: string;
    shortName: string;
    text: string;
    height: number;
    css: string;
    imageData: WidgetImage[];
    styles?: WidgetStyles | undefined;
};
export type AddCustomWidgetRequest = {
    subreddit: string;
    shortName: string;
    text: string;
    height: number;
    css: string;
    imageData: WidgetImage[];
    styles?: WidgetStyles | undefined;
};
export type UpdateCustomWidgetRequest = {
    subreddit: string;
    id: string;
    shortName: string;
    text: string;
    height: number;
    css: string;
    imageData: WidgetImage[];
    styles?: WidgetStyles | undefined;
};
//# sourceMappingURL=widgets_msg.d.ts.map