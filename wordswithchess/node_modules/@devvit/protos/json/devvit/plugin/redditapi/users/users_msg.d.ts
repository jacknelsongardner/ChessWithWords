/**
 * #users_msg.ts
 *
 * Code generated by ts-proto. DO NOT EDIT.
 * @packageDocumentation
 */
import type { User } from "../../../reddit/user.js";
/** Requests */
export type GenericUsersRequest = {
    /** thing id e.g. 't3_15bfi0' */
    id?: string | undefined;
    /** a valid, existing reddit username */
    username: string;
};
export type BlockUserRequest = {
    /** account thing id e.g. 't3_15bfi0' */
    accountId?: string | undefined;
    /** a valid, existing reddit username */
    name?: string | undefined;
};
export type FriendRequest = {
    /** thing id e.g. 't3_15bfi0' */
    banContext?: string | undefined;
    /** raw markdown text */
    banMessage?: string | undefined;
    /** a string no longer than 100 characters */
    banReason?: string | undefined;
    /** an integer between 1 and 999 */
    duration?: number | undefined;
    /** the name of an existing user */
    name: string;
    /** a string no longer than 300 characters */
    note?: string | undefined;
    permissions?: string | undefined;
    /** one of (friend, moderator, moderator_invite, contributor, banned, muted, wikibanned, wikicontributor) */
    type: string;
    /** subreddit name without the r/ e.g. 'devvit_test' */
    subreddit?: string | undefined;
};
export type ReportUserRequest = {
    /** JSON data */
    details: string;
    /** a string no longer than 100 characters */
    reason: string;
    /** a valid, existing reddit username */
    user: string;
};
export type SetPermissionsRequest = {
    /** the name of an existing user */
    name: string;
    /** subreddit name without the r/ e.g. 'devvit_test' */
    subreddit: string;
    permissions: string;
    type: string;
};
export type UnfriendRequest = {
    /** thing id e.g. 't3_15bfi0' */
    id?: string | undefined;
    /** the name of an existing */
    name?: string | undefined;
    /** one of (friend, enemy, moderator, moderator_invite, contributor, banned, muted, wikibanned, wikicontributor) */
    type: string;
    /** subreddit name without the r/ e.g. 'devvit_test' */
    subreddit?: string | undefined;
};
export type UserDataByAccountIdsRequest = {
    /** a comma-separated list of account thing ids */
    ids: string;
};
export type UsernameAvailableRequest = {
    /** a valid, unused username */
    user: string;
};
export type UpdateFriendRelationshipRequest = {
    /** a valid, existing reddit username */
    name: string;
    note: string;
};
export type UserAboutRequest = {
    /** a valid, existing reddit username */
    username: string;
};
export type UserWhereRequest = {
    context?: number | undefined;
    show?: string | undefined;
    sort?: string | undefined;
    t?: string | undefined;
    type?: string | undefined;
    after?: string | undefined;
    before?: string | undefined;
    count?: number | undefined;
    limit?: number | undefined;
    username?: string | undefined;
    where: string;
};
/** Responses */
export type GeneralFriendResponse = {
    date?: number | undefined;
    relId?: string | undefined;
    name?: string | undefined;
    id?: string | undefined;
    /** error case */
    fields: string[];
    explanation?: string | undefined;
    message?: string | undefined;
    reason?: string | undefined;
};
export type BlockUserResponse = {
    date?: number | undefined;
    iconImg?: string | undefined;
    id?: string | undefined;
    name?: string | undefined;
};
export type UserDataByAccountIdsResponse = {
    users: {
        [key: string]: UserDataByAccountIdsResponse_UserAccountData;
    };
};
export type UserDataByAccountIdsResponse_UserAccountData = {
    name?: string | undefined;
    createdUtc?: number | undefined;
    linkKarma?: number | undefined;
    commentKarma?: number | undefined;
    profileImg?: string | undefined;
    profileColor?: string | undefined;
    profileOver18?: boolean | undefined;
};
export type UserDataByAccountIdsResponse_UsersEntry = {
    key: string;
    value?: UserDataByAccountIdsResponse_UserAccountData | undefined;
};
export type UserTrophiesResponse = {
    kind?: string | undefined;
    data?: UserTrophiesResponse_UserTrophiesData | undefined;
};
export type UserTrophiesResponse_TrophiesData = {
    icon70?: string | undefined;
    grantedAt?: number | undefined;
    url?: string | undefined;
    icon40?: string | undefined;
    name?: string | undefined;
    awardId?: string | undefined;
    id?: string | undefined;
    description?: string | undefined;
};
export type UserTrophiesResponse_TrophiesType = {
    kind?: string | undefined;
    data?: UserTrophiesResponse_TrophiesData | undefined;
};
export type UserTrophiesResponse_UserTrophiesData = {
    trophies: UserTrophiesResponse_TrophiesType[];
};
export type UserAboutResponse = {
    kind?: string | undefined;
    data?: User | undefined;
};
//# sourceMappingURL=users_msg.d.ts.map