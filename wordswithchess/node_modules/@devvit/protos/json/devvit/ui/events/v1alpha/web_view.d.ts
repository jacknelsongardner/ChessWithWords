/**
 * #web_view.ts
 *
 * Code generated by ts-proto. DO NOT EDIT.
 * @packageDocumentation
 */
import type { ConsentStatusEvent } from "../../effects/v1alpha/app_permission.js";
import type { RealtimeSubscriptionEvent } from "../../effects/v1alpha/realtime_subscriptions.js";
import type { FormCanceledEvent, FormSubmittedEvent } from "../../effects/v1alpha/show_form.js";
import type { WebViewImmersiveMode } from "../../effects/web_view/v1alpha/immersive_mode.js";
export declare enum WebViewVisibility {
    WEBVIEW_VISIBLE = 0,
    WEBVIEW_HIDDEN = 1,
    UNRECOGNIZED = -1
}
/** Fired when the content of a WebView calls window.parent.postMessage() */
export type WebViewPostMessageEvent = {
    /**
     * Can be a Struct or a scalar value since postMessage doesn't restrict the type of 'message'.
     * @deprecated Use json_string instead
     */
    message?: any | undefined;
    /** JSON string payload */
    jsonString: string;
};
/** Fired when the visibility of a fullscreen WebView changes */
export type WebViewFullScreenEvent = {
    visibility: WebViewVisibility;
};
export type WebViewEvent = {
    postMessage?: WebViewPostMessageEvent | undefined;
    fullScreen?: WebViewFullScreenEvent | undefined;
};
export type WebViewImmersiveModeChangedEvent = {
    immersiveMode: WebViewImmersiveMode;
};
export type WebViewInternalEventMessage = {
    /** ID of the event message, matches the id of the WebViewInternalMessage that triggered it */
    id: string;
    formCanceled?: FormCanceledEvent | undefined;
    formSubmitted?: FormSubmittedEvent | undefined;
    realtimeEvent?: RealtimeSubscriptionEvent | undefined;
    immersiveModeEvent?: WebViewImmersiveModeChangedEvent | undefined;
    consentStatus?: ConsentStatusEvent | undefined;
};
//# sourceMappingURL=web_view.d.ts.map