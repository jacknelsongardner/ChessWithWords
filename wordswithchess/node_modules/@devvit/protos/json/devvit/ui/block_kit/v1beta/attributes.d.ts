/**
 * #attributes.ts
 *
 * Code generated by ts-proto. DO NOT EDIT.
 * @packageDocumentation
 */
import type { BlockActionType, BlockBorderWidth, BlockHorizontalAlignment, BlockSizeUnit, BlockVerticalAlignment } from "./enums.js";
export type BlockAlignment = {
    vertical?: BlockVerticalAlignment | undefined;
    horizontal?: BlockHorizontalAlignment | undefined;
};
export type BlockBorder = {
    /**
     * @deprecated use colors instead
     *
     * @deprecated
     */
    color?: string | undefined;
    width?: BlockBorderWidth | undefined;
    colors?: BlockColor | undefined;
};
export type BlockSizes = {
    grow?: boolean | undefined;
    width?: BlockSizes_Dimension | undefined;
    height?: BlockSizes_Dimension | undefined;
};
export type BlockSizes_Dimension = {
    value?: BlockSizes_Dimension_Value | undefined;
    min?: BlockSizes_Dimension_Value | undefined;
    max?: BlockSizes_Dimension_Value | undefined;
};
export type BlockSizes_Dimension_Value = {
    value: number;
    unit: BlockSizeUnit;
};
/** @deprecated Use BlockSizing */
export type BlockSize = {
    /** Grow this element to fill any free space in the container */
    grow?: boolean | undefined;
    /** Width */
    width?: number | undefined;
    /** Unit of the width value */
    widthUnit?: BlockSizeUnit | undefined;
    /** Height */
    height?: number | undefined;
    /** Unit of the height value */
    heightUnit?: BlockSizeUnit | undefined;
};
export type BlockAction = {
    type: BlockActionType;
    id: string;
    data?: {
        [key: string]: any;
    } | undefined;
};
export type BlockColor = {
    light?: string | undefined;
    dark?: string | undefined;
};
//# sourceMappingURL=attributes.d.ts.map