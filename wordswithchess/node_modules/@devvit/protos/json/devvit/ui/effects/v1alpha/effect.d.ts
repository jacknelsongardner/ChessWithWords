/**
 * #effect.ts
 *
 * Code generated by ts-proto. DO NOT EDIT.
 * @packageDocumentation
 */
import type { WebViewEffect } from "../web_view/v1alpha/web_view.js";
import type { CanRunAsUserEffect } from "./app_permission.js";
import type { CreateOrderEffect } from "./create_order.js";
import type { SetIntervalsEffect } from "./interval.js";
import type { NavigateToUrlEffect } from "./navigate_to_url.js";
import type { RealtimeSubscriptionsEffect } from "./realtime_subscriptions.js";
import type { ReloadPartEffect } from "./reload_part.js";
import type { RerenderEffect } from "./rerender_ui.js";
import type { ShowFormEffect } from "./show_form.js";
import type { ShowToastEffect } from "./show_toast.js";
export declare enum EffectType {
    /** EFFECT_REALTIME_SUB - Notify client to synchronize its realtime subscriptions */
    EFFECT_REALTIME_SUB = 0,
    /** EFFECT_RERENDER_UI - Trigger a re-render for apps that have visible UI */
    EFFECT_RERENDER_UI = 1,
    /** EFFECT_RELOAD_PART - Notify the client that parts of a subreddit, post, or comment should be reloaded */
    EFFECT_RELOAD_PART = 2,
    /** EFFECT_SHOW_FORM - Display a user input form */
    EFFECT_SHOW_FORM = 3,
    /** EFFECT_SHOW_TOAST - Display a transient toast message */
    EFFECT_SHOW_TOAST = 4,
    /** EFFECT_NAVIGATE_TO_URL - Notify the client to navigate to a URL */
    EFFECT_NAVIGATE_TO_URL = 5,
    /** EFFECT_SET_INTERVALS - This updates the list of active timers. */
    EFFECT_SET_INTERVALS = 7,
    /** EFFECT_CREATE_ORDER - This starts a purchase flow */
    EFFECT_CREATE_ORDER = 8,
    /** EFFECT_WEB_VIEW - Control and communicate with WebViews */
    EFFECT_WEB_VIEW = 9,
    /** EFFECT_CAN_RUN_AS_USER - Check if the app can execute some actions as the user */
    EFFECT_CAN_RUN_AS_USER = 11,
    UNRECOGNIZED = -1
}
export type Effect = {
    realtimeSubscriptions?: RealtimeSubscriptionsEffect | undefined;
    rerenderUi?: RerenderEffect | undefined;
    reloadPart?: ReloadPartEffect | undefined;
    showForm?: ShowFormEffect | undefined;
    showToast?: ShowToastEffect | undefined;
    navigateToUrl?: NavigateToUrlEffect | undefined;
    interval?: SetIntervalsEffect | undefined;
    createOrder?: CreateOrderEffect | undefined;
    webView?: WebViewEffect | undefined;
    canRunAsUser?: CanRunAsUserEffect | undefined;
    /** TODO: remove this field once all clients are updated.  Redundant with effect_type */
    type: EffectType;
};
//# sourceMappingURL=effect.d.ts.map