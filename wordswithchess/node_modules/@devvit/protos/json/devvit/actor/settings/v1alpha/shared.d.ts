/**
 * #shared.ts
 *
 * Code generated by ts-proto. DO NOT EDIT.
 * @packageDocumentation
 */
import type { Form } from "../../../ui/form_builder/v1alpha/form.js";
import type { FormFieldValue } from "../../../ui/form_builder/v1alpha/value.js";
export type GetFieldsRequest = {
    /** If true, the form is editing existing settings */
    editing: boolean;
};
export type GetFieldsResponse = {
    fields?: Form | undefined;
};
export type ValidateFormRequest = {
    /** If true, the form is editing existing settings */
    editing: boolean;
    /** Map of id:value pairs to validate */
    fieldValues: {
        [key: string]: FormFieldValue;
    };
};
export type ValidateFormRequest_FieldValuesEntry = {
    key: string;
    value?: FormFieldValue | undefined;
};
export type ValidateFormResponse = {
    /** If false, prevent submission and display errors on the form */
    success: boolean;
    /** Map of id:error pairs to display on the form */
    errors: {
        [key: string]: string;
    };
};
export type ValidateFormResponse_ErrorsEntry = {
    key: string;
    value: string;
};
//# sourceMappingURL=shared.d.ts.map