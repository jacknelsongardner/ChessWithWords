import type { T1, T3 } from '@devvit/shared-types/tid.js';
export type MoreObject = {
    parentId: T1 | T3;
    children: T1[];
    depth: number;
};
export type ListingFetchOptions = {
    after?: string;
    before?: string;
    limit?: number;
    pageSize?: number;
    more?: MoreObject;
};
export type ListingFetchResponse<T> = {
    children: T[];
    before?: string | undefined;
    after?: string | undefined;
    more?: MoreObject | undefined;
};
export interface Listing<T> {
    /** @internal */
    children: T[];
    /** @internal */
    _fetch: (options: ListingFetchOptions) => Promise<ListingFetchResponse<T>>;
}
type ListingOptions<T> = {
    hasMore?: boolean;
    after?: string | undefined;
    before?: string | undefined;
    pageSize?: number | undefined;
    limit?: number | undefined;
    children?: T[];
    more?: MoreObject;
    fetch: (options: ListingFetchOptions) => Promise<ListingFetchResponse<T>>;
};
export declare class Listing<T> {
    #private;
    pageSize: number;
    limit: number;
    children: T[];
    /**
     * @internal
     */
    constructor(options: ListingOptions<T>);
    get hasMore(): boolean;
    [Symbol.asyncIterator](): AsyncIterator<T>;
    setMore(more: MoreObject | undefined): void;
    preventInitialFetch(): void;
    all(): Promise<T[]>;
    get(count: number): Promise<T[]>;
}
export {};
//# sourceMappingURL=Listing.d.ts.map