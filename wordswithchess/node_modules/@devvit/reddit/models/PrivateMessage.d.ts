import type { RedditObject } from '@devvit/protos';
import type { Prettify } from '@devvit/shared-types/Prettify.js';
import { T2, T5, type Tid } from '@devvit/shared-types/tid.js';
import type { ListingFetchOptions } from './Listing.js';
import { Listing } from './Listing.js';
import type { Subreddit } from './Subreddit.js';
import type { User } from './User.js';
export type SendPrivateMessageOptions = {
    /** Recipient username (without the leading u/), or /r/name for that subreddit's moderators. */
    to: string;
    /** The subject of the message. */
    subject: string;
    /** The body of the message in Markdown text format. */
    text: string;
};
export type SendPrivateMessageAsSubredditOptions = SendPrivateMessageOptions & {
    /** The name of the subreddit the message is being sent from (without the leading r/) */
    fromSubredditName: string;
};
export type GetPrivateMessagesOptions = Prettify<{
    type?: 'inbox' | 'unread' | 'sent';
} & ListingFetchOptions>;
type PrivateMessageAuthor = (Pick<User, 'username'> & {
    type: 'user';
    id?: T2 | undefined;
}) | (Pick<Subreddit, 'name'> & {
    type: 'subreddit';
    id?: T5 | undefined;
});
export declare class PrivateMessage {
    #private;
    /** @internal */
    static getMessages(options: GetPrivateMessagesOptions): Promise<Listing<PrivateMessage>>;
    /** @internal */
    static send({ to, subject, text }: SendPrivateMessageOptions): Promise<void>;
    /** @internal */
    static sendAsSubreddit({ to, fromSubredditName, subject, text, }: SendPrivateMessageAsSubredditOptions): Promise<void>;
    /** @internal */
    static markAllAsRead(): Promise<void>;
    /**
     * @internal
     */
    constructor(data: RedditObject);
    get id(): Tid;
    get from(): PrivateMessageAuthor;
    get body(): string;
    get bodyHtml(): string;
    get created(): Date;
    markAsRead(): Promise<void>;
}
export {};
//# sourceMappingURL=PrivateMessage.d.ts.map