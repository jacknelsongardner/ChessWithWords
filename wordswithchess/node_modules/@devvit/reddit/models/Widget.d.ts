import type { AddButtonWidgetRequest, AddCalendarWidgetRequest, AddCommunityListWidgetRequest, AddCustomWidgetRequest, AddImageWidgetRequest, AddPostFlairWidgetRequest, AddTextAreaWidgetRequest, CalendarWidgetConfiguration, GetWidgetsResponse_WidgetItem_PostFlairTemplate as PostFlairTemplateData, SubredditAboutRulesResponse, UpdateButtonWidgetRequest, UpdateCalendarWidgetRequest, UpdateCommunityListWidgetRequest, UpdateCustomWidgetRequest, UpdateImageWidgetRequest, UpdatePostFlairWidgetRequest, UpdateTextAreaWidgetRequest, WidgetButton, WidgetImage, WidgetStyles } from '@devvit/protos';
import { CommunityListWidget_CommunityData as CommunityData, GetWidgetsResponse_WidgetItem as WidgetItem } from '@devvit/protos';
export type AddWidgetData = (AddImageWidgetRequest & {
    type: 'image';
}) | (AddCalendarWidgetRequest & {
    type: 'calendar';
}) | (AddTextAreaWidgetRequest & {
    type: 'textarea';
}) | (AddButtonWidgetRequest & {
    type: 'button';
}) | (AddCommunityListWidgetRequest & {
    type: 'community-list';
}) | (AddPostFlairWidgetRequest & {
    type: 'post-flair';
}) | (AddCustomWidgetRequest & {
    type: 'custom';
});
export declare class Widget {
    #private;
    constructor(widgetData: WidgetItem, subredditName: string);
    get id(): string;
    get name(): string;
    get subredditName(): string;
    toJSON(): Pick<Widget, 'id' | 'name' | 'subredditName'>;
    delete(): Promise<void>;
    /**
     * @internal
     * @note - This method only returns the widgets listed on the sidebar.
     */
    static getWidgets(subredditName: string): Promise<Widget[]>;
    /** @internal */
    static delete(subredditName: string, id: string): Promise<void>;
    /** @internal */
    static reorder(subredditName: string, orderByIds: string[]): Promise<void>;
    /** @internal */
    static add(widgetData: AddWidgetData): Promise<Widget>;
}
export declare class ImageWidget extends Widget {
    #private;
    constructor(widgetData: WidgetItem, subredditName: string);
    get images(): WidgetImage[];
    toJSON(): ReturnType<Widget['toJSON']> & Pick<ImageWidget, 'images'>;
    /** @internal */
    static create(options: AddImageWidgetRequest): Promise<ImageWidget>;
    /** @internal */
    static update(options: UpdateImageWidgetRequest): Promise<ImageWidget>;
}
export declare class CalendarWidget extends Widget {
    #private;
    constructor(widgetData: WidgetItem, subredditName: string);
    get googleCalendarId(): string;
    get configuration(): CalendarWidgetConfiguration;
    get styles(): WidgetStyles;
    toJSON(): ReturnType<Widget['toJSON']> & Pick<CalendarWidget, 'googleCalendarId' | 'configuration' | 'styles'>;
    /** @internal */
    static create(options: AddCalendarWidgetRequest): Promise<CalendarWidget>;
    /** @internal */
    static update(options: UpdateCalendarWidgetRequest): Promise<CalendarWidget>;
}
export declare class TextAreaWidget extends Widget {
    #private;
    constructor(widgetData: WidgetItem, subredditName: string);
    get text(): string;
    get styles(): WidgetStyles;
    toJSON(): ReturnType<Widget['toJSON']> & Pick<TextAreaWidget, 'text' | 'styles'>;
    /** @internal */
    static create(options: AddTextAreaWidgetRequest): Promise<TextAreaWidget>;
    /** @internal */
    static update(options: UpdateTextAreaWidgetRequest): Promise<TextAreaWidget>;
}
export declare class ButtonWidget extends Widget {
    #private;
    constructor(widgetData: WidgetItem, subredditName: string);
    get buttons(): WidgetButton[];
    get description(): string;
    get styles(): WidgetStyles;
    toJSON(): ReturnType<Widget['toJSON']> & Pick<ButtonWidget, 'buttons' | 'description' | 'styles'>;
    /** @internal */
    static create(options: AddButtonWidgetRequest): Promise<ButtonWidget>;
    /** @internal */
    static update(options: UpdateButtonWidgetRequest): Promise<ButtonWidget>;
}
export declare class CommunityListWidget extends Widget {
    #private;
    constructor(widgetData: WidgetItem, subredditName: string);
    get communities(): CommunityData[];
    get styles(): WidgetStyles;
    toJSON(): ReturnType<Widget['toJSON']> & Pick<CommunityListWidget, 'communities' | 'styles'>;
    /** @internal */
    static create(options: AddCommunityListWidgetRequest): Promise<CommunityListWidget>;
    /** @internal */
    static update(options: UpdateCommunityListWidgetRequest): Promise<CommunityListWidget>;
}
export declare class PostFlairWidget extends Widget {
    #private;
    constructor(widgetData: WidgetItem, subredditName: string);
    get styles(): WidgetStyles;
    get templates(): PostFlairTemplateData[];
    get display(): 'list' | 'cloud';
    toJSON(): ReturnType<Widget['toJSON']> & Pick<PostFlairWidget, 'templates' | 'display' | 'styles'>;
    /** @internal */
    static create(options: AddPostFlairWidgetRequest): Promise<PostFlairWidget>;
    /** @internal */
    static update(options: UpdatePostFlairWidgetRequest): Promise<PostFlairWidget>;
}
export declare class CustomWidget extends Widget {
    #private;
    constructor(widgetData: WidgetItem, subredditName: string);
    get images(): WidgetImage[];
    get text(): string;
    get stylesheetUrl(): string;
    get height(): number;
    get css(): string;
    toJSON(): ReturnType<Widget['toJSON']> & Pick<CustomWidget, 'images' | 'text' | 'stylesheetUrl' | 'height' | 'css'>;
    /** @internal */
    static create(options: AddCustomWidgetRequest): Promise<CustomWidget>;
    /** @internal */
    static update(options: UpdateCustomWidgetRequest): Promise<CustomWidget>;
}
type SubredditRule = {
    description: string;
    priority: number;
    shortName: string;
    violationReason: string;
};
export declare class SubredditRulesWidget extends Widget {
    #private;
    constructor(subredditAboutRulesRsp: SubredditAboutRulesResponse, widgetData: WidgetItem, subredditName: string);
    get rules(): SubredditRule[];
    toJSON(): ReturnType<Widget['toJSON']> & Pick<SubredditRulesWidget, 'rules'>;
}
export {};
//# sourceMappingURL=Widget.d.ts.map