var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _a, _GraphQL_metadata_get;
import { context } from '@devvit/server';
import { getRedditApiPlugins } from '../plugin.js';
export class GraphQL {
    /** @internal */
    static queryWithQueryString(q) {
        return getRedditApiPlugins().GraphQL.Query({
            query: q,
        }, __classPrivateFieldGet(this, _a, "a", _GraphQL_metadata_get));
    }
    /** @internal */
    static query(operationName, id, variables) {
        return getRedditApiPlugins().GraphQL.PersistedQuery({
            operationName,
            id,
            variables,
        }, __classPrivateFieldGet(this, _a, "a", _GraphQL_metadata_get));
    }
}
_a = GraphQL, _GraphQL_metadata_get = function _GraphQL_metadata_get() {
    return context.metadata;
};
