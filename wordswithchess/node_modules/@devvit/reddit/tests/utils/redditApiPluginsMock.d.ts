export declare const redditApiPlugins: {
    Flair: {
        ClearFlairTemplates: import("vitest").Mock<[request: import("@devvit/protos").ClearFlairTemplatesRequest, metadata?: import("@devvit/protos").Metadata | undefined], Promise<import("@devvit/protos").JsonStatus>>;
        DeleteFlair: import("vitest").Mock<[request: import("@devvit/protos").DeleteFlairRequest, metadata?: import("@devvit/protos").Metadata | undefined], Promise<import("@devvit/protos").JsonStatus>>;
        DeleteFlairTemplate: import("vitest").Mock<[request: import("@devvit/protos").DeleteFlairTemplateRequest, metadata?: import("@devvit/protos").Metadata | undefined], Promise<import("@devvit/protos").JsonStatus>>;
        Flair: import("vitest").Mock<[request: import("@devvit/protos").FlairRequest, metadata?: import("@devvit/protos").Metadata | undefined], Promise<import("@devvit/protos").JsonStatus>>;
        FlairTemplateOrder: import("vitest").Mock<[request: import("@devvit/protos").FlairTemplateOrderRequest, metadata?: import("@devvit/protos").Metadata | undefined], Promise<import("@devvit/protos").Empty>>;
        FlairConfig: import("vitest").Mock<[request: import("@devvit/protos").FlairConfigRequest, metadata?: import("@devvit/protos").Metadata | undefined], Promise<import("@devvit/protos").JsonStatus>>;
        FlairCsv: import("vitest").Mock<[request: import("@devvit/protos").FlairCsvRequest, metadata?: import("@devvit/protos").Metadata | undefined], Promise<import("@devvit/protos").FlairCsvResponse>>;
        FlairList: import("vitest").Mock<[request: import("@devvit/protos").FlairListRequest, metadata?: import("@devvit/protos").Metadata | undefined], Promise<import("@devvit/protos").FlairListResponse>>;
        FlairSelector: import("vitest").Mock<[request: import("@devvit/protos").FlairSelectorRequest, metadata?: import("@devvit/protos").Metadata | undefined], Promise<import("@devvit/protos").FlairSelectorResponse>>;
        FlairTemplate: import("vitest").Mock<[request: import("@devvit/protos").FlairTemplateRequest, metadata?: import("@devvit/protos").Metadata | undefined], Promise<import("@devvit/protos").FlairObject>>;
        LinkFlair: import("vitest").Mock<[request: import("@devvit/protos").LinkFlairRequest, metadata?: import("@devvit/protos").Metadata | undefined], Promise<import("@devvit/protos").FlairArray>>;
        SelectFlair: import("vitest").Mock<[request: import("@devvit/protos").SelectFlairRequest, metadata?: import("@devvit/protos").Metadata | undefined], Promise<import("@devvit/protos").JsonStatus>>;
        SetFlairEnabled: import("vitest").Mock<[request: import("@devvit/protos").SetFlairEnabledRequest, metadata?: import("@devvit/protos").Metadata | undefined], Promise<import("@devvit/protos").JsonStatus>>;
        UserFlair: import("vitest").Mock<[request: import("@devvit/protos").LinkFlairRequest, metadata?: import("@devvit/protos").Metadata | undefined], Promise<import("@devvit/protos").FlairArray>>;
    };
    GraphQL: {
        Query: import("vitest").Mock<[request: import("@devvit/protos/types/devvit/plugin/redditapi/graphql/graphql_msg.js").QueryRequest, metadata?: import("@devvit/protos").Metadata | undefined], Promise<import("@devvit/protos").QueryResponse>>;
        PersistedQuery: import("vitest").Mock<[request: import("@devvit/protos/types/devvit/plugin/redditapi/graphql/graphql_msg.js").PersistedQueryRequest, metadata?: import("@devvit/protos").Metadata | undefined], Promise<import("@devvit/protos").QueryResponse>>;
    };
    LinksAndComments: {
        Comment: import("vitest").Mock<[request: import("@devvit/protos").CommentRequest, metadata?: import("@devvit/protos").Metadata | undefined], Promise<import("@devvit/protos").JsonWrappedComment>>;
        Del: import("vitest").Mock<[request: import("@devvit/protos").BasicIdRequest, metadata?: import("@devvit/protos").Metadata | undefined], Promise<import("@devvit/protos").Empty>>;
        EditUserText: import("vitest").Mock<[request: import("@devvit/protos").CommentRequest, metadata?: import("@devvit/protos").Metadata | undefined], Promise<import("@devvit/protos").JsonWrappedComment>>;
        FollowPost: import("vitest").Mock<[request: import("@devvit/protos").FollowPostRequest, metadata?: import("@devvit/protos").Metadata | undefined], Promise<import("@devvit/protos").Empty>>;
        Hide: import("vitest").Mock<[request: import("@devvit/protos").BasicIdRequest, metadata?: import("@devvit/protos").Metadata | undefined], Promise<import("@devvit/protos").Empty>>;
        Info: import("vitest").Mock<[request: import("@devvit/protos").InfoRequest, metadata?: import("@devvit/protos").Metadata | undefined], Promise<import("@devvit/protos").Listing>>;
        Lock: import("vitest").Mock<[request: import("@devvit/protos").BasicIdRequest, metadata?: import("@devvit/protos").Metadata | undefined], Promise<import("@devvit/protos").Empty>>;
        MarkNSFW: import("vitest").Mock<[request: import("@devvit/protos").BasicIdRequest, metadata?: import("@devvit/protos").Metadata | undefined], Promise<import("@devvit/protos").Empty>>;
        MoreChildren: import("vitest").Mock<[request: import("@devvit/protos").MoreChildrenRequest, metadata?: import("@devvit/protos").Metadata | undefined], Promise<import("@devvit/protos").JsonWrappedComment>>;
        Report: import("vitest").Mock<[request: import("@devvit/protos").ReportRequest, metadata?: import("@devvit/protos").Metadata | undefined], Promise<import("@devvit/protos").JsonStatus>>;
        ReportAward: import("vitest").Mock<[request: import("@devvit/protos").ReportAwardRequest, metadata?: import("@devvit/protos").Metadata | undefined], Promise<import("@devvit/protos").Empty>>;
        Save: import("vitest").Mock<[request: import("@devvit/protos").SaveRequest, metadata?: import("@devvit/protos").Metadata | undefined], Promise<import("@devvit/protos").Empty>>;
        SendReplies: import("vitest").Mock<[request: import("@devvit/protos").SendRepliesRequest, metadata?: import("@devvit/protos").Metadata | undefined], Promise<import("@devvit/protos").Empty>>;
        SetContestMode: import("vitest").Mock<[request: import("@devvit/protos").SetContestModeRequest, metadata?: import("@devvit/protos").Metadata | undefined], Promise<import("@devvit/protos").JsonStatus>>;
        EditCustomPost: import("vitest").Mock<[request: import("@devvit/protos").EditCustomPostRequest, metadata?: import("@devvit/protos").Metadata | undefined], Promise<import("@devvit/protos").JsonRedditObjects>>;
        SetCustomPostPreview: import("vitest").Mock<[request: import("@devvit/protos").SetCustomPostPreviewRequest, metadata?: import("@devvit/protos").Metadata | undefined], Promise<import("@devvit/protos").Empty>>;
        SetSubredditSticky: import("vitest").Mock<[request: import("@devvit/protos").SetSubredditStickyRequest, metadata?: import("@devvit/protos").Metadata | undefined], Promise<import("@devvit/protos").JsonStatus>>;
        SetSuggestedSort: import("vitest").Mock<[request: import("@devvit/protos").SetSuggestedSortRequest, metadata?: import("@devvit/protos").Metadata | undefined], Promise<import("@devvit/protos").JsonStatus>>;
        Spoiler: import("vitest").Mock<[request: import("@devvit/protos").BasicIdRequest, metadata?: import("@devvit/protos").Metadata | undefined], Promise<import("@devvit/protos").Empty>>;
        Submit: import("vitest").Mock<[request: import("@devvit/protos").SubmitRequest, metadata?: import("@devvit/protos").Metadata | undefined], Promise<import("@devvit/protos").SubmitResponse>>;
        SubmitCustomPost: import("vitest").Mock<[request: import("@devvit/protos").SubmitRequest, metadata?: import("@devvit/protos").Metadata | undefined], Promise<import("@devvit/protos").SubmitResponse>>;
        Unhide: import("vitest").Mock<[request: import("@devvit/protos").BasicIdRequest, metadata?: import("@devvit/protos").Metadata | undefined], Promise<import("@devvit/protos").Empty>>;
        Unlock: import("vitest").Mock<[request: import("@devvit/protos").BasicIdRequest, metadata?: import("@devvit/protos").Metadata | undefined], Promise<import("@devvit/protos").Empty>>;
        UnmarkNSFW: import("vitest").Mock<[request: import("@devvit/protos").BasicIdRequest, metadata?: import("@devvit/protos").Metadata | undefined], Promise<import("@devvit/protos").Empty>>;
        Unsave: import("vitest").Mock<[request: import("@devvit/protos").BasicIdRequest, metadata?: import("@devvit/protos").Metadata | undefined], Promise<import("@devvit/protos").Empty>>;
        Unspoiler: import("vitest").Mock<[request: import("@devvit/protos").BasicIdRequest, metadata?: import("@devvit/protos").Metadata | undefined], Promise<import("@devvit/protos").Empty>>;
        Vote: import("vitest").Mock<[request: import("@devvit/protos").VoteRequest, metadata?: import("@devvit/protos").Metadata | undefined], Promise<import("@devvit/protos").Empty>>;
    };
    Listings: {
        Best: import("vitest").Mock<[request: import("@devvit/protos/types/devvit/plugin/redditapi/listings/listings_msg.js").GetBestRequest, metadata?: import("@devvit/protos").Metadata | undefined], Promise<import("@devvit/protos").Listing>>;
        ById: import("vitest").Mock<[request: import("@devvit/protos/types/devvit/plugin/redditapi/listings/listings_msg.js").GetByIdRequest, metadata?: import("@devvit/protos").Metadata | undefined], Promise<import("@devvit/protos").Listing>>;
        Comments: import("vitest").Mock<[request: import("@devvit/protos/types/devvit/plugin/redditapi/listings/listings_msg.js").GetCommentsRequest, metadata?: import("@devvit/protos").Metadata | undefined], Promise<import("@devvit/protos/types/devvit/plugin/redditapi/listings/listings_msg.js").ListingResponse>>;
        Duplicates: import("vitest").Mock<[request: import("@devvit/protos/types/devvit/plugin/redditapi/listings/listings_msg.js").GetDuplicatesRequest, metadata?: import("@devvit/protos").Metadata | undefined], Promise<import("@devvit/protos/types/devvit/plugin/redditapi/listings/listings_msg.js").ListingResponse>>;
        Hot: import("vitest").Mock<[request: import("@devvit/protos/types/devvit/plugin/redditapi/listings/listings_msg.js").GetHotRequest, metadata?: import("@devvit/protos").Metadata | undefined], Promise<import("@devvit/protos").Listing>>;
        New: import("vitest").Mock<[request: import("@devvit/protos/types/devvit/plugin/redditapi/listings/listings_msg.js").GetNewRequest, metadata?: import("@devvit/protos").Metadata | undefined], Promise<import("@devvit/protos").Listing>>;
        Rising: import("vitest").Mock<[request: import("@devvit/protos/types/devvit/plugin/redditapi/listings/listings_msg.js").GetRisingRequest, metadata?: import("@devvit/protos").Metadata | undefined], Promise<import("@devvit/protos").Listing>>;
        Sort: import("vitest").Mock<[request: import("@devvit/protos/types/devvit/plugin/redditapi/listings/listings_msg.js").GetSortRequest, metadata?: import("@devvit/protos").Metadata | undefined], Promise<import("@devvit/protos").Listing>>;
    };
    ModNote: {
        GetNotes: import("vitest").Mock<[request: import("@devvit/protos").GetNotesRequest, metadata?: import("@devvit/protos").Metadata | undefined], Promise<import("@devvit/protos/types/devvit/plugin/redditapi/modnote/modnote_msg.js").ModNotesResponse>>;
        DeleteNotes: import("vitest").Mock<[request: import("@devvit/protos").DeleteNotesRequest, metadata?: import("@devvit/protos").Metadata | undefined], Promise<import("@devvit/protos/types/devvit/plugin/redditapi/modnote/modnote_msg.js").DeleteNotesResponse>>;
        PostNotes: import("vitest").Mock<[request: import("@devvit/protos").PostNotesRequest, metadata?: import("@devvit/protos").Metadata | undefined], Promise<import("@devvit/protos/types/devvit/plugin/redditapi/modnote/modnote_msg.js").PostModNotesResponse>>;
        PostRemovalNote: import("vitest").Mock<[request: import("@devvit/protos").PostRemovalNoteRequest, metadata?: import("@devvit/protos").Metadata | undefined], Promise<import("@devvit/protos").Empty>>;
        RecentNotes: import("vitest").Mock<[request: import("@devvit/protos/types/devvit/plugin/redditapi/modnote/modnote_msg.js").RecentNotesRequest, metadata?: import("@devvit/protos").Metadata | undefined], Promise<import("@devvit/protos/types/devvit/plugin/redditapi/modnote/modnote_msg.js").ModNotesResponse>>;
    };
    Moderation: {
        AboutLog: import("vitest").Mock<[request: import("@devvit/protos").AboutLogRequest, metadata?: import("@devvit/protos").Metadata | undefined], Promise<import("@devvit/protos").AboutLogResponse>>;
        AboutLocation: import("vitest").Mock<[request: import("@devvit/protos").AboutLocationRequest, metadata?: import("@devvit/protos").Metadata | undefined], Promise<import("@devvit/protos").Listing>>;
        AboutReports: import("vitest").Mock<[request: import("@devvit/protos").AboutLocationRequest, metadata?: import("@devvit/protos").Metadata | undefined], Promise<import("@devvit/protos").Listing>>;
        AboutSpam: import("vitest").Mock<[request: import("@devvit/protos").AboutLocationRequest, metadata?: import("@devvit/protos").Metadata | undefined], Promise<import("@devvit/protos").Listing>>;
        AboutModqueue: import("vitest").Mock<[request: import("@devvit/protos").AboutLocationRequest, metadata?: import("@devvit/protos").Metadata | undefined], Promise<import("@devvit/protos").Listing>>;
        AboutUnmoderated: import("vitest").Mock<[request: import("@devvit/protos").AboutLocationRequest, metadata?: import("@devvit/protos").Metadata | undefined], Promise<import("@devvit/protos").Listing>>;
        AboutEdited: import("vitest").Mock<[request: import("@devvit/protos").AboutLocationRequest, metadata?: import("@devvit/protos").Metadata | undefined], Promise<import("@devvit/protos").Listing>>;
        AcceptModeratorInvite: import("vitest").Mock<[request: import("@devvit/protos").AcceptModeratorInviteRequest, metadata?: import("@devvit/protos").Metadata | undefined], Promise<import("@devvit/protos").JsonStatus>>;
        Approve: import("vitest").Mock<[request: import("@devvit/protos").BasicModerationIdRequest, metadata?: import("@devvit/protos").Metadata | undefined], Promise<import("@devvit/protos").Empty>>;
        Distinguish: import("vitest").Mock<[request: import("@devvit/protos").DistinguishRequest, metadata?: import("@devvit/protos").Metadata | undefined], Promise<import("@devvit/protos").JsonRedditObjects>>;
        IgnoreReports: import("vitest").Mock<[request: import("@devvit/protos").BasicModerationIdRequest, metadata?: import("@devvit/protos").Metadata | undefined], Promise<import("@devvit/protos").Empty>>;
        LeaveContributor: import("vitest").Mock<[request: import("@devvit/protos").BasicModerationIdRequest, metadata?: import("@devvit/protos").Metadata | undefined], Promise<import("@devvit/protos").Empty>>;
        LeaveModerator: import("vitest").Mock<[request: import("@devvit/protos").BasicModerationIdRequest, metadata?: import("@devvit/protos").Metadata | undefined], Promise<import("@devvit/protos").Empty>>;
        MuteMessageAuthor: import("vitest").Mock<[request: import("@devvit/protos").BasicModerationIdRequest, metadata?: import("@devvit/protos").Metadata | undefined], Promise<import("@devvit/protos").Empty>>;
        Remove: import("vitest").Mock<[request: import("@devvit/protos").RemoveRequest, metadata?: import("@devvit/protos").Metadata | undefined], Promise<import("@devvit/protos").Empty>>;
        ShowComment: import("vitest").Mock<[request: import("@devvit/protos").BasicModerationIdRequest, metadata?: import("@devvit/protos").Metadata | undefined], Promise<import("@devvit/protos").Empty>>;
        SnoozeReports: import("vitest").Mock<[request: import("@devvit/protos").SnoozeReportsRequest, metadata?: import("@devvit/protos").Metadata | undefined], Promise<import("@devvit/protos").Empty>>;
        UnignoreReports: import("vitest").Mock<[request: import("@devvit/protos").BasicModerationIdRequest, metadata?: import("@devvit/protos").Metadata | undefined], Promise<import("@devvit/protos").Empty>>;
        UnmuteMessageAuthor: import("vitest").Mock<[request: import("@devvit/protos").BasicModerationIdRequest, metadata?: import("@devvit/protos").Metadata | undefined], Promise<import("@devvit/protos").Empty>>;
        UnsnoozeReports: import("vitest").Mock<[request: import("@devvit/protos").SnoozeReportsRequest, metadata?: import("@devvit/protos").Metadata | undefined], Promise<import("@devvit/protos").Empty>>;
        UpdateCrowdControlLevel: import("vitest").Mock<[request: import("@devvit/protos").UpdateCrowdControlLevelRequest, metadata?: import("@devvit/protos").Metadata | undefined], Promise<import("@devvit/protos").Empty>>;
        Stylesheet: import("vitest").Mock<[request: import("@devvit/protos").StylesheetRequest, metadata?: import("@devvit/protos").Metadata | undefined], Promise<import("@devvit/protos/community.js").StringValue>>;
    };
    NewModmail: {
        BulkReadConversations: import("vitest").Mock<[request: import("@devvit/protos").BulkReadConversationsRequest, metadata?: import("@devvit/protos").Metadata | undefined], Promise<import("@devvit/protos").BulkReadConversationsResponse>>;
        GetConversations: import("vitest").Mock<[request: import("@devvit/protos").GetConversationsRequest, metadata?: import("@devvit/protos").Metadata | undefined], Promise<import("@devvit/protos").GetConversationsResponse>>;
        CreateConversation: import("vitest").Mock<[request: import("@devvit/protos").CreateConversationRequest, metadata?: import("@devvit/protos").Metadata | undefined], Promise<import("@devvit/protos").CreateConversationResponse>>;
        GetConversation: import("vitest").Mock<[request: import("@devvit/protos").GetConversationRequest, metadata?: import("@devvit/protos").Metadata | undefined], Promise<import("@devvit/protos").GetConversationResponse>>;
        CreateConversationMessage: import("vitest").Mock<[request: import("@devvit/protos").CreateConversationMessageRequest, metadata?: import("@devvit/protos").Metadata | undefined], Promise<import("@devvit/protos").CreateConversationMessageResponse>>;
        ApproveConversation: import("vitest").Mock<[request: import("@devvit/protos").BasicConversationRequest, metadata?: import("@devvit/protos").Metadata | undefined], Promise<import("@devvit/protos").ApproveConversationResponse>>;
        ArchiveConversation: import("vitest").Mock<[request: import("@devvit/protos").BasicConversationRequest, metadata?: import("@devvit/protos").Metadata | undefined], Promise<import("@devvit/protos").ArchiveConversationResponse>>;
        DisapproveConversation: import("vitest").Mock<[request: import("@devvit/protos").BasicConversationRequest, metadata?: import("@devvit/protos").Metadata | undefined], Promise<import("@devvit/protos").ApproveConversationResponse>>;
        UnhighlightConversation: import("vitest").Mock<[request: import("@devvit/protos").BasicConversationRequest, metadata?: import("@devvit/protos").Metadata | undefined], Promise<import("@devvit/protos").HighlightConversationResponse>>;
        HighlightConversation: import("vitest").Mock<[request: import("@devvit/protos").BasicConversationRequest, metadata?: import("@devvit/protos").Metadata | undefined], Promise<import("@devvit/protos").HighlightConversationResponse>>;
        MuteConversation: import("vitest").Mock<[request: import("@devvit/protos").MuteConversationRequest, metadata?: import("@devvit/protos").Metadata | undefined], Promise<import("@devvit/protos").MuteConversationResponse>>;
        TempBan: import("vitest").Mock<[request: import("@devvit/protos").TempBanRequest, metadata?: import("@devvit/protos").Metadata | undefined], Promise<import("@devvit/protos").TempBanResponse>>;
        UnarchiveConversation: import("vitest").Mock<[request: import("@devvit/protos").BasicConversationRequest, metadata?: import("@devvit/protos").Metadata | undefined], Promise<import("@devvit/protos").ArchiveConversationResponse>>;
        Unban: import("vitest").Mock<[request: import("@devvit/protos").BasicConversationRequest, metadata?: import("@devvit/protos").Metadata | undefined], Promise<import("@devvit/protos").TempBanResponse>>;
        UnmuteConversation: import("vitest").Mock<[request: import("@devvit/protos").BasicConversationRequest, metadata?: import("@devvit/protos").Metadata | undefined], Promise<import("@devvit/protos").MuteConversationResponse>>;
        UserConversations: import("vitest").Mock<[request: import("@devvit/protos").BasicConversationRequest, metadata?: import("@devvit/protos").Metadata | undefined], Promise<import("@devvit/protos").ConversationUserData>>;
        Read: import("vitest").Mock<[request: import("@devvit/protos").BasicConversationsRequest, metadata?: import("@devvit/protos").Metadata | undefined], Promise<import("@devvit/protos").Empty>>;
        Subreddits: import("vitest").Mock<[request: import("@devvit/protos").Empty, metadata?: import("@devvit/protos").Metadata | undefined], Promise<import("@devvit/protos").SubredditsResponse>>;
        Unread: import("vitest").Mock<[request: import("@devvit/protos").BasicConversationsRequest, metadata?: import("@devvit/protos").Metadata | undefined], Promise<import("@devvit/protos").Empty>>;
        UnreadCount: import("vitest").Mock<[request: import("@devvit/protos").Empty, metadata?: import("@devvit/protos").Metadata | undefined], Promise<import("@devvit/protos").UnreadCountResponse>>;
    };
    PrivateMessages: {
        Block: import("vitest").Mock<[request: import("@devvit/protos").GenericPrivateMessagesRequest, metadata?: import("@devvit/protos").Metadata | undefined], Promise<import("@devvit/protos").Empty>>;
        CollapseMessage: import("vitest").Mock<[request: import("@devvit/protos").GenericPrivateMessagesRequest, metadata?: import("@devvit/protos").Metadata | undefined], Promise<import("@devvit/protos").Empty>>;
        Compose: import("vitest").Mock<[request: import("@devvit/protos").ComposeRequest, metadata?: import("@devvit/protos").Metadata | undefined], Promise<import("@devvit/protos").Empty>>;
        DelMsg: import("vitest").Mock<[request: import("@devvit/protos").GenericPrivateMessagesRequest, metadata?: import("@devvit/protos").Metadata | undefined], Promise<import("@devvit/protos").Empty>>;
        ReadAllMessages: import("vitest").Mock<[request: import("@devvit/protos").ReadAllMessagesRequest, metadata?: import("@devvit/protos").Metadata | undefined], Promise<import("@devvit/protos").Empty>>;
        ReadMessage: import("vitest").Mock<[request: import("@devvit/protos").GenericPrivateMessagesRequest, metadata?: import("@devvit/protos").Metadata | undefined], Promise<import("@devvit/protos").Empty>>;
        UnblockSubreddit: import("vitest").Mock<[request: import("@devvit/protos").GenericPrivateMessagesRequest, metadata?: import("@devvit/protos").Metadata | undefined], Promise<import("@devvit/protos").Empty>>;
        UncollapseMessage: import("vitest").Mock<[request: import("@devvit/protos").GenericPrivateMessagesRequest, metadata?: import("@devvit/protos").Metadata | undefined], Promise<import("@devvit/protos").Empty>>;
        UnreadMessage: import("vitest").Mock<[request: import("@devvit/protos").GenericPrivateMessagesRequest, metadata?: import("@devvit/protos").Metadata | undefined], Promise<import("@devvit/protos").Empty>>;
        MessageWhere: import("vitest").Mock<[request: import("@devvit/protos").MessageWhereRequest, metadata?: import("@devvit/protos").Metadata | undefined], Promise<import("@devvit/protos").Listing>>;
    };
    Subreddits: {
        AboutWhere: import("vitest").Mock<[request: import("@devvit/protos").AboutWhereRequest, metadata?: import("@devvit/protos").Metadata | undefined], Promise<import("@devvit/protos").Listing>>;
        DeleteSrBanner: import("vitest").Mock<[request: import("@devvit/protos").BasicSubredditRequest, metadata?: import("@devvit/protos").Metadata | undefined], Promise<import("@devvit/protos").JsonStatus>>;
        DeleteSrHeader: import("vitest").Mock<[request: import("@devvit/protos").BasicSubredditRequest, metadata?: import("@devvit/protos").Metadata | undefined], Promise<import("@devvit/protos").JsonStatus>>;
        DeleteSrIcon: import("vitest").Mock<[request: import("@devvit/protos").BasicSubredditRequest, metadata?: import("@devvit/protos").Metadata | undefined], Promise<import("@devvit/protos").JsonStatus>>;
        DeleteSrImg: import("vitest").Mock<[request: import("@devvit/protos").DeleteSrImgRequest, metadata?: import("@devvit/protos").Metadata | undefined], Promise<import("@devvit/protos").JsonStatus>>;
        SearchRedditNames: import("vitest").Mock<[request: import("@devvit/protos").BasicSearchRequest, metadata?: import("@devvit/protos").Metadata | undefined], Promise<import("@devvit/protos").SearchRedditNamesResponse>>;
        SearchSubreddits: import("vitest").Mock<[request: import("@devvit/protos").BasicSearchRequest, metadata?: import("@devvit/protos").Metadata | undefined], Promise<import("@devvit/protos").SearchSubredditsResponse>>;
        SiteAdmin: import("vitest").Mock<[request: import("@devvit/protos").SiteAdminRequest, metadata?: import("@devvit/protos").Metadata | undefined], Promise<import("@devvit/protos").JsonStatus>>;
        SubmitText: import("vitest").Mock<[request: import("@devvit/protos").BasicSubredditRequest, metadata?: import("@devvit/protos").Metadata | undefined], Promise<import("@devvit/protos").SubmitTextResponse>>;
        SubredditAutocomplete: import("vitest").Mock<[request: import("@devvit/protos").SubredditAutocompleteRequest, metadata?: import("@devvit/protos").Metadata | undefined], Promise<import("@devvit/protos").SubredditAutocompleteResponse>>;
        SubredditStylesheet: import("vitest").Mock<[request: import("@devvit/protos").SubredditStylesheetRequest, metadata?: import("@devvit/protos").Metadata | undefined], Promise<import("@devvit/protos").JsonStatus>>;
        Subscribe: import("vitest").Mock<[request: import("@devvit/protos").SubscribeRequest, metadata?: import("@devvit/protos").Metadata | undefined], Promise<import("@devvit/protos").Empty>>;
        UploadSrImg: import("vitest").Mock<[request: import("@devvit/protos").UploadSrImgRequest, metadata?: import("@devvit/protos").Metadata | undefined], Promise<import("@devvit/protos").UploadSrImgResponse>>;
        SubredditPostRequirements: import("vitest").Mock<[request: import("@devvit/protos").BasicSubredditRequest, metadata?: import("@devvit/protos").Metadata | undefined], Promise<import("@devvit/protos").SubredditPostRequirementsResponse>>;
        SubredditAbout: import("vitest").Mock<[request: import("@devvit/protos").BasicSubredditRequest, metadata?: import("@devvit/protos").Metadata | undefined], Promise<import("@devvit/protos").SubredditAboutResponse>>;
        SubredditAboutEdit: import("vitest").Mock<[request: import("@devvit/protos").SubredditAboutEditRequest, metadata?: import("@devvit/protos").Metadata | undefined], Promise<import("@devvit/protos").SubredditAboutEditResponse>>;
        SubredditAboutRules: import("vitest").Mock<[request: import("@devvit/protos").BasicSubredditRequest, metadata?: import("@devvit/protos").Metadata | undefined], Promise<import("@devvit/protos").SubredditAboutRulesResponse>>;
        SubredditAboutTraffic: import("vitest").Mock<[request: import("@devvit/protos").BasicSubredditRequest, metadata?: import("@devvit/protos").Metadata | undefined], Promise<import("@devvit/protos").SubredditAboutTrafficResponse>>;
        Sidebar: import("vitest").Mock<[request: import("@devvit/protos").BasicSubredditRequest, metadata?: import("@devvit/protos").Metadata | undefined], Promise<import("@devvit/protos/community.js").StringValue>>;
        Sticky: import("vitest").Mock<[request: import("@devvit/protos").StickyRequest, metadata?: import("@devvit/protos").Metadata | undefined], Promise<import("@devvit/protos").StickyResponse>>;
        SubredditsMineWhere: import("vitest").Mock<[request: import("@devvit/protos").BasicWhereRequest, metadata?: import("@devvit/protos").Metadata | undefined], Promise<import("@devvit/protos").Listing>>;
        SubredditsSearch: import("vitest").Mock<[request: import("@devvit/protos").SubredditsSearchRequest, metadata?: import("@devvit/protos").Metadata | undefined], Promise<import("@devvit/protos").SubredditsSearchResponse>>;
        SubredditsWhere: import("vitest").Mock<[request: import("@devvit/protos").BasicWhereRequest, metadata?: import("@devvit/protos").Metadata | undefined], Promise<import("@devvit/protos").SubredditsSearchResponse>>;
        UsersSearch: import("vitest").Mock<[request: import("@devvit/protos").UsersSearchRequest, metadata?: import("@devvit/protos").Metadata | undefined], Promise<import("@devvit/protos").UserSearchResponse>>;
        UsersWhere: import("vitest").Mock<[request: import("@devvit/protos").BasicWhereRequest, metadata?: import("@devvit/protos").Metadata | undefined], Promise<import("@devvit/protos").SubredditsSearchResponse>>;
        SubredditAddRemovalReason: import("vitest").Mock<[request: import("@devvit/protos").SubredditAddRemovalReasonRequest, metadata?: import("@devvit/protos").Metadata | undefined], Promise<import("@devvit/protos").SubredditAddRemovalReasonResponse>>;
        SubredditGetRemovalReasons: import("vitest").Mock<[request: import("@devvit/protos").SubredditGetRemovalReasonsRequest, metadata?: import("@devvit/protos").Metadata | undefined], Promise<import("@devvit/protos").SubredditGetRemovalReasonsResponse>>;
    };
    Users: {
        BlockUser: import("vitest").Mock<[request: import("@devvit/protos/types/devvit/plugin/redditapi/users/users_msg.js").BlockUserRequest, metadata?: import("@devvit/protos").Metadata | undefined], Promise<import("@devvit/protos/types/devvit/plugin/redditapi/users/users_msg.js").BlockUserResponse>>;
        Friend: import("vitest").Mock<[request: import("@devvit/protos/types/devvit/plugin/redditapi/users/users_msg.js").FriendRequest, metadata?: import("@devvit/protos").Metadata | undefined], Promise<import("@devvit/protos").JsonStatus>>;
        ReportUser: import("vitest").Mock<[request: import("@devvit/protos/types/devvit/plugin/redditapi/users/users_msg.js").ReportUserRequest, metadata?: import("@devvit/protos").Metadata | undefined], Promise<import("@devvit/protos").Empty>>;
        SetPermissions: import("vitest").Mock<[request: import("@devvit/protos/types/devvit/plugin/redditapi/users/users_msg.js").SetPermissionsRequest, metadata?: import("@devvit/protos").Metadata | undefined], Promise<import("@devvit/protos").JsonStatus>>;
        Unfriend: import("vitest").Mock<[request: import("@devvit/protos/types/devvit/plugin/redditapi/users/users_msg.js").UnfriendRequest, metadata?: import("@devvit/protos").Metadata | undefined], Promise<import("@devvit/protos").Empty>>;
        UserDataByAccountIds: import("vitest").Mock<[request: import("@devvit/protos/types/devvit/plugin/redditapi/users/users_msg.js").UserDataByAccountIdsRequest, metadata?: import("@devvit/protos").Metadata | undefined], Promise<import("@devvit/protos").UserDataByAccountIdsResponse>>;
        UsernameAvailable: import("vitest").Mock<[request: import("@devvit/protos/types/devvit/plugin/redditapi/users/users_msg.js").UsernameAvailableRequest, metadata?: import("@devvit/protos").Metadata | undefined], Promise<import("@devvit/protos/community.js").BoolValue>>;
        UnfriendUser: import("vitest").Mock<[request: import("@devvit/protos/types/devvit/plugin/redditapi/users/users_msg.js").GenericUsersRequest, metadata?: import("@devvit/protos").Metadata | undefined], Promise<import("@devvit/protos").Empty>>;
        GetFriendInformation: import("vitest").Mock<[request: import("@devvit/protos/types/devvit/plugin/redditapi/users/users_msg.js").GenericUsersRequest, metadata?: import("@devvit/protos").Metadata | undefined], Promise<import("@devvit/protos/types/devvit/plugin/redditapi/users/users_msg.js").GeneralFriendResponse>>;
        UpdateFriendRelationship: import("vitest").Mock<[request: import("@devvit/protos/types/devvit/plugin/redditapi/users/users_msg.js").UpdateFriendRelationshipRequest, metadata?: import("@devvit/protos").Metadata | undefined], Promise<import("@devvit/protos/types/devvit/plugin/redditapi/users/users_msg.js").GeneralFriendResponse>>;
        UserTrophies: import("vitest").Mock<[request: import("@devvit/protos/types/devvit/plugin/redditapi/users/users_msg.js").GenericUsersRequest, metadata?: import("@devvit/protos").Metadata | undefined], Promise<import("@devvit/protos/types/devvit/plugin/redditapi/users/users_msg.js").UserTrophiesResponse>>;
        UserAbout: import("vitest").Mock<[request: import("@devvit/protos/types/devvit/plugin/redditapi/users/users_msg.js").UserAboutRequest, metadata?: import("@devvit/protos").Metadata | undefined], Promise<import("@devvit/protos/types/devvit/plugin/redditapi/users/users_msg.js").UserAboutResponse>>;
        UserWhere: import("vitest").Mock<[request: import("@devvit/protos/types/devvit/plugin/redditapi/users/users_msg.js").UserWhereRequest, metadata?: import("@devvit/protos").Metadata | undefined], Promise<import("@devvit/protos").Listing>>;
    };
    Widgets: {
        AddButtonWidget: import("vitest").Mock<[request: import("@devvit/protos").AddButtonWidgetRequest, metadata?: import("@devvit/protos").Metadata | undefined], Promise<import("@devvit/protos").ButtonWidget>>;
        AddImageWidget: import("vitest").Mock<[request: import("@devvit/protos").AddImageWidgetRequest, metadata?: import("@devvit/protos").Metadata | undefined], Promise<import("@devvit/protos").ImageWidget>>;
        AddCalendarWidget: import("vitest").Mock<[request: import("@devvit/protos").AddCalendarWidgetRequest, metadata?: import("@devvit/protos").Metadata | undefined], Promise<import("@devvit/protos").CalendarWidget>>;
        AddTextAreaWidget: import("vitest").Mock<[request: import("@devvit/protos").AddTextAreaWidgetRequest, metadata?: import("@devvit/protos").Metadata | undefined], Promise<import("@devvit/protos").TextAreaWidget>>;
        AddCommunityListWidget: import("vitest").Mock<[request: import("@devvit/protos").AddCommunityListWidgetRequest, metadata?: import("@devvit/protos").Metadata | undefined], Promise<import("@devvit/protos").CommunityListWidget>>;
        AddPostFlairWidget: import("vitest").Mock<[request: import("@devvit/protos").AddPostFlairWidgetRequest, metadata?: import("@devvit/protos").Metadata | undefined], Promise<import("@devvit/protos").PostFlairWidget>>;
        AddCustomWidget: import("vitest").Mock<[request: import("@devvit/protos").AddCustomWidgetRequest, metadata?: import("@devvit/protos").Metadata | undefined], Promise<import("@devvit/protos").CustomWidget>>;
        DeleteWidget: import("vitest").Mock<[request: import("@devvit/protos").DeleteWidgetRequest, metadata?: import("@devvit/protos").Metadata | undefined], Promise<import("@devvit/protos").Empty>>;
        UpdateButtonWidget: import("vitest").Mock<[request: import("@devvit/protos").UpdateButtonWidgetRequest, metadata?: import("@devvit/protos").Metadata | undefined], Promise<import("@devvit/protos").ButtonWidget>>;
        UpdateImageWidget: import("vitest").Mock<[request: import("@devvit/protos").UpdateImageWidgetRequest, metadata?: import("@devvit/protos").Metadata | undefined], Promise<import("@devvit/protos").ImageWidget>>;
        UpdateCalendarWidget: import("vitest").Mock<[request: import("@devvit/protos").UpdateCalendarWidgetRequest, metadata?: import("@devvit/protos").Metadata | undefined], Promise<import("@devvit/protos").CalendarWidget>>;
        UpdateTextAreaWidget: import("vitest").Mock<[request: import("@devvit/protos").UpdateTextAreaWidgetRequest, metadata?: import("@devvit/protos").Metadata | undefined], Promise<import("@devvit/protos").TextAreaWidget>>;
        UpdateCommunityListWidget: import("vitest").Mock<[request: import("@devvit/protos").UpdateCommunityListWidgetRequest, metadata?: import("@devvit/protos").Metadata | undefined], Promise<import("@devvit/protos").UpdateCommunityListWidgetResponse>>;
        UpdatePostFlairWidget: import("vitest").Mock<[request: import("@devvit/protos").UpdatePostFlairWidgetRequest, metadata?: import("@devvit/protos").Metadata | undefined], Promise<import("@devvit/protos").PostFlairWidget>>;
        UpdateCustomWidget: import("vitest").Mock<[request: import("@devvit/protos").UpdateCustomWidgetRequest, metadata?: import("@devvit/protos").Metadata | undefined], Promise<import("@devvit/protos").CustomWidget>>;
        GetWidgetImageUploadLease: import("vitest").Mock<[request: import("@devvit/protos").GetWidgetImageUploadLeaseRequest, metadata?: import("@devvit/protos").Metadata | undefined], Promise<import("@devvit/protos").GetWidgetImageUploadLeaseResponse>>;
        OrderWidgets: import("vitest").Mock<[request: import("@devvit/protos").OrderWidgetsRequest, metadata?: import("@devvit/protos").Metadata | undefined], Promise<import("@devvit/protos").Empty>>;
        GetWidgets: import("vitest").Mock<[request: import("@devvit/protos").GetWidgetsRequest, metadata?: import("@devvit/protos").Metadata | undefined], Promise<import("@devvit/protos").GetWidgetsResponse>>;
    };
    Wiki: {
        GetWikiPages: import("vitest").Mock<[request: import("@devvit/protos").GetWikiPagesRequest, metadata?: import("@devvit/protos").Metadata | undefined], Promise<import("@devvit/protos").GetWikiPagesResponse>>;
        GetWikiPage: import("vitest").Mock<[request: import("@devvit/protos").GetWikiPageRequest, metadata?: import("@devvit/protos").Metadata | undefined], Promise<import("@devvit/protos").GetWikiPageResponse>>;
        EditWikiPage: import("vitest").Mock<[request: import("@devvit/protos").EditWikiPageRequest, metadata?: import("@devvit/protos").Metadata | undefined], Promise<import("@devvit/protos").Empty>>;
        HideWikiPageRevision: import("vitest").Mock<[request: import("@devvit/protos").HideWikiPageRevisionRequest, metadata?: import("@devvit/protos").Metadata | undefined], Promise<import("@devvit/protos").HideWikiPageRevisionResponse>>;
        GetWikiPageRevisions: import("vitest").Mock<[request: import("@devvit/protos").GetWikiPageRevisionsRequest, metadata?: import("@devvit/protos").Metadata | undefined], Promise<import("@devvit/protos").WikiPageRevisionListing>>;
        GetWikiRevisions: import("vitest").Mock<[request: import("@devvit/protos").GetWikiRevisionsRequest, metadata?: import("@devvit/protos").Metadata | undefined], Promise<import("@devvit/protos").WikiPageRevisionListing>>;
        RevertWikiPage: import("vitest").Mock<[request: import("@devvit/protos").RevertWikiPageRequest, metadata?: import("@devvit/protos").Metadata | undefined], Promise<import("@devvit/protos").Empty>>;
        GetWikiPageSettings: import("vitest").Mock<[request: import("@devvit/protos").GetWikiPageSettingsRequest, metadata?: import("@devvit/protos").Metadata | undefined], Promise<import("@devvit/protos").WikiPageSettings>>;
        UpdateWikiPageSettings: import("vitest").Mock<[request: import("@devvit/protos").UpdateWikiPageSettingsRequest, metadata?: import("@devvit/protos").Metadata | undefined], Promise<import("@devvit/protos").WikiPageSettings>>;
        AllowEditor: import("vitest").Mock<[request: import("@devvit/protos").AllowEditorRequest, metadata?: import("@devvit/protos").Metadata | undefined], Promise<import("@devvit/protos").Empty>>;
    };
};
//# sourceMappingURL=redditApiPluginsMock.d.ts.map