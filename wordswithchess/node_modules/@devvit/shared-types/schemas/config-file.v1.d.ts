/**
 * Warning: this file is not isomorphic. Do not functionally import this file
 * from client code.
 */
import { Scope } from '@devvit/protos';
import type { JsonObject, JsonValue } from '../json.js';
/**
 * devvit.json with defaults. See config-file.v1.json schema. Schema is assumed
 * to be v1.
 */
export type AppConfig = {
    schema: 'v1';
    name: string;
    media?: {
        dir: string;
    };
    permissions: AppPermissionConfig;
    post?: AppPostConfig;
    server?: AppServerConfig;
    triggers?: AppTriggersConfig;
    blocks?: AppBlocksConfig;
    dev?: AppDevConfig;
    menu?: AppMenuConfig;
    scheduler?: AppSchedulerConfig;
    settings?: AppSettingsConfig;
    forms?: AppFormsConfig;
    marketingAssets?: AppMarketingAssetsConfig;
    /** The original config as parsed. Used for writebacks. */
    json: AppConfigJson;
};
export type AppBlocksConfig = {
    entry: string;
};
/** Describes plugin usage. */
export type AppPermissionConfig = {
    http: {
        enable: boolean;
        domains: string[];
    };
    media: boolean;
    menu: boolean;
    payments: boolean;
    realtime: boolean;
    redis: boolean;
    reddit: {
        enable: boolean;
        scope: AppScopeConfig;
        asUser: Scope[];
    };
    settings: boolean;
    triggers: boolean;
};
export type AppPostConfig = {
    dir: string;
    entrypoints: AppPostEntrypointsConfig;
};
export type AppPostEntrypointsConfig = {
    [name: string]: AppPostEntrypointConfig;
    default: AppPostEntrypointConfig;
};
export type AppPostEntrypointConfig = {
    entry: string;
    name: string;
    height: AppPostHeightConfig;
    inline?: boolean;
};
export type AppPostHeightConfig = 'regular' | 'tall';
export type AppScopeConfig = 'user' | 'moderator';
export type AppServerConfig = {
    dir: string;
    entry: string;
};
/**
 * Keys are assumed to have the format of `on${keyof TriggerEventType}` in
 * blocks.template.tsx.
 */
export type AppTriggersConfig = {
    onAppInstall?: string;
    onAppUpgrade?: string;
    onAutomoderatorFilterComment?: string;
    onAutomoderatorFilterPost?: string;
    onCommentCreate?: string;
    onCommentDelete?: string;
    onCommentReport?: string;
    onCommentSubmit?: string;
    onCommentUpdate?: string;
    onModAction?: string;
    onModMail?: string;
    onPostCreate?: string;
    onPostDelete?: string;
    onPostFlairUpdate?: string;
    onPostNsfwUpdate?: string;
    onPostReport?: string;
    onPostSpoilerUpdate?: string;
    onPostSubmit?: string;
    onPostUpdate?: string;
};
export type AppMenuUserTypeConfig = 'moderator' | 'user';
export type AppMenuLocationConfig = 'comment' | 'post' | 'subreddit';
export type AppMenuPostFilterConfig = 'currentApp' | 'none';
export type AppMenuItemConfig = {
    label: string;
    description: string;
    forUserType: AppMenuUserTypeConfig;
    location: AppMenuLocationConfig[];
    endpoint: string;
    postFilter: AppMenuPostFilterConfig;
};
export type AppMenuConfig = {
    items: AppMenuItemConfig[];
};
export type AppFormsConfig = {
    [formName: string]: string;
};
export type AppMarketingAssetsConfig = {
    icon?: string;
};
export type AppDevConfig = {
    subreddit?: string;
};
export type AppSchedulerConfig = {
    tasks: {
        [name: string]: AppSchedulerTaskConfig;
    };
};
export type AppSchedulerTaskConfig = {
    endpoint: string;
    cron?: string;
    data?: JsonObject;
};
export type AppSettingsConfig = {
    global?: {
        [name: string]: AppSettingConfig;
    };
    subreddit?: {
        [name: string]: AppSettingConfig;
    };
};
export type AppSettingConfig = AppStringSettingConfig | AppParagraphSettingConfig | AppNumberSettingConfig | AppBooleanSettingConfig | AppSelectSettingConfig | AppMultiSelectSettingConfig;
export type AppBaseSettingConfig = {
    name: string;
    label: string;
    helpText?: string;
    validationEndpoint?: string;
};
export type AppStringSettingConfig = AppBaseSettingConfig & {
    type: 'string';
    placeholder?: string;
    defaultValue?: string;
    isSecret?: boolean;
};
export type AppParagraphSettingConfig = AppBaseSettingConfig & {
    type: 'paragraph';
    placeholder?: string;
    defaultValue?: string;
};
export type AppNumberSettingConfig = AppBaseSettingConfig & {
    type: 'number';
    defaultValue?: number;
};
export type AppBooleanSettingConfig = AppBaseSettingConfig & {
    type: 'boolean';
    defaultValue?: boolean;
};
export type AppSelectSettingConfig = AppBaseSettingConfig & {
    type: 'select';
    options: Array<{
        label: string;
        value: string;
    }>;
    defaultValue?: string;
};
export type AppMultiSelectSettingConfig = AppBaseSettingConfig & {
    type: 'multiSelect';
    options: Array<{
        label: string;
        value: string;
    }>;
    defaultValue?: string[];
};
/**
 * https://transform.tools/json-schema-to-typescript
 * @internal
 */
export type AppConfigJson = {
    $schema?: string;
    name: string;
    media?: {
        dir?: string;
    };
    permissions?: {
        http?: {
            enable?: boolean;
            domains?: string[];
        };
        media?: boolean;
        payments?: boolean;
        realtime?: boolean;
        redis?: boolean;
        reddit?: {
            enable?: boolean;
            scope?: AppScopeConfig;
            asUser?: string[];
        };
    };
    post?: {
        dir?: string;
        entrypoints?: {
            [name: string]: AppPostEntrypointConfigJson;
        } & {
            default: Partial<AppPostEntrypointConfigJson>;
        };
    };
    server?: {
        dir?: string;
        entry?: string;
    };
    triggers?: AppTriggersConfig;
    blocks?: {
        entry?: string;
        menu?: {
            enable?: boolean;
        };
        settings?: {
            enable?: boolean;
        };
    };
    menu?: {
        items?: {
            label: string;
            description?: string;
            forUserType: AppMenuUserTypeConfig;
            location: AppMenuLocationConfig | AppMenuLocationConfig[];
            endpoint: string;
            postFilter: AppMenuPostFilterConfig;
        }[];
    };
    forms?: {
        [formName: string]: string;
    };
    dev?: {
        subreddit?: string;
    };
    scheduler?: AppSchedulerConfigJson;
    settings?: {
        global?: {
            [name: string]: AppSettingConfigJson;
        };
        subreddit?: {
            [name: string]: AppSettingConfigJson;
        };
    };
    marketingAssets?: {
        icon?: string;
    };
    /** User data. */
    [key: string]: JsonValue;
};
export type AppPostEntrypointConfigJson = {
    entry: string;
    height?: AppPostHeightConfig;
    inline?: boolean;
};
export type AppSchedulerConfigJson = {
    tasks: {
        [name: string]: AppSchedulerTaskConfig | string;
    };
};
export type AppSettingConfigJson = Omit<AppStringSettingConfig, 'name'> | Omit<AppParagraphSettingConfig, 'name'> | Omit<AppNumberSettingConfig, 'name'> | Omit<AppBooleanSettingConfig, 'name'> | Omit<AppSelectSettingConfig, 'name'> | Omit<AppMultiSelectSettingConfig, 'name'>;
export declare function parseAppConfig(str: string, allowUninitializedConfig: boolean): AppConfig;
export declare function parseAppConfigJson(json: JsonValue, allowUninitializedConfig: boolean): AppConfig;
/** @internal */
export declare function validate(config: Readonly<AppConfig>): void;
//# sourceMappingURL=config-file.v1.d.ts.map