import type { Effect as SharedEffects } from '@devvit/protos';
import { WebViewImmersiveModeEffect } from '@devvit/protos/types/devvit/ui/effects/web_view/v1alpha/immersive_mode.js';
import type { WebViewShareEffect } from '@devvit/protos/types/devvit/ui/effects/web_view/v1alpha/share.js';
import { WebViewInternalEventMessage } from '@devvit/protos/types/devvit/ui/events/v1alpha/web_view.js';
type Effect = Omit<SharedEffects, 'interval'> & {
    immersiveMode?: WebViewImmersiveModeEffect | undefined;
    share?: WebViewShareEffect;
};
/**
 * Emits an effect to the parent window and handles the response if required.
 *
 * @param effect - The effect to be emitted to the parent window
 * @returns A promise that resolves with the response message for effects that require
 *          a response, or resolves immediately with undefined for effects that don't
 *
 * @description
 * This function handles two types of effects:
 * 1. Effects that require a response: Creates a unique ID, sets up a message listener,
 *    and resolves the promise when a matching response is received
 * 2. Effects that don't require a response: Posts the message and resolves immediately
 */
export declare const emitEffect: (effect: Effect) => Promise<WebViewInternalEventMessage | undefined>;
export {};
//# sourceMappingURL=emit-effect.d.ts.map