import { AppSettingsDefinition, ContextActionDefinition, CustomPostDefinition, Definition, FlairDefinition, GraphQLDefinition, HTTPDefinition, InstallationSettingsDefinition, LinksAndCommentsDefinition, ListingsDefinition, MediaServiceDefinition, ModerationDefinition, ModlogDefinition, ModNoteDefinition, NewModmailDefinition, OnAppInstallDefinition, OnAppUpgradeDefinition, OnAutomoderatorFilterCommentDefinition, OnAutomoderatorFilterPostDefinition, OnCommentCreateDefinition, OnCommentDeleteDefinition, OnCommentReportDefinition, OnCommentSubmitDefinition, OnCommentUpdateDefinition, OnModActionDefinition, OnModMailDefinition, OnPostCreateDefinition, OnPostDeleteDefinition, OnPostFlairUpdateDefinition, OnPostNsfwUpdateDefinition, OnPostReportDefinition, OnPostSpoilerUpdateDefinition, OnPostSubmitDefinition, OnPostUpdateDefinition, PrivateMessagesDefinition, RealtimeDefinition, RedisAPIDefinition, SchedulerHandlerDefinition, SettingsDefinition, SubredditsDefinition, UIEventHandlerDefinition, UserActionsDefinition, UsersDefinition, WidgetsDefinition, WikiDefinition, } from '@devvit/protos';
import { PaymentProcessorDefinition, PaymentsServiceDefinition } from '@devvit/protos/payments.js';
import { WebbitServerDefinition } from '@devvit/protos/types/devvit/actor/webbit/webbit.js';
import { normalizeDomains } from '@devvit/shared-types/fetch-domains.js';
import { PLUGIN_NAME, resolveActorHostname } from '@devvit/shared-types/HostnameUtil.js';
/**
 * Convert a static `AppConfig` to a `DependencySpec`. Similar to the classic
 * `Devvit` singleton, `ConfigImpl`, `addPaymentHandler()`, and
 * `paymentsPlugin`.
 */
export function createDependencySpec(actorSpec, config, namespace) {
    const spec = {
        actor: actorSpec,
        hostname: resolveActorHostname(actorSpec.name, namespace),
        permissions: [],
        provides: [],
        uses: [],
    };
    const permissions = {
        requestedFetchDomains: [],
        asUserScopes: [],
    };
    if (config.permissions.http.enable) {
        use(spec, HTTPDefinition);
        permissions.requestedFetchDomains.push(...normalizeDomains(config.permissions.http.domains));
    }
    if (config.permissions.media)
        use(spec, MediaServiceDefinition);
    if (config.permissions.payments) {
        use(spec, PaymentsServiceDefinition);
        provide(spec, PaymentProcessorDefinition);
    }
    if (config.permissions.realtime)
        use(spec, RealtimeDefinition);
    if (config.permissions.reddit.enable) {
        use(spec, FlairDefinition, GraphQLDefinition, LinksAndCommentsDefinition, ListingsDefinition, ModerationDefinition, ModNoteDefinition, NewModmailDefinition, PrivateMessagesDefinition, SubredditsDefinition, UsersDefinition, WidgetsDefinition, WikiDefinition);
        if (config.permissions.reddit.scope === 'moderator')
            use(spec, ModlogDefinition);
        if (config.permissions.reddit.asUser.length > 0) {
            use(spec, UserActionsDefinition);
            permissions.asUserScopes.push(...config.permissions.reddit.asUser);
        }
    }
    if (config.permissions.redis)
        use(spec, RedisAPIDefinition);
    if (permissions.requestedFetchDomains.length > 0 || permissions.asUserScopes.length > 0) {
        spec.permissions.push(permissions);
    }
    if (config.post) {
        provide(spec, CustomPostDefinition, UIEventHandlerDefinition);
    }
    if (config.server)
        provide(spec, WebbitServerDefinition);
    if (config.permissions.menu)
        provide(spec, ContextActionDefinition);
    if (config.permissions.settings) {
        use(spec, SettingsDefinition);
        provide(spec, AppSettingsDefinition, InstallationSettingsDefinition);
    }
    if (config.forms)
        provide(spec, UIEventHandlerDefinition);
    if (config.scheduler) {
        provide(spec, SchedulerHandlerDefinition);
        if (Object.values(config.scheduler.tasks).some((task) => task.cron)) {
            provide(spec, OnAppInstallDefinition);
            provide(spec, OnAppUpgradeDefinition);
        }
    }
    if (config.triggers) {
        if (config.triggers.onAppInstall)
            provide(spec, OnAppInstallDefinition);
        if (config.triggers.onAppUpgrade)
            provide(spec, OnAppUpgradeDefinition);
        if (config.triggers.onAutomoderatorFilterComment)
            provide(spec, OnAutomoderatorFilterCommentDefinition);
        if (config.triggers.onAutomoderatorFilterPost)
            provide(spec, OnAutomoderatorFilterPostDefinition);
        if (config.triggers.onCommentCreate)
            provide(spec, OnCommentCreateDefinition);
        if (config.triggers.onCommentDelete)
            provide(spec, OnCommentDeleteDefinition);
        if (config.triggers.onCommentReport)
            provide(spec, OnCommentReportDefinition);
        if (config.triggers.onCommentSubmit)
            provide(spec, OnCommentSubmitDefinition);
        if (config.triggers.onCommentUpdate)
            provide(spec, OnCommentUpdateDefinition);
        if (config.triggers.onModAction)
            provide(spec, OnModActionDefinition);
        if (config.triggers.onModMail)
            provide(spec, OnModMailDefinition);
        if (config.triggers.onPostCreate)
            provide(spec, OnPostCreateDefinition);
        if (config.triggers.onPostDelete)
            provide(spec, OnPostDeleteDefinition);
        if (config.triggers.onPostFlairUpdate)
            provide(spec, OnPostFlairUpdateDefinition);
        if (config.triggers.onPostNsfwUpdate)
            provide(spec, OnPostNsfwUpdateDefinition);
        if (config.triggers.onPostReport)
            provide(spec, OnPostReportDefinition);
        if (config.triggers.onPostSpoilerUpdate)
            provide(spec, OnPostSpoilerUpdateDefinition);
        if (config.triggers.onPostSubmit)
            provide(spec, OnPostSubmitDefinition);
        if (config.triggers.onPostUpdate)
            provide(spec, OnPostUpdateDefinition);
    }
    if (config.settings) {
        use(spec, SettingsDefinition);
        if (config.settings.global) {
            provide(spec, AppSettingsDefinition);
        }
        if (config.settings.subreddit) {
            provide(spec, InstallationSettingsDefinition);
        }
    }
    return spec;
}
function provide(spec, ...definitions) {
    spec.provides.push(...definitions
        .filter((def) => !spec.provides.some((provide) => provide.definition?.fullName === def.fullName))
        .map((def) => ({
        actor: structuredClone(spec.actor),
        definition: Definition.toSerializable(def),
        partitionsBy: [],
    })));
}
function use(spec, ...definitions) {
    spec.uses.push(...definitions
        .filter((def) => !spec.uses.some((use) => use.typeName === def.fullName))
        .map((def) => ({ name: PLUGIN_NAME, typeName: def.fullName })));
}
