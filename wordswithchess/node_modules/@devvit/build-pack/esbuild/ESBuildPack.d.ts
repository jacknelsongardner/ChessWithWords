import { Bundle } from '@devvit/protos/types/devvit/plugin/buildpack/buildpack_common.js';
import { type ActorSpec } from '@devvit/protos/types/devvit/runtime/bundle.js';
import type { Namespace } from '@devvit/shared-types/Namespace.js';
import type { AppConfig, AppServerConfig } from '@devvit/shared-types/schemas/config-file.v1.js';
import { Observable } from 'rxjs';
import type { ProjectRootDir } from '../lib/BuildPack.js';
export type CompileParams = {
    config: AppConfig | undefined;
    minify: 'None' | 'All';
    info: ActorSpec;
    includeMetafile: boolean;
    root: ProjectRootDir;
};
export type CompileResponse = {
    bundles: Bundle[];
    errors: CompileLog[];
    warnings: CompileLog[];
};
export type CompileLog = {
    detail?: CompileLogLineDetail;
    text: string;
};
export type CompileLogLineDetail = {
    /** 0-based.*/
    column: number;
    filename: string;
    /** 1-based. */
    line: number;
    suggestion: string;
    text: string;
};
export declare class Watcher {
    #private;
    /**
     * The default behavior is to externalize @devvit/protos. Set
     * disableExternDevvitProtos to bundle this large dependency.
     */
    constructor(config: Readonly<AppConfig> | undefined, namespace: Readonly<Namespace>, root: ProjectRootDir, actorSpec: ActorSpec, options?: Readonly<ESBuildPackOptions>);
    getObservable(): Observable<CompileResponse>;
    dispose(): Promise<void>;
}
type ESBuildPackOptions = {
    readonly disableExternDevvitProtos?: boolean | undefined;
};
export declare class ESBuildPack {
    #private;
    /**
     * The default behavior is to externalize @devvit/protos. Set
     * disableExternDevvitProtos to bundle this large dependency.
     */
    constructor(namespace: Readonly<Namespace>, options?: Readonly<ESBuildPackOptions>);
    compile({ config, minify, info, includeMetafile, root, }: CompileParams): Promise<CompileResponse>;
    dispose(): Promise<void>;
    watch({ config, root, info }: CompileParams): Observable<CompileResponse>;
}
/** @internal */
export declare function findSourceMapURL(src: string): string | undefined;
/** Throws when unable to read config.server.entry. */
export declare function updateBundleServer(bundles: readonly Bundle[], root: ProjectRootDir, server: Readonly<AppServerConfig> | undefined): void;
export declare function updateBundleVersion(bundles: readonly Bundle[], version: string): void;
export {};
//# sourceMappingURL=ESBuildPack.d.ts.map