var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _TxClient_instances, _TxClient_plugin, _TxClient_transactionId, _TxClient_txnStartMetadata, _TxClient_metadata_get, _RedisClient_instances, _RedisClient_pluginCache, _RedisClient_scope, _RedisClient_metadata_get, _RedisClient_plugin_get;
import { RedisAPIDefinition, } from '@devvit/protos';
import { BitfieldOverflowBehavior, RedisKeyScope } from '@devvit/protos';
import { context } from '@devvit/server';
import { getDevvitConfig } from '@devvit/shared-types/server/get-devvit-config.js';
// Re-export this here, to prevent devs from needing to directly import from the protos package.
export { RedisKeyScope } from '@devvit/protos';
// TODO: This code is currently cloned into the Devvit Web world from `@devvit/public-api`. If
//  you change this code, please make sure to update the other package as well. Eventually, that
//  copy of the code will be deleted, when we move to a fully Devvit Web world.
export class TxClient {
    constructor(plugin, transactionId, metadata) {
        _TxClient_instances.add(this);
        _TxClient_plugin.set(this, void 0);
        _TxClient_transactionId.set(this, void 0);
        _TxClient_txnStartMetadata.set(this, void 0);
        __classPrivateFieldSet(this, _TxClient_plugin, plugin, "f");
        __classPrivateFieldSet(this, _TxClient_transactionId, transactionId, "f");
        __classPrivateFieldSet(this, _TxClient_txnStartMetadata, metadata, "f");
    }
    async get(key) {
        await __classPrivateFieldGet(this, _TxClient_plugin, "f").Get({ key: key, transactionId: __classPrivateFieldGet(this, _TxClient_transactionId, "f") }, __classPrivateFieldGet(this, _TxClient_instances, "a", _TxClient_metadata_get));
        return this;
    }
    async multi() {
        await __classPrivateFieldGet(this, _TxClient_plugin, "f").Multi(__classPrivateFieldGet(this, _TxClient_transactionId, "f"), __classPrivateFieldGet(this, _TxClient_instances, "a", _TxClient_metadata_get));
    }
    async set(key, value, options) {
        let expiration;
        if (options?.expiration) {
            expiration = Math.floor((options.expiration.getTime() - Date.now()) / 1000); // convert to seconds
            if (expiration < 1) {
                expiration = 1; // minimum expiration is 1 second, clock skew can cause issues, so let's set 1 second.
            }
        }
        await __classPrivateFieldGet(this, _TxClient_plugin, "f").Set({
            key,
            value,
            nx: options?.nx === true,
            xx: options?.xx === true,
            expiration: expiration || 0,
            transactionId: __classPrivateFieldGet(this, _TxClient_transactionId, "f"),
        }, __classPrivateFieldGet(this, _TxClient_instances, "a", _TxClient_metadata_get));
        return this;
    }
    async del(...keys) {
        await __classPrivateFieldGet(this, _TxClient_plugin, "f").Del({ keys: keys, transactionId: __classPrivateFieldGet(this, _TxClient_transactionId, "f") }, __classPrivateFieldGet(this, _TxClient_instances, "a", _TxClient_metadata_get));
        return this;
    }
    async type(key) {
        await __classPrivateFieldGet(this, _TxClient_plugin, "f").Type({ key: key, transactionId: __classPrivateFieldGet(this, _TxClient_transactionId, "f") }, __classPrivateFieldGet(this, _TxClient_instances, "a", _TxClient_metadata_get));
        return this;
    }
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    async exec() {
        const response = await __classPrivateFieldGet(this, _TxClient_plugin, "f").Exec(__classPrivateFieldGet(this, _TxClient_transactionId, "f"), __classPrivateFieldGet(this, _TxClient_instances, "a", _TxClient_metadata_get));
        // eslint-disable-next-line
        let output = [];
        for (const result of response.response) {
            if (result.members) {
                output.push(result.members);
            }
            else if (result.nil !== undefined) {
                output.push(null);
            }
            else if (result.num !== undefined) {
                output.push(result.num);
            }
            else if (result.values !== undefined) {
                output.push(result.values.values);
            }
            else if (result.str !== undefined) {
                output.push(result.str);
            }
            else if (result.dbl !== undefined) {
                output.push(result.dbl);
            }
        }
        return output;
    }
    async discard() {
        await __classPrivateFieldGet(this, _TxClient_plugin, "f").Discard(__classPrivateFieldGet(this, _TxClient_transactionId, "f"), __classPrivateFieldGet(this, _TxClient_instances, "a", _TxClient_metadata_get));
    }
    async watch(...keys) {
        await __classPrivateFieldGet(this, _TxClient_plugin, "f").Watch({ keys: keys, transactionId: __classPrivateFieldGet(this, _TxClient_transactionId, "f") }, __classPrivateFieldGet(this, _TxClient_instances, "a", _TxClient_metadata_get));
        return this;
    }
    async unwatch() {
        await __classPrivateFieldGet(this, _TxClient_plugin, "f").Unwatch(__classPrivateFieldGet(this, _TxClient_transactionId, "f"), __classPrivateFieldGet(this, _TxClient_instances, "a", _TxClient_metadata_get));
        return this;
    }
    async getRange(key, start, end) {
        await __classPrivateFieldGet(this, _TxClient_plugin, "f").GetRange({ key, start, end, transactionId: __classPrivateFieldGet(this, _TxClient_transactionId, "f") }, __classPrivateFieldGet(this, _TxClient_instances, "a", _TxClient_metadata_get));
        return this;
    }
    async setRange(key, offset, value) {
        await __classPrivateFieldGet(this, _TxClient_plugin, "f").SetRange({ key, offset, value, transactionId: __classPrivateFieldGet(this, _TxClient_transactionId, "f") }, __classPrivateFieldGet(this, _TxClient_instances, "a", _TxClient_metadata_get));
        return this;
    }
    async strLen(key) {
        await __classPrivateFieldGet(this, _TxClient_plugin, "f").Strlen({ key, transactionId: __classPrivateFieldGet(this, _TxClient_transactionId, "f") }, __classPrivateFieldGet(this, _TxClient_instances, "a", _TxClient_metadata_get));
        return this;
    }
    async mGet(keys) {
        await __classPrivateFieldGet(this, _TxClient_plugin, "f").MGet({ keys, transactionId: __classPrivateFieldGet(this, _TxClient_transactionId, "f") }, __classPrivateFieldGet(this, _TxClient_instances, "a", _TxClient_metadata_get));
        return this;
    }
    async mSet(keyValues) {
        const kv = Object.entries(keyValues).map(([key, value]) => ({ key, value }));
        await __classPrivateFieldGet(this, _TxClient_plugin, "f").MSet({ kv, transactionId: __classPrivateFieldGet(this, _TxClient_transactionId, "f") }, __classPrivateFieldGet(this, _TxClient_instances, "a", _TxClient_metadata_get));
        return this;
    }
    async incrBy(key, value) {
        await __classPrivateFieldGet(this, _TxClient_plugin, "f").IncrBy({ key, value, transactionId: __classPrivateFieldGet(this, _TxClient_transactionId, "f") }, __classPrivateFieldGet(this, _TxClient_instances, "a", _TxClient_metadata_get));
        return this;
    }
    async expire(key, seconds) {
        await __classPrivateFieldGet(this, _TxClient_plugin, "f").Expire({ key, seconds, transactionId: __classPrivateFieldGet(this, _TxClient_transactionId, "f") }, __classPrivateFieldGet(this, _TxClient_instances, "a", _TxClient_metadata_get));
        return this;
    }
    async expireTime(key) {
        await __classPrivateFieldGet(this, _TxClient_plugin, "f").ExpireTime({ key, transactionId: __classPrivateFieldGet(this, _TxClient_transactionId, "f") }, __classPrivateFieldGet(this, _TxClient_instances, "a", _TxClient_metadata_get));
        return this;
    }
    async zAdd(key, ...members) {
        await __classPrivateFieldGet(this, _TxClient_plugin, "f").ZAdd({ key, members, transactionId: __classPrivateFieldGet(this, _TxClient_transactionId, "f") }, __classPrivateFieldGet(this, _TxClient_instances, "a", _TxClient_metadata_get));
        return this;
    }
    async zScore(key, member) {
        await __classPrivateFieldGet(this, _TxClient_plugin, "f").ZScore({ key: { key, transactionId: __classPrivateFieldGet(this, _TxClient_transactionId, "f") }, member }, __classPrivateFieldGet(this, _TxClient_instances, "a", _TxClient_metadata_get));
        return this;
    }
    async zRank(key, member) {
        await __classPrivateFieldGet(this, _TxClient_plugin, "f").ZRank({ key: { key, transactionId: __classPrivateFieldGet(this, _TxClient_transactionId, "f") }, member }, __classPrivateFieldGet(this, _TxClient_instances, "a", _TxClient_metadata_get));
        return this;
    }
    async zIncrBy(key, member, value) {
        await __classPrivateFieldGet(this, _TxClient_plugin, "f").ZIncrBy({ key, member, value, transactionId: __classPrivateFieldGet(this, _TxClient_transactionId, "f") }, __classPrivateFieldGet(this, _TxClient_instances, "a", _TxClient_metadata_get));
        return this;
    }
    async zScan(key, cursor, pattern, count) {
        const request = {
            key,
            cursor,
            pattern,
            count,
            transactionId: __classPrivateFieldGet(this, _TxClient_transactionId, "f"),
        };
        await __classPrivateFieldGet(this, _TxClient_plugin, "f").ZScan(request, __classPrivateFieldGet(this, _TxClient_instances, "a", _TxClient_metadata_get));
        return this;
    }
    async zCard(key) {
        await __classPrivateFieldGet(this, _TxClient_plugin, "f").ZCard({ key, transactionId: __classPrivateFieldGet(this, _TxClient_transactionId, "f") }, __classPrivateFieldGet(this, _TxClient_instances, "a", _TxClient_metadata_get));
        return this;
    }
    async zRange(key, start, stop, options) {
        // eslint-disable-next-line
        let opts = { rev: false, byLex: false, byScore: false, offset: 0, count: 1000 };
        if (options?.reverse) {
            opts.rev = options.reverse;
        }
        if (options?.by === 'lex') {
            opts.byLex = true;
        }
        else if (options?.by === 'score') {
            opts.byScore = true;
        }
        if (options?.limit) {
            if (opts.byLex || opts.byScore) {
                opts.offset = options.limit.offset;
                opts.count = options.limit.count;
            }
            else {
                throw new Error(`zRange parsing error: 'limit' only allowed when 'options.by' is 'lex' or 'score'`);
            }
        }
        await __classPrivateFieldGet(this, _TxClient_plugin, "f").ZRange({
            key: { key: key, transactionId: __classPrivateFieldGet(this, _TxClient_transactionId, "f") },
            start: start + '',
            stop: stop + '',
            ...opts,
        }, __classPrivateFieldGet(this, _TxClient_instances, "a", _TxClient_metadata_get));
        return this;
    }
    async zRem(key, members) {
        await __classPrivateFieldGet(this, _TxClient_plugin, "f").ZRem({ key: { key, transactionId: __classPrivateFieldGet(this, _TxClient_transactionId, "f") }, members: members }, __classPrivateFieldGet(this, _TxClient_instances, "a", _TxClient_metadata_get));
        return this;
    }
    async zRemRangeByLex(key, min, max) {
        await __classPrivateFieldGet(this, _TxClient_plugin, "f").ZRemRangeByLex({ key: { key, transactionId: __classPrivateFieldGet(this, _TxClient_transactionId, "f") }, min: min, max: max }, __classPrivateFieldGet(this, _TxClient_instances, "a", _TxClient_metadata_get));
        return this;
    }
    async zRemRangeByRank(key, start, stop) {
        await __classPrivateFieldGet(this, _TxClient_plugin, "f").ZRemRangeByRank({ key: { key, transactionId: __classPrivateFieldGet(this, _TxClient_transactionId, "f") }, start: start, stop: stop }, __classPrivateFieldGet(this, _TxClient_instances, "a", _TxClient_metadata_get));
        return this;
    }
    async zRemRangeByScore(key, min, max) {
        await __classPrivateFieldGet(this, _TxClient_plugin, "f").ZRemRangeByScore({ key: { key, transactionId: __classPrivateFieldGet(this, _TxClient_transactionId, "f") }, min: min, max: max }, __classPrivateFieldGet(this, _TxClient_instances, "a", _TxClient_metadata_get));
        return this;
    }
    async hGetAll(key) {
        await __classPrivateFieldGet(this, _TxClient_plugin, "f").HGetAll({ key, transactionId: __classPrivateFieldGet(this, _TxClient_transactionId, "f") }, __classPrivateFieldGet(this, _TxClient_instances, "a", _TxClient_metadata_get));
        return this;
    }
    async hGet(key, field) {
        await __classPrivateFieldGet(this, _TxClient_plugin, "f").HGet({ key: key, field: field, transactionId: __classPrivateFieldGet(this, _TxClient_transactionId, "f") }, __classPrivateFieldGet(this, _TxClient_instances, "a", _TxClient_metadata_get));
        return this;
    }
    async hMGet(key, fields) {
        await __classPrivateFieldGet(this, _TxClient_plugin, "f").HMGet({ key: key, fields: fields, transactionId: __classPrivateFieldGet(this, _TxClient_transactionId, "f") }, __classPrivateFieldGet(this, _TxClient_instances, "a", _TxClient_metadata_get));
        return this;
    }
    async hSet(key, fieldValues) {
        const fv = Object.entries(fieldValues).map(([field, value]) => ({ field, value }));
        await __classPrivateFieldGet(this, _TxClient_plugin, "f").HSet({ key, fv, transactionId: __classPrivateFieldGet(this, _TxClient_transactionId, "f") }, __classPrivateFieldGet(this, _TxClient_instances, "a", _TxClient_metadata_get));
        return this;
    }
    async hIncrBy(key, field, value) {
        await __classPrivateFieldGet(this, _TxClient_plugin, "f").HIncrBy({ key, field, value, transactionId: __classPrivateFieldGet(this, _TxClient_transactionId, "f") }, __classPrivateFieldGet(this, _TxClient_instances, "a", _TxClient_metadata_get));
        return this;
    }
    async hDel(key, fields) {
        await __classPrivateFieldGet(this, _TxClient_plugin, "f").HDel({ key, fields, transactionId: __classPrivateFieldGet(this, _TxClient_transactionId, "f") }, __classPrivateFieldGet(this, _TxClient_instances, "a", _TxClient_metadata_get));
        return this;
    }
    async hScan(key, cursor, pattern, count) {
        const request = {
            key,
            cursor,
            pattern,
            count,
            transactionId: __classPrivateFieldGet(this, _TxClient_transactionId, "f"),
        };
        await __classPrivateFieldGet(this, _TxClient_plugin, "f").HScan(request, __classPrivateFieldGet(this, _TxClient_instances, "a", _TxClient_metadata_get));
        return this;
    }
    async hKeys(key) {
        await __classPrivateFieldGet(this, _TxClient_plugin, "f").HKeys({ key, transactionId: __classPrivateFieldGet(this, _TxClient_transactionId, "f") }, __classPrivateFieldGet(this, _TxClient_instances, "a", _TxClient_metadata_get));
        return this;
    }
    async hLen(key) {
        await __classPrivateFieldGet(this, _TxClient_plugin, "f").HLen({ key, transactionId: __classPrivateFieldGet(this, _TxClient_transactionId, "f") }, __classPrivateFieldGet(this, _TxClient_instances, "a", _TxClient_metadata_get));
        return this;
    }
}
_TxClient_plugin = new WeakMap(), _TxClient_transactionId = new WeakMap(), _TxClient_txnStartMetadata = new WeakMap(), _TxClient_instances = new WeakSet(), _TxClient_metadata_get = function _TxClient_metadata_get() {
    assertTxMetadataIsCurrent(__classPrivateFieldGet(this, _TxClient_txnStartMetadata, "f"));
    return __classPrivateFieldGet(this, _TxClient_txnStartMetadata, "f");
};
/**
 * This is a subset of the overall Redis API.  You should be able to look up https://redis.io/commands
 * for more details on each command.
 *
 * For the moment, we've implemented a lot of the basic string/number commands, sorted sets, and transactions.
 * This is the most powerful subset and the safest.
 */
export class RedisClient {
    constructor(scope) {
        _RedisClient_instances.add(this);
        _RedisClient_pluginCache.set(this, void 0);
        _RedisClient_scope.set(this, void 0);
        __classPrivateFieldSet(this, _RedisClient_scope, scope, "f");
        this.global =
            scope === RedisKeyScope.INSTALLATION ? new RedisClient(RedisKeyScope.GLOBAL) : this;
    }
    async watch(...keys) {
        const txId = await __classPrivateFieldGet(this, _RedisClient_instances, "a", _RedisClient_plugin_get).Watch({ keys }, __classPrivateFieldGet(this, _RedisClient_instances, "a", _RedisClient_metadata_get));
        return new TxClient(__classPrivateFieldGet(this, _RedisClient_instances, "a", _RedisClient_plugin_get), txId, __classPrivateFieldGet(this, _RedisClient_instances, "a", _RedisClient_metadata_get));
    }
    async get(key) {
        try {
            const response = await __classPrivateFieldGet(this, _RedisClient_instances, "a", _RedisClient_plugin_get).Get({ key, scope: __classPrivateFieldGet(this, _RedisClient_scope, "f") }, {
                ...__classPrivateFieldGet(this, _RedisClient_instances, "a", _RedisClient_metadata_get),
                'throw-redis-nil': { values: ['true'] },
            });
            return response !== null ? (response.value ?? undefined) : response;
        }
        catch (e) {
            if (isRedisNilError(e)) {
                return undefined;
            }
            throw e;
        }
    }
    async getBuffer(key) {
        try {
            const response = await __classPrivateFieldGet(this, _RedisClient_instances, "a", _RedisClient_plugin_get).GetBytes({ key, scope: __classPrivateFieldGet(this, _RedisClient_scope, "f") }, {
                ...__classPrivateFieldGet(this, _RedisClient_instances, "a", _RedisClient_metadata_get),
                'throw-redis-nil': { values: ['true'] },
            });
            return response !== null ? Buffer.from(response.value) : response;
        }
        catch (e) {
            if (isRedisNilError(e)) {
                return undefined;
            }
            throw e;
        }
    }
    async set(key, value, options) {
        let expiration;
        if (options?.expiration) {
            expiration = Math.floor((options.expiration.getTime() - Date.now()) / 1000); // convert to seconds
            if (expiration < 1) {
                expiration = 1; // minimum expiration is 1 second, clock skew can cause issues, so let's set 1 second.
            }
        }
        const response = await __classPrivateFieldGet(this, _RedisClient_instances, "a", _RedisClient_plugin_get).Set({
            key,
            value,
            nx: options?.nx === true && !options.xx,
            xx: options?.xx === true && !options.nx,
            expiration: expiration || 0,
            scope: __classPrivateFieldGet(this, _RedisClient_scope, "f"),
        }, __classPrivateFieldGet(this, _RedisClient_instances, "a", _RedisClient_metadata_get));
        return response.value;
    }
    async exists(...keys) {
        const response = await __classPrivateFieldGet(this, _RedisClient_instances, "a", _RedisClient_plugin_get).Exists({ keys, scope: __classPrivateFieldGet(this, _RedisClient_scope, "f") }, __classPrivateFieldGet(this, _RedisClient_instances, "a", _RedisClient_metadata_get));
        return response.existingKeys;
    }
    async del(...keys) {
        await __classPrivateFieldGet(this, _RedisClient_instances, "a", _RedisClient_plugin_get).Del({ keys, scope: __classPrivateFieldGet(this, _RedisClient_scope, "f") }, __classPrivateFieldGet(this, _RedisClient_instances, "a", _RedisClient_metadata_get));
    }
    async incrBy(key, value) {
        const response = await __classPrivateFieldGet(this, _RedisClient_instances, "a", _RedisClient_plugin_get).IncrBy({ key, value, scope: __classPrivateFieldGet(this, _RedisClient_scope, "f") }, __classPrivateFieldGet(this, _RedisClient_instances, "a", _RedisClient_metadata_get));
        return response.value;
    }
    async getRange(key, start, end) {
        const response = await __classPrivateFieldGet(this, _RedisClient_instances, "a", _RedisClient_plugin_get).GetRange({ key, start, end, scope: __classPrivateFieldGet(this, _RedisClient_scope, "f") }, __classPrivateFieldGet(this, _RedisClient_instances, "a", _RedisClient_metadata_get));
        return response !== null ? response.value : response;
    }
    async setRange(key, offset, value) {
        const response = await __classPrivateFieldGet(this, _RedisClient_instances, "a", _RedisClient_plugin_get).SetRange({ key, offset, value, scope: __classPrivateFieldGet(this, _RedisClient_scope, "f") }, __classPrivateFieldGet(this, _RedisClient_instances, "a", _RedisClient_metadata_get));
        return response.value;
    }
    async strLen(key) {
        const response = await __classPrivateFieldGet(this, _RedisClient_instances, "a", _RedisClient_plugin_get).Strlen({ key, scope: __classPrivateFieldGet(this, _RedisClient_scope, "f") }, __classPrivateFieldGet(this, _RedisClient_instances, "a", _RedisClient_metadata_get));
        return response.value;
    }
    async expire(key, seconds) {
        await __classPrivateFieldGet(this, _RedisClient_instances, "a", _RedisClient_plugin_get).Expire({ key, seconds, scope: __classPrivateFieldGet(this, _RedisClient_scope, "f") }, __classPrivateFieldGet(this, _RedisClient_instances, "a", _RedisClient_metadata_get));
    }
    async expireTime(key) {
        const response = await __classPrivateFieldGet(this, _RedisClient_instances, "a", _RedisClient_plugin_get).ExpireTime({ key, scope: __classPrivateFieldGet(this, _RedisClient_scope, "f") }, __classPrivateFieldGet(this, _RedisClient_instances, "a", _RedisClient_metadata_get));
        return response.value;
    }
    async zAdd(key, ...members) {
        return (await __classPrivateFieldGet(this, _RedisClient_instances, "a", _RedisClient_plugin_get).ZAdd({ key, members, scope: __classPrivateFieldGet(this, _RedisClient_scope, "f") }, __classPrivateFieldGet(this, _RedisClient_instances, "a", _RedisClient_metadata_get))).value;
    }
    async zRange(key, start, stop, options) {
        // eslint-disable-next-line
        let opts = { rev: false, byLex: false, byScore: false, offset: 0, count: 1000 };
        if (options?.reverse) {
            opts.rev = options.reverse;
        }
        if (options?.by === 'lex') {
            opts.byLex = true;
        }
        else if (options?.by === 'score') {
            opts.byScore = true;
        }
        else {
            // LIMIT requires BYLEX/BYSCORE
            opts.offset = 0;
            opts.count = 0;
        }
        if (options?.limit) {
            if (opts.byLex || opts.byScore) {
                opts.offset = options.limit.offset;
                opts.count = options.limit.count;
            }
            else {
                throw new Error(`zRange parsing error: 'limit' only allowed when 'options.by' is 'lex' or 'score'`);
            }
        }
        return (await __classPrivateFieldGet(this, _RedisClient_instances, "a", _RedisClient_plugin_get).ZRange({ key: { key: key }, start: start + '', stop: stop + '', ...opts, scope: __classPrivateFieldGet(this, _RedisClient_scope, "f") }, __classPrivateFieldGet(this, _RedisClient_instances, "a", _RedisClient_metadata_get))).members;
    }
    async zRem(key, members) {
        const response = await __classPrivateFieldGet(this, _RedisClient_instances, "a", _RedisClient_plugin_get).ZRem({ key: { key }, members, scope: __classPrivateFieldGet(this, _RedisClient_scope, "f") }, __classPrivateFieldGet(this, _RedisClient_instances, "a", _RedisClient_metadata_get));
        return response.value;
    }
    async zRemRangeByLex(key, min, max) {
        const response = await __classPrivateFieldGet(this, _RedisClient_instances, "a", _RedisClient_plugin_get).ZRemRangeByLex({ key: { key }, min, max, scope: __classPrivateFieldGet(this, _RedisClient_scope, "f") }, __classPrivateFieldGet(this, _RedisClient_instances, "a", _RedisClient_metadata_get));
        return response.value;
    }
    async zRemRangeByRank(key, start, stop) {
        const response = await __classPrivateFieldGet(this, _RedisClient_instances, "a", _RedisClient_plugin_get).ZRemRangeByRank({ key: { key }, start, stop, scope: __classPrivateFieldGet(this, _RedisClient_scope, "f") }, __classPrivateFieldGet(this, _RedisClient_instances, "a", _RedisClient_metadata_get));
        return response.value;
    }
    async zRemRangeByScore(key, min, max) {
        const response = await __classPrivateFieldGet(this, _RedisClient_instances, "a", _RedisClient_plugin_get).ZRemRangeByScore({ key: { key }, min, max, scope: __classPrivateFieldGet(this, _RedisClient_scope, "f") }, __classPrivateFieldGet(this, _RedisClient_instances, "a", _RedisClient_metadata_get));
        return response.value;
    }
    async zScore(key, member) {
        try {
            const response = await __classPrivateFieldGet(this, _RedisClient_instances, "a", _RedisClient_plugin_get).ZScore({ key: { key }, member, scope: __classPrivateFieldGet(this, _RedisClient_scope, "f") }, {
                ...__classPrivateFieldGet(this, _RedisClient_instances, "a", _RedisClient_metadata_get),
                'throw-redis-nil': { values: ['true'] },
            });
            return response !== null ? response.value : response;
        }
        catch (e) {
            if (isRedisNilError(e)) {
                return undefined;
            }
            throw e;
        }
    }
    async zRank(key, member) {
        try {
            const response = await __classPrivateFieldGet(this, _RedisClient_instances, "a", _RedisClient_plugin_get).ZRank({ key: { key }, member, scope: __classPrivateFieldGet(this, _RedisClient_scope, "f") }, {
                ...__classPrivateFieldGet(this, _RedisClient_instances, "a", _RedisClient_metadata_get),
                'throw-redis-nil': { values: ['true'] },
            });
            return response !== null ? response.value : response;
        }
        catch (e) {
            if (isRedisNilError(e)) {
                return undefined;
            }
            throw e;
        }
    }
    async zIncrBy(key, member, value) {
        const response = await __classPrivateFieldGet(this, _RedisClient_instances, "a", _RedisClient_plugin_get).ZIncrBy({ key, member, value, scope: __classPrivateFieldGet(this, _RedisClient_scope, "f") }, __classPrivateFieldGet(this, _RedisClient_instances, "a", _RedisClient_metadata_get));
        return response !== null ? response.value : response;
    }
    async mGet(keys) {
        const response = await __classPrivateFieldGet(this, _RedisClient_instances, "a", _RedisClient_plugin_get).MGet({ keys, scope: __classPrivateFieldGet(this, _RedisClient_scope, "f") }, __classPrivateFieldGet(this, _RedisClient_instances, "a", _RedisClient_metadata_get));
        return response !== null ? response.values.map((value) => value || null) : response;
    }
    async mSet(keyValues) {
        const kv = Object.entries(keyValues).map(([key, value]) => ({ key, value }));
        await __classPrivateFieldGet(this, _RedisClient_instances, "a", _RedisClient_plugin_get).MSet({ kv, scope: __classPrivateFieldGet(this, _RedisClient_scope, "f") }, __classPrivateFieldGet(this, _RedisClient_instances, "a", _RedisClient_metadata_get));
    }
    async zCard(key) {
        const response = await __classPrivateFieldGet(this, _RedisClient_instances, "a", _RedisClient_plugin_get).ZCard({ key, scope: __classPrivateFieldGet(this, _RedisClient_scope, "f") }, __classPrivateFieldGet(this, _RedisClient_instances, "a", _RedisClient_metadata_get));
        return response !== null ? response.value : response;
    }
    async zScan(key, cursor, pattern, count) {
        const request = { key, cursor, pattern, count, scope: __classPrivateFieldGet(this, _RedisClient_scope, "f") };
        return await __classPrivateFieldGet(this, _RedisClient_instances, "a", _RedisClient_plugin_get).ZScan(request, __classPrivateFieldGet(this, _RedisClient_instances, "a", _RedisClient_metadata_get));
    }
    async type(key) {
        const response = await __classPrivateFieldGet(this, _RedisClient_instances, "a", _RedisClient_plugin_get).Type({ key: key, scope: __classPrivateFieldGet(this, _RedisClient_scope, "f") }, __classPrivateFieldGet(this, _RedisClient_instances, "a", _RedisClient_metadata_get));
        return response !== null ? response.value : response;
    }
    async rename(key, newKey) {
        const response = await __classPrivateFieldGet(this, _RedisClient_instances, "a", _RedisClient_plugin_get).Rename({ key, newKey, scope: __classPrivateFieldGet(this, _RedisClient_scope, "f") }, __classPrivateFieldGet(this, _RedisClient_instances, "a", _RedisClient_metadata_get));
        return response.result;
    }
    async hGet(key, field) {
        try {
            const response = await __classPrivateFieldGet(this, _RedisClient_instances, "a", _RedisClient_plugin_get).HGet({ key, field, scope: __classPrivateFieldGet(this, _RedisClient_scope, "f") }, {
                ...__classPrivateFieldGet(this, _RedisClient_instances, "a", _RedisClient_metadata_get),
                'throw-redis-nil': { values: ['true'] },
            });
            return response !== null ? (response.value ?? undefined) : response;
        }
        catch (e) {
            if (isRedisNilError(e)) {
                return undefined;
            }
            throw e;
        }
    }
    async hMGet(key, fields) {
        const response = await __classPrivateFieldGet(this, _RedisClient_instances, "a", _RedisClient_plugin_get).HMGet({ key, fields, scope: __classPrivateFieldGet(this, _RedisClient_scope, "f") }, __classPrivateFieldGet(this, _RedisClient_instances, "a", _RedisClient_metadata_get));
        return response !== null ? response.values.map((value) => value || null) : response;
    }
    async hSet(key, fieldValues) {
        const fv = Object.entries(fieldValues).map(([field, value]) => ({ field, value }));
        const response = await __classPrivateFieldGet(this, _RedisClient_instances, "a", _RedisClient_plugin_get).HSet({ key, fv, scope: __classPrivateFieldGet(this, _RedisClient_scope, "f") }, __classPrivateFieldGet(this, _RedisClient_instances, "a", _RedisClient_metadata_get));
        return response.value;
    }
    async hSetNX(key, field, value) {
        const response = await __classPrivateFieldGet(this, _RedisClient_instances, "a", _RedisClient_plugin_get).HSetNX({ key, field, value, scope: __classPrivateFieldGet(this, _RedisClient_scope, "f") }, __classPrivateFieldGet(this, _RedisClient_instances, "a", _RedisClient_metadata_get));
        return response.success;
    }
    async hGetAll(key) {
        const response = await __classPrivateFieldGet(this, _RedisClient_instances, "a", _RedisClient_plugin_get).HGetAll({ key, scope: __classPrivateFieldGet(this, _RedisClient_scope, "f") }, __classPrivateFieldGet(this, _RedisClient_instances, "a", _RedisClient_metadata_get));
        return response !== null ? response.fieldValues : response;
    }
    async hDel(key, fields) {
        const response = await __classPrivateFieldGet(this, _RedisClient_instances, "a", _RedisClient_plugin_get).HDel({ key, fields, scope: __classPrivateFieldGet(this, _RedisClient_scope, "f") }, __classPrivateFieldGet(this, _RedisClient_instances, "a", _RedisClient_metadata_get));
        return response.value;
    }
    async hScan(key, cursor, pattern, count) {
        const request = { key, cursor, pattern, count, scope: __classPrivateFieldGet(this, _RedisClient_scope, "f") };
        return await __classPrivateFieldGet(this, _RedisClient_instances, "a", _RedisClient_plugin_get).HScan(request, __classPrivateFieldGet(this, _RedisClient_instances, "a", _RedisClient_metadata_get));
    }
    async hKeys(key) {
        const response = await __classPrivateFieldGet(this, _RedisClient_instances, "a", _RedisClient_plugin_get).HKeys({ key, scope: __classPrivateFieldGet(this, _RedisClient_scope, "f") }, __classPrivateFieldGet(this, _RedisClient_instances, "a", _RedisClient_metadata_get));
        return response !== null ? response.keys : response;
    }
    async hIncrBy(key, field, value) {
        const response = await __classPrivateFieldGet(this, _RedisClient_instances, "a", _RedisClient_plugin_get).HIncrBy({ key, field, value, scope: __classPrivateFieldGet(this, _RedisClient_scope, "f") }, __classPrivateFieldGet(this, _RedisClient_instances, "a", _RedisClient_metadata_get));
        return response.value;
    }
    async hLen(key) {
        const response = await __classPrivateFieldGet(this, _RedisClient_instances, "a", _RedisClient_plugin_get).HLen({
            key,
            scope: __classPrivateFieldGet(this, _RedisClient_scope, "f"),
        });
        return response.value;
    }
    async bitfield(key, ...cmds) {
        const commands = [];
        for (let argIndex = 0; argIndex < cmds.length;) {
            const currentArg = cmds[argIndex];
            const command = {};
            switch (currentArg) {
                case 'get': {
                    if (argIndex + 2 >= cmds.length) {
                        throw Error(`bitfield command parse failed; not enough arguments for 'get' command`);
                    }
                    command.get = {
                        encoding: cmds[argIndex + 1],
                        offset: cmds[argIndex + 2].toString(),
                    };
                    argIndex += 3;
                    break;
                }
                case 'set': {
                    if (argIndex + 3 >= cmds.length) {
                        throw Error(`bitfield command parse failed; not enough arguments for 'set' command`);
                    }
                    command.set = {
                        encoding: cmds[argIndex + 1],
                        offset: cmds[argIndex + 2].toString(),
                        value: cmds[argIndex + 3].toString(),
                    };
                    argIndex += 4;
                    break;
                }
                case 'incrBy': {
                    if (argIndex + 3 >= cmds.length) {
                        throw Error(`bitfield command parse failed; not enough arguments for 'incrBy' command`);
                    }
                    command.incrBy = {
                        encoding: cmds[argIndex + 1],
                        offset: cmds[argIndex + 2].toString(),
                        increment: cmds[argIndex + 3].toString(),
                    };
                    argIndex += 4;
                    break;
                }
                case 'overflow': {
                    if (argIndex + 1 >= cmds.length) {
                        throw Error(`bitfield command parse failed; not enough arguments for 'overflow' command`);
                    }
                    const behavior = cmds[argIndex + 1].toString();
                    command.overflow = {
                        behavior: toBehaviorProto(behavior),
                    };
                    argIndex += 2;
                    break;
                }
                default: {
                    throw Error(`bitfield command parse failed; ${currentArg} unrecognized (must be 'get', 'set', 'incrBy', or 'overflow')`);
                }
            }
            commands.push(command);
        }
        const response = await __classPrivateFieldGet(this, _RedisClient_instances, "a", _RedisClient_plugin_get).Bitfield({
            key,
            commands,
        });
        return response.results;
    }
}
_RedisClient_pluginCache = new WeakMap(), _RedisClient_scope = new WeakMap(), _RedisClient_instances = new WeakSet(), _RedisClient_metadata_get = function _RedisClient_metadata_get() {
    return context.metadata;
}, _RedisClient_plugin_get = function _RedisClient_plugin_get() {
    return (__classPrivateFieldSet(this, _RedisClient_pluginCache, __classPrivateFieldGet(this, _RedisClient_pluginCache, "f") ?? getDevvitConfig().use(RedisAPIDefinition), "f"));
};
function toBehaviorProto(behavior) {
    const lowercase = behavior.toLowerCase();
    switch (lowercase) {
        case 'wrap':
            return BitfieldOverflowBehavior.BITFIELD_OVERFLOW_BEHAVIOR_WRAP;
        case 'sat':
            return BitfieldOverflowBehavior.BITFIELD_OVERFLOW_BEHAVIOR_SAT;
        case 'fail':
            return BitfieldOverflowBehavior.BITFIELD_OVERFLOW_BEHAVIOR_FAIL;
        default:
            throw Error(`unknown bitfield overflow behavior: ${lowercase}`);
    }
}
function isRedisNilError(e) {
    // TODO: Replace with impl in a Gatsby-only world
    //return e && e.details === 'redis: nil';
    if (e && typeof e === 'object' && 'message' in e && typeof e.message === 'string') {
        return e.message.includes('redis: nil');
    }
    else {
        return false;
    }
}
function assertTxMetadataIsCurrent(metadata) {
    if (context.metadata !== metadata) {
        throw new Error(`TxClient: Current metadata does not match what was used to start the transaction. Don't pass clients around between calls!`);
    }
}
export const redis = new RedisClient(RedisKeyScope.INSTALLATION);
