import type { JsonValue } from '@devvit/shared';
type ConnectRealtimeOptions = {
    channel: string;
    onConnect?: (channel: string) => void;
    onDisconnect?: (channel: string) => void;
    onMessage: (data: JsonValue) => void;
};
/**
 * Connects to a realtime channel for receiving messages.
 *
 * @param opts - Connection options including channel name and callbacks
 * @returns A Connection object with a disconnect method
 */
export declare const connectRealtime: (opts: Readonly<ConnectRealtimeOptions>) => Promise<Connection>;
/**
 * Clears all connections. Used for testing purposes.
 * @internal
 */
export declare const __clearConnections: () => void;
declare class Connection {
    #private;
    constructor(opts: Readonly<ConnectRealtimeOptions>);
    /**
     * Disconnects from the realtime channel.
     *
     * This works by sending a list of all channels we want to remain subscribed to,
     * excluding the channel we want to disconnect from. The effect handler compares this
     * new list with existing subscriptions and triggers disconnect for any channel
     * that's no longer in the list.
     */
    disconnect(): Promise<void>;
    onMessage: (ev: MessageEvent) => void;
}
export {};
//# sourceMappingURL=realtime.d.ts.map