export function counter(def) {
    return getMetricsProvider().counter(def);
}
export function gauge(def) {
    return getMetricsProvider().gauge(def);
}
export function histogram(def) {
    return getMetricsProvider().histogram(def);
}
export function setMetricsProvider(provider) {
    Object.assign(globalThis, { devvitMetricsProvider: provider });
}
export function getMetricsProvider() {
    return (globalThis.devvitMetricsProvider ??
        new NullMetrics());
}
class NullMetrics {
    counter(_def) {
        return new NullCounter();
    }
    gauge(_def) {
        return new NullGauge();
    }
    histogram(_def) {
        return new NullHistogram();
    }
}
class NullCounter {
    inc(_labels, _by) { }
    labels(..._values) {
        return new NullCounterInternal();
    }
}
class NullCounterInternal {
    inc(_by) { }
}
class NullGauge {
    set(_labels, _value) { }
    inc(_labels, _by) { }
    dec(_labels, _by) { }
    setToCurrentTime(_labels) { }
    labels(..._values) {
        return new NullGaugeInternal();
    }
}
class NullGaugeInternal {
    set(_value) { }
    inc(_by) { }
    dec(_by) { }
    setToCurrentTime() { }
}
class NullHistogram {
    observe(_labels, _value) { }
    labels(..._values) {
        return new NullHistogramInternal();
    }
}
class NullHistogramInternal {
    observe(_value) { }
}
