export type Metric = Counter | Gauge | Histogram;
/**
 * Devvit looks for a MetricsProvider assigned to globalThis.devvitMetricsProvider.
 * Metrics created by Devvit.addCounterMetric, etc., are provided by this instance.
 * If none is registered, Devvit falls back to a noop provider.
 */
export type MetricsProvider = {
    counter(def: CounterDefinition): Counter;
    gauge(def: GaugeDefinition): Gauge;
    histogram(def: HistogramDefinition): Histogram;
};
type BaseDefinition = {
    name: string;
    labels: string[];
};
export type CounterDefinition = BaseDefinition;
export type GaugeDefinition = BaseDefinition;
export type HistogramDefinition = BaseDefinition & {
    buckets: number[];
};
export type LabelMap = Record<string, string>;
export type Counter = {
    inc(labels: LabelMap, by?: number): void;
    labels(...values: string[]): CounterInternal;
};
export type CounterInternal = {
    inc(by?: number): void;
};
export type Gauge = {
    set(labels: LabelMap, value: number): void;
    inc(labels: LabelMap, value: number): void;
    dec(labels: LabelMap, value: number): void;
    setToCurrentTime(labels: LabelMap): void;
    labels(...values: string[]): GaugeInternal;
};
export type GaugeInternal = {
    set(value: number): void;
    inc(value: number): void;
    dec(value: number): void;
    setToCurrentTime(): void;
};
export type Histogram = {
    observe(labels: LabelMap, value: number): void;
    labels(...values: string[]): HistogramInternal;
};
export type HistogramInternal = {
    observe(value: number): void;
};
export declare function counter(def: CounterDefinition): Counter;
export declare function gauge(def: GaugeDefinition): Gauge;
export declare function histogram(def: HistogramDefinition): Histogram;
export declare function setMetricsProvider(provider: MetricsProvider): void;
export declare function getMetricsProvider(): MetricsProvider;
export {};
//# sourceMappingURL=index.d.ts.map