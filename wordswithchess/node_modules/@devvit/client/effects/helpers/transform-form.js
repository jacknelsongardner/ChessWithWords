// This is a carbon copy of the transformFormFields function in the public-api package
// We copy it here so that @devvit/client does not need to depend on public-api
// Any changes to this function should be reflected in the public-api version
export function transformFormFields(fields) {
    return fields.map((field) => {
        switch (field.type) {
            case 'string':
                return transformStringField(field);
            case 'image':
                return transformImageField(field);
            case 'paragraph':
                return transformParagraphField(field);
            case 'number':
                return transformNumberField(field);
            case 'select':
                return transformSelectField(field);
            case 'boolean':
                return transformBooleanField(field);
            case 'group':
                return transformGroupField(field);
            default:
                throw new Error('Unknown field type.');
        }
    });
}
function transformStringField(field) {
    return {
        defaultValue: {
            fieldType: 0,
            stringValue: field.defaultValue,
        },
        disabled: field.disabled,
        fieldConfig: {
            stringConfig: {
                placeholder: field.placeholder,
            },
        },
        fieldId: field.name,
        fieldType: 0,
        helpText: field.helpText,
        label: field.label,
        required: field.required,
        isSecret: field.isSecret,
    };
}
function transformImageField(field) {
    return {
        disabled: field.disabled,
        fieldId: field.name,
        fieldType: 7,
        helpText: field.helpText,
        label: field.label,
        required: field.required,
    };
}
function transformParagraphField(field) {
    return {
        defaultValue: {
            fieldType: 1,
            stringValue: field.defaultValue,
        },
        disabled: field.disabled,
        fieldConfig: {
            paragraphConfig: {
                lineHeight: field.lineHeight,
                placeholder: field.placeholder,
            },
        },
        fieldId: field.name,
        fieldType: 1,
        helpText: field.helpText,
        label: field.label,
        required: field.required,
    };
}
function transformNumberField(field) {
    return {
        defaultValue: {
            fieldType: 2,
            numberValue: field.defaultValue,
        },
        disabled: field.disabled,
        fieldConfig: {
            numberConfig: {},
        },
        fieldId: field.name,
        fieldType: 2,
        helpText: field.helpText,
        label: field.label,
        required: field.required,
    };
}
function transformSelectField(field) {
    return {
        defaultValue: {
            fieldType: 5,
            selectionValue: {
                values: field.defaultValue ?? [],
            },
        },
        disabled: field.disabled,
        fieldConfig: {
            selectionConfig: {
                choices: field.options,
                multiSelect: field.multiSelect,
            },
        },
        fieldId: field.name,
        fieldType: 5,
        helpText: field.helpText,
        label: field.label,
        required: field.required,
    };
}
function transformBooleanField(field) {
    return {
        defaultValue: {
            fieldType: 3,
            boolValue: field.defaultValue,
        },
        disabled: field.disabled,
        fieldId: field.name,
        fieldType: 3,
        helpText: field.helpText,
        label: field.label,
    };
}
function transformGroupField(field) {
    return {
        fieldId: '',
        fieldType: 6,
        fieldConfig: {
            groupConfig: {
                fields: transformFormFields(field.fields),
            },
        },
        label: field.label,
        helpText: field.helpText,
    };
}
