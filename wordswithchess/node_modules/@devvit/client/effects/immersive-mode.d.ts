/**
 * The presentation mode of the web view.
 * 'inline' The web view is displayed inline within a feed or post detail page
 * 'immersive' The web view is displayed in a larger modal presentation
 */
export type ImmersiveMode = 'inline' | 'immersive';
/**
 * A listener that is called when the immersive mode changes.
 * @param immersiveMode The new immersive mode, either 'inline' or 'immersive'.
 */
export type ImmersiveListener = (immersiveMode: ImmersiveMode) => void;
/**
 * Requests immersive mode for the web view.
 * This will display the web view in a larger modal presentation.
 *
 * @param event The event that triggered the request, must be a trusted event.
 * @returns A promise that resolves when the effect is emitted.
 *
 * @example
 * button.addEventListener('click', async (event) => {
 *   await requestImmersiveMode(event);
 * });
 */
export declare function requestImmersiveMode(event: Event): Promise<void>;
/**
 * Exits immersive mode for the web view.
 * This will display the web view in an inline presentation.
 *
 * @param event The event that triggered the request, must be a trusted event.
 * @returns A promise that resolves when the effect is emitted.
 *
 * @example
 * button.addEventListener('click', async (event) => {
 *   await emitImmersiveModeEffect(event);
 * });
 */
export declare function exitImmersiveMode(event: Event): Promise<void>;
/**
 * Adds a listener that is called when the immersive mode changes.
 * The listener will be called with the new immersive mode, either 'inline' or 'immersive'.
 *
 * @param callback The callback to be called when the immersive mode changes.
 */
export declare function addImmersiveModeChangeEventListener(callback: ImmersiveListener): void;
/**
 * Removes a listener that was previously added with `addImmersiveModeChangeEventListener`.
 *
 * @param callback The callback to be removed.
 */
export declare function removeImmersiveModeChangeEventListener(callback: ImmersiveListener): void;
//# sourceMappingURL=immersive-mode.d.ts.map