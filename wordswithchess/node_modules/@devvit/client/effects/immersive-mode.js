import { WebViewImmersiveMode } from '@devvit/protos/types/devvit/ui/effects/web_view/v1alpha/immersive_mode.js';
import { emitEffect } from '@devvit/shared-types/client/emit-effect.js';
const immersiveListeners = new Set();
/**
 * Requests immersive mode for the web view.
 * This will display the web view in a larger modal presentation.
 *
 * @param event The event that triggered the request, must be a trusted event.
 * @returns A promise that resolves when the effect is emitted.
 *
 * @example
 * button.addEventListener('click', async (event) => {
 *   await requestImmersiveMode(event);
 * });
 */
export function requestImmersiveMode(event) {
    return emitImmersiveModeEffect(2, event);
}
/**
 * Exits immersive mode for the web view.
 * This will display the web view in an inline presentation.
 *
 * @param event The event that triggered the request, must be a trusted event.
 * @returns A promise that resolves when the effect is emitted.
 *
 * @example
 * button.addEventListener('click', async (event) => {
 *   await emitImmersiveModeEffect(event);
 * });
 */
export function exitImmersiveMode(event) {
    return emitImmersiveModeEffect(1, event);
}
/**
 * Adds a listener that is called when the immersive mode changes.
 * The listener will be called with the new immersive mode, either 'inline' or 'immersive'.
 *
 * @param callback The callback to be called when the immersive mode changes.
 */
export function addImmersiveModeChangeEventListener(callback) {
    immersiveListeners.add(callback);
}
/**
 * Removes a listener that was previously added with `addImmersiveModeChangeEventListener`.
 *
 * @param callback The callback to be removed.
 */
export function removeImmersiveModeChangeEventListener(callback) {
    immersiveListeners.delete(callback);
}
async function emitImmersiveModeEffect(mode, event) {
    if (!event.isTrusted) {
        console.error('Immersive mode effect ignored due to untrusted event');
        throw new Error('Untrusted event');
    }
    const type = 9;
    await emitEffect({ type, immersiveMode: { immersiveMode: mode } });
}
/**
 * Handles incoming messages from the client, like when the user closes the immersive modal
 */
if (typeof addEventListener === 'function') {
    addEventListener('message', (event) => {
        const { type, data } = event.data;
        if (type !== 'devvit-message') {
            return;
        }
        if (!data.immersiveModeEvent) {
            return;
        }
        const immersiveMode = event.data.data?.immersiveModeEvent?.immersiveMode;
        const modeString = immersiveMode === 2 ? 'immersive' : 'inline';
        immersiveListeners.forEach((listener) => listener(modeString));
    });
}
