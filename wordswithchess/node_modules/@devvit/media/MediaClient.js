var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var _MediaClient_instances, _MediaClient_pluginCache, _MediaClient_metadata_get, _MediaClient_plugin_get;
import { MediaServiceDefinition } from '@devvit/protos';
import { context } from '@devvit/server';
import { getDevvitConfig } from '@devvit/shared-types/server/get-devvit-config.js';
export class MediaClient {
    constructor() {
        _MediaClient_instances.add(this);
        _MediaClient_pluginCache.set(this, void 0);
    }
    async upload(opts) {
        const response = await __classPrivateFieldGet(this, _MediaClient_instances, "a", _MediaClient_plugin_get).Upload(opts, __classPrivateFieldGet(this, _MediaClient_instances, "a", _MediaClient_metadata_get));
        if (!response.mediaId) {
            throw new Error('unable to get mediaId via uploads');
        }
        return { mediaId: response.mediaId, mediaUrl: response.mediaUrl };
    }
}
_MediaClient_pluginCache = new WeakMap(), _MediaClient_instances = new WeakSet(), _MediaClient_metadata_get = function _MediaClient_metadata_get() {
    return context.metadata;
}, _MediaClient_plugin_get = function _MediaClient_plugin_get() {
    return (__classPrivateFieldSet(this, _MediaClient_pluginCache, __classPrivateFieldGet(this, _MediaClient_pluginCache, "f") ?? getDevvitConfig().use(MediaServiceDefinition), "f"));
};
export const media = new MediaClient();
