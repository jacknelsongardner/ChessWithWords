import type { Metadata } from '@devvit/protos';
import { type BaseContext } from '@devvit/shared';
/** Devvit server context for the lifetime of a request. */
export type Context = BaseContext & {
    cache?: {
        [key: string]: unknown;
    };
    metadata: Metadata;
};
/** Designed to be compatible with IncomingHttpHeaders and any KV. */
type Headers = {
    [header: string]: string | string[] | undefined;
};
/** Constructs a new Context. */
export declare let Context: (headers: Readonly<Headers>) => Context;
/**
 * Overwrite the context provider for test.
 * @experimental
 */
export declare function setContext(fn: typeof Context): void;
/** @internal */
export declare function metaFromIncomingMessage(headers: Readonly<Headers>): Metadata;
export {};
//# sourceMappingURL=server-context.d.ts.map