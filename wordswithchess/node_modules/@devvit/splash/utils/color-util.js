// Color constraints
import { hashString, normalize } from './hash.js';
// We're aiming for a pastel color with sufficient constrast against white text
const minHue = 0;
const maxHue = 360;
const minSaturation = 55;
const maxSaturation = 75;
const minLightness = 30;
const maxLightness = 35;
/**
 * Returns the background and border colors for a given name
 * @param name - The name to get the colors for
 * @returns The background and border colors as HSL strings
 */
export function getColor(name) {
    const nameHash = hashString(name);
    const hue = normalize(nameHash, minHue, maxHue);
    const saturation = normalize(nameHash, minSaturation, maxSaturation);
    const lightness = normalize(nameHash, minLightness, maxLightness);
    return hslToHex(hue, saturation, lightness);
}
export function hslToHex(h, s, l) {
    // Convert HSL to RGB
    h /= 360; // Hue is typically 0-360, convert to 0-1
    s /= 100; // Saturation is 0-100%, convert to 0-1
    l /= 100; // Lightness is 0-100%, convert to 0-1
    let r, g, b;
    if (s === 0) {
        r = g = b = l; // achromatic
    }
    else {
        const hue2rgb = (p, q, t) => {
            if (t < 0)
                t += 1;
            if (t > 1)
                t -= 1;
            if (t < 1 / 6)
                return p + (q - p) * 6 * t;
            if (t < 1 / 2)
                return q;
            if (t < 2 / 3)
                return p + (q - p) * (2 / 3 - t) * 6;
            return p;
        };
        const q = l < 0.5 ? l * (1 + s) : l + s - l * s;
        const p = 2 * l - q;
        r = hue2rgb(p, q, h + 1 / 3);
        g = hue2rgb(p, q, h);
        b = hue2rgb(p, q, h - 1 / 3);
    }
    // Convert RGB to Hex
    const toHex = (c) => {
        const hex = Math.round(c * 255).toString(16);
        return hex.length === 1 ? '0' + hex : hex;
    };
    return `#${toHex(r)}${toHex(g)}${toHex(b)}`;
}
